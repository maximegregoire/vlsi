
nios_test.elf:     file format elf32-littlenios2
nios_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000077c memsz 0x0000077c flags r-x
    LOAD off    0x0000179c vaddr 0x0001079c paddr 0x00010a44 align 2**12
         filesz 0x000002a8 memsz 0x000002a8 flags rw-
    LOAD off    0x00001cec vaddr 0x00010cec paddr 0x00010cec align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000770  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  00010790  00010790  00001790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002a8  0001079c  00010a44  0000179c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00010cec  00010cec  00001cec  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00001a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002d9  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002e38  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000af9  00000000  00000000  00004d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002380  00000000  00000000  0000585a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002f8  00000000  00000000  00007bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000065b  00000000  00000000  00007ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000004ae  00000000  00000000  0000852f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  000089e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00008a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000099d5  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  000099d8  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000099e4  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000099e5  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  000099e6  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  000099ea  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  000099ee  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000009  00000000  00000000  000099f2  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001b  00000000  00000000  000099fb  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00024538  00000000  00000000  00009a16  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00010790 l    d  .rodata	00000000 .rodata
0001079c l    d  .rwdata	00000000 .rwdata
00010cec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main_test.c
00000000 l    df *ABS*	00000000 alt_load.c
00010144 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
0001033c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000103e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001056c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
00010944 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
0001072c l     F .text	00000040 alt_sim_halt
000101b0 g     F .text	00000040 alt_main
00010a44 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010cf8 g     O .bss	00000004 errno
00010cf0 g     O .bss	00000004 alt_argv
00018a24 g       *ABS*	00000000 _gp
000107c4 g     O .rwdata	00000180 alt_fd_list
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000104bc g     F .text	00000090 alt_icache_flush
00010a34 g     O .rwdata	00000004 alt_max_fd
00010a40 g     O .rwdata	00000004 _global_impure_ptr
00010cfc g       *ABS*	00000000 __bss_end
0001079c g     O .rwdata	00000028 alt_dev_null
0001039c g     F .text	00000044 alt_dcache_flush_all
00010a44 g       *ABS*	00000000 __ram_rwdata_end
00010a2c g     O .rwdata	00000008 alt_dev_list
0001079c g       *ABS*	00000000 __ram_rodata_end
00010cfc g       *ABS*	00000000 end
00015000 g       *ABS*	00000000 __alt_stack_pointer
00010570 g     F .text	000001bc __call_exitprocs
00010020 g     F .text	0000004c _start
00010224 g     F .text	0000001c alt_sys_init
0001079c g       *ABS*	00000000 __ram_rwdata_start
00010790 g       *ABS*	00000000 __ram_rodata_start
00010cfc g       *ABS*	00000000 __alt_stack_base
00010cec g       *ABS*	00000000 __bss_start
0001006c g     F .text	00000058 main
00010cf4 g     O .bss	00000004 alt_envp
00010a38 g     O .rwdata	00000004 alt_errno
00010790 g       *ABS*	00000000 __flash_rodata_start
000101f0 g     F .text	00000034 alt_irq_init
0001043c g     F .text	00000060 alt_release_fd
00010a3c g     O .rwdata	00000004 _impure_ptr
00010cec g     O .bss	00000004 alt_argc
00010a24 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010a44 g       *ABS*	00000000 _edata
00010cfc g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
0001049c g     F .text	00000020 altera_nios2_qsys_irq_init
0001054c g     F .text	00000020 exit
00015000 g       *ABS*	00000000 __alt_data_end
0001076c g     F .text	00000020 _exit
0001040c g     F .text	00000030 alt_icache_flush_all
00010240 g     F .text	000000fc close
000100c4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10024:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10028:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1002c:	00bffd16 	blt	zero,r2,10024 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10030:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10034:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1003c:	d6a28914 	ori	gp,gp,35364
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10040:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10044:	10833b14 	ori	r2,r2,3308

    movhi r3, %hi(__bss_end)
   10048:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1004c:	18c33f14 	ori	r3,r3,3324

    beq r2, r3, 1f
   10050:	10c00326 	beq	r2,r3,10060 <_start+0x40>

0:
    stw zero, (r2)
   10054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1005c:	10fffd36 	bltu	r2,r3,10054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10060:	00100c40 	call	100c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10064:	00101b00 	call	101b0 <alt_main>

00010068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10068:	003fff06 	br	10068 <alt_after_alt_main>

0001006c <main>:
#include <stdio.h>
#include <system.h>
#include <io.h>

int main(int i, char ** pp, char ** ppp)
{
   1006c:	defff904 	addi	sp,sp,-28
   10070:	df000615 	stw	fp,24(sp)
   10074:	df000604 	addi	fp,sp,24
   10078:	e13ffd15 	stw	r4,-12(fp)
   1007c:	e17ffe15 	stw	r5,-8(fp)
   10080:	e1bfff15 	stw	r6,-4(fp)
	  int REG_ADDR;
	  volatile int readData;

	  // Read address 0
	  REG_ADDR = 0;
   10084:	e03ffb15 	stw	zero,-20(fp)
	  int counter = 0;
   10088:	e03ffa15 	stw	zero,-24(fp)
	  while (1)
	  {
	  readData = IORD_32DIRECT(REG_0_BASE, REG_ADDR);
   1008c:	e0bffb17 	ldw	r2,-20(fp)
   10090:	10800037 	ldwio	r2,0(r2)
   10094:	e0bffc15 	stw	r2,-16(fp)
	  IOWR_32DIRECT(REG_0_BASE, REG_ADDR + 8, counter + readData);
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	11000204 	addi	r4,r2,8
   100a0:	e0fffc17 	ldw	r3,-16(fp)
   100a4:	e0bffa17 	ldw	r2,-24(fp)
   100a8:	1887883a 	add	r3,r3,r2
   100ac:	2005883a 	mov	r2,r4
   100b0:	10c00035 	stwio	r3,0(r2)
	  counter++;
   100b4:	e0bffa17 	ldw	r2,-24(fp)
   100b8:	10800044 	addi	r2,r2,1
   100bc:	e0bffa15 	stw	r2,-24(fp)
	  }
   100c0:	003ff206 	br	1008c <main+0x20>

000100c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100c4:	defffe04 	addi	sp,sp,-8
   100c8:	dfc00115 	stw	ra,4(sp)
   100cc:	df000015 	stw	fp,0(sp)
   100d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   100d4:	01000074 	movhi	r4,1
   100d8:	21029104 	addi	r4,r4,2628
   100dc:	01400074 	movhi	r5,1
   100e0:	2941e704 	addi	r5,r5,1948
   100e4:	01800074 	movhi	r6,1
   100e8:	31829104 	addi	r6,r6,2628
   100ec:	00101440 	call	10144 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   100f0:	01000074 	movhi	r4,1
   100f4:	21000804 	addi	r4,r4,32
   100f8:	01400074 	movhi	r5,1
   100fc:	29400804 	addi	r5,r5,32
   10100:	01800074 	movhi	r6,1
   10104:	31800804 	addi	r6,r6,32
   10108:	00101440 	call	10144 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1010c:	01000074 	movhi	r4,1
   10110:	2101e404 	addi	r4,r4,1936
   10114:	01400074 	movhi	r5,1
   10118:	2941e404 	addi	r5,r5,1936
   1011c:	01800074 	movhi	r6,1
   10120:	3181e704 	addi	r6,r6,1948
   10124:	00101440 	call	10144 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10128:	001039c0 	call	1039c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1012c:	001040c0 	call	1040c <alt_icache_flush_all>
}
   10130:	e037883a 	mov	sp,fp
   10134:	dfc00117 	ldw	ra,4(sp)
   10138:	df000017 	ldw	fp,0(sp)
   1013c:	dec00204 	addi	sp,sp,8
   10140:	f800283a 	ret

00010144 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10144:	defffc04 	addi	sp,sp,-16
   10148:	df000315 	stw	fp,12(sp)
   1014c:	df000304 	addi	fp,sp,12
   10150:	e13ffd15 	stw	r4,-12(fp)
   10154:	e17ffe15 	stw	r5,-8(fp)
   10158:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1015c:	e0fffe17 	ldw	r3,-8(fp)
   10160:	e0bffd17 	ldw	r2,-12(fp)
   10164:	18800e26 	beq	r3,r2,101a0 <alt_load_section+0x5c>
  {
    while( to != end )
   10168:	00000a06 	br	10194 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1016c:	e0bffd17 	ldw	r2,-12(fp)
   10170:	10c00017 	ldw	r3,0(r2)
   10174:	e0bffe17 	ldw	r2,-8(fp)
   10178:	10c00015 	stw	r3,0(r2)
   1017c:	e0bffe17 	ldw	r2,-8(fp)
   10180:	10800104 	addi	r2,r2,4
   10184:	e0bffe15 	stw	r2,-8(fp)
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	10800104 	addi	r2,r2,4
   10190:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10194:	e0fffe17 	ldw	r3,-8(fp)
   10198:	e0bfff17 	ldw	r2,-4(fp)
   1019c:	18bff31e 	bne	r3,r2,1016c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	df000017 	ldw	fp,0(sp)
   101a8:	dec00104 	addi	sp,sp,4
   101ac:	f800283a 	ret

000101b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101b0:	defffd04 	addi	sp,sp,-12
   101b4:	dfc00215 	stw	ra,8(sp)
   101b8:	df000115 	stw	fp,4(sp)
   101bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101c0:	0009883a 	mov	r4,zero
   101c4:	00101f00 	call	101f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   101c8:	00102240 	call	10224 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   101cc:	d120b217 	ldw	r4,-32056(gp)
   101d0:	d160b317 	ldw	r5,-32052(gp)
   101d4:	d1a0b417 	ldw	r6,-32048(gp)
   101d8:	001006c0 	call	1006c <main>
   101dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   101e0:	01000044 	movi	r4,1
   101e4:	00102400 	call	10240 <close>
  exit (result);
   101e8:	e13fff17 	ldw	r4,-4(fp)
   101ec:	001054c0 	call	1054c <exit>

000101f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   101f0:	defffd04 	addi	sp,sp,-12
   101f4:	dfc00215 	stw	ra,8(sp)
   101f8:	df000115 	stw	fp,4(sp)
   101fc:	df000104 	addi	fp,sp,4
   10200:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   10204:	001049c0 	call	1049c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10208:	00800044 	movi	r2,1
   1020c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

00010224 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10224:	deffff04 	addi	sp,sp,-4
   10228:	df000015 	stw	fp,0(sp)
   1022c:	d839883a 	mov	fp,sp
}
   10230:	e037883a 	mov	sp,fp
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00104 	addi	sp,sp,4
   1023c:	f800283a 	ret

00010240 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10240:	defff804 	addi	sp,sp,-32
   10244:	dfc00715 	stw	ra,28(sp)
   10248:	df000615 	stw	fp,24(sp)
   1024c:	df000604 	addi	fp,sp,24
   10250:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10254:	e0bffc17 	ldw	r2,-16(fp)
   10258:	1004803a 	cmplt	r2,r2,zero
   1025c:	1000081e 	bne	r2,zero,10280 <close+0x40>
   10260:	e0bffc17 	ldw	r2,-16(fp)
   10264:	10800324 	muli	r2,r2,12
   10268:	1007883a 	mov	r3,r2
   1026c:	00800074 	movhi	r2,1
   10270:	1081f104 	addi	r2,r2,1988
   10274:	1887883a 	add	r3,r3,r2
   10278:	e0ffff15 	stw	r3,-4(fp)
   1027c:	00000106 	br	10284 <close+0x44>
   10280:	e03fff15 	stw	zero,-4(fp)
   10284:	e0bfff17 	ldw	r2,-4(fp)
   10288:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   1028c:	e0bffb17 	ldw	r2,-20(fp)
   10290:	1005003a 	cmpeq	r2,r2,zero
   10294:	10001d1e 	bne	r2,zero,1030c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10298:	e0bffb17 	ldw	r2,-20(fp)
   1029c:	10800017 	ldw	r2,0(r2)
   102a0:	10800417 	ldw	r2,16(r2)
   102a4:	1005003a 	cmpeq	r2,r2,zero
   102a8:	1000071e 	bne	r2,zero,102c8 <close+0x88>
   102ac:	e0bffb17 	ldw	r2,-20(fp)
   102b0:	10800017 	ldw	r2,0(r2)
   102b4:	10800417 	ldw	r2,16(r2)
   102b8:	e13ffb17 	ldw	r4,-20(fp)
   102bc:	103ee83a 	callr	r2
   102c0:	e0bffe15 	stw	r2,-8(fp)
   102c4:	00000106 	br	102cc <close+0x8c>
   102c8:	e03ffe15 	stw	zero,-8(fp)
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   102d4:	e13ffc17 	ldw	r4,-16(fp)
   102d8:	001043c0 	call	1043c <alt_release_fd>
    if (rval < 0)
   102dc:	e0bffa17 	ldw	r2,-24(fp)
   102e0:	1004403a 	cmpge	r2,r2,zero
   102e4:	1000071e 	bne	r2,zero,10304 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   102e8:	001033c0 	call	1033c <alt_get_errno>
   102ec:	e0fffa17 	ldw	r3,-24(fp)
   102f0:	00c7c83a 	sub	r3,zero,r3
   102f4:	10c00015 	stw	r3,0(r2)
      return -1;
   102f8:	00bfffc4 	movi	r2,-1
   102fc:	e0bffd15 	stw	r2,-12(fp)
   10300:	00000806 	br	10324 <close+0xe4>
    }
    return 0;
   10304:	e03ffd15 	stw	zero,-12(fp)
   10308:	00000606 	br	10324 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1030c:	001033c0 	call	1033c <alt_get_errno>
   10310:	1007883a 	mov	r3,r2
   10314:	00801444 	movi	r2,81
   10318:	18800015 	stw	r2,0(r3)
    return -1;
   1031c:	00bfffc4 	movi	r2,-1
   10320:	e0bffd15 	stw	r2,-12(fp)
   10324:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   10328:	e037883a 	mov	sp,fp
   1032c:	dfc00117 	ldw	ra,4(sp)
   10330:	df000017 	ldw	fp,0(sp)
   10334:	dec00204 	addi	sp,sp,8
   10338:	f800283a 	ret

0001033c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1033c:	defffd04 	addi	sp,sp,-12
   10340:	dfc00215 	stw	ra,8(sp)
   10344:	df000115 	stw	fp,4(sp)
   10348:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1034c:	00800074 	movhi	r2,1
   10350:	10828e04 	addi	r2,r2,2616
   10354:	10800017 	ldw	r2,0(r2)
   10358:	1005003a 	cmpeq	r2,r2,zero
   1035c:	1000061e 	bne	r2,zero,10378 <alt_get_errno+0x3c>
   10360:	00800074 	movhi	r2,1
   10364:	10828e04 	addi	r2,r2,2616
   10368:	10800017 	ldw	r2,0(r2)
   1036c:	103ee83a 	callr	r2
   10370:	e0bfff15 	stw	r2,-4(fp)
   10374:	00000306 	br	10384 <alt_get_errno+0x48>
   10378:	00800074 	movhi	r2,1
   1037c:	10833e04 	addi	r2,r2,3320
   10380:	e0bfff15 	stw	r2,-4(fp)
   10384:	e0bfff17 	ldw	r2,-4(fp)
}
   10388:	e037883a 	mov	sp,fp
   1038c:	dfc00117 	ldw	ra,4(sp)
   10390:	df000017 	ldw	fp,0(sp)
   10394:	dec00204 	addi	sp,sp,8
   10398:	f800283a 	ret

0001039c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1039c:	defffe04 	addi	sp,sp,-8
   103a0:	df000115 	stw	fp,4(sp)
   103a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   103a8:	e03fff15 	stw	zero,-4(fp)
   103ac:	00000506 	br	103c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   103b0:	e0bfff17 	ldw	r2,-4(fp)
   103b4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   103b8:	e0bfff17 	ldw	r2,-4(fp)
   103bc:	10800804 	addi	r2,r2,32
   103c0:	e0bfff15 	stw	r2,-4(fp)
   103c4:	e0bfff17 	ldw	r2,-4(fp)
   103c8:	10820030 	cmpltui	r2,r2,2048
   103cc:	103ff81e 	bne	r2,zero,103b0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   103d0:	e037883a 	mov	sp,fp
   103d4:	df000017 	ldw	fp,0(sp)
   103d8:	dec00104 	addi	sp,sp,4
   103dc:	f800283a 	ret

000103e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   103e0:	defffc04 	addi	sp,sp,-16
   103e4:	df000315 	stw	fp,12(sp)
   103e8:	df000304 	addi	fp,sp,12
   103ec:	e13ffd15 	stw	r4,-12(fp)
   103f0:	e17ffe15 	stw	r5,-8(fp)
   103f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   103f8:	e0bfff17 	ldw	r2,-4(fp)
}
   103fc:	e037883a 	mov	sp,fp
   10400:	df000017 	ldw	fp,0(sp)
   10404:	dec00104 	addi	sp,sp,4
   10408:	f800283a 	ret

0001040c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1040c:	defffe04 	addi	sp,sp,-8
   10410:	dfc00115 	stw	ra,4(sp)
   10414:	df000015 	stw	fp,0(sp)
   10418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1041c:	0009883a 	mov	r4,zero
   10420:	01440004 	movi	r5,4096
   10424:	00104bc0 	call	104bc <alt_icache_flush>
#endif
}
   10428:	e037883a 	mov	sp,fp
   1042c:	dfc00117 	ldw	ra,4(sp)
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00204 	addi	sp,sp,8
   10438:	f800283a 	ret

0001043c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1043c:	defffe04 	addi	sp,sp,-8
   10440:	df000115 	stw	fp,4(sp)
   10444:	df000104 	addi	fp,sp,4
   10448:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1044c:	e0bfff17 	ldw	r2,-4(fp)
   10450:	108000d0 	cmplti	r2,r2,3
   10454:	10000d1e 	bne	r2,zero,1048c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   10458:	e0bfff17 	ldw	r2,-4(fp)
   1045c:	00c00074 	movhi	r3,1
   10460:	18c1f104 	addi	r3,r3,1988
   10464:	10800324 	muli	r2,r2,12
   10468:	10c5883a 	add	r2,r2,r3
   1046c:	10800204 	addi	r2,r2,8
   10470:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10474:	e0bfff17 	ldw	r2,-4(fp)
   10478:	00c00074 	movhi	r3,1
   1047c:	18c1f104 	addi	r3,r3,1988
   10480:	10800324 	muli	r2,r2,12
   10484:	10c5883a 	add	r2,r2,r3
   10488:	10000015 	stw	zero,0(r2)
  }
}
   1048c:	e037883a 	mov	sp,fp
   10490:	df000017 	ldw	fp,0(sp)
   10494:	dec00104 	addi	sp,sp,4
   10498:	f800283a 	ret

0001049c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1049c:	deffff04 	addi	sp,sp,-4
   104a0:	df000015 	stw	fp,0(sp)
   104a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   104a8:	000170fa 	wrctl	ienable,zero
}
   104ac:	e037883a 	mov	sp,fp
   104b0:	df000017 	ldw	fp,0(sp)
   104b4:	dec00104 	addi	sp,sp,4
   104b8:	f800283a 	ret

000104bc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   104bc:	defffb04 	addi	sp,sp,-20
   104c0:	df000415 	stw	fp,16(sp)
   104c4:	df000404 	addi	fp,sp,16
   104c8:	e13ffe15 	stw	r4,-8(fp)
   104cc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   104d0:	e0bfff17 	ldw	r2,-4(fp)
   104d4:	10840070 	cmpltui	r2,r2,4097
   104d8:	1000021e 	bne	r2,zero,104e4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   104dc:	00840004 	movi	r2,4096
   104e0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   104e4:	e0fffe17 	ldw	r3,-8(fp)
   104e8:	e0bfff17 	ldw	r2,-4(fp)
   104ec:	1885883a 	add	r2,r3,r2
   104f0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   104f4:	e0bffe17 	ldw	r2,-8(fp)
   104f8:	e0bffd15 	stw	r2,-12(fp)
   104fc:	00000506 	br	10514 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10500:	e0bffd17 	ldw	r2,-12(fp)
   10504:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10508:	e0bffd17 	ldw	r2,-12(fp)
   1050c:	10800804 	addi	r2,r2,32
   10510:	e0bffd15 	stw	r2,-12(fp)
   10514:	e0fffd17 	ldw	r3,-12(fp)
   10518:	e0bffc17 	ldw	r2,-16(fp)
   1051c:	18bff836 	bltu	r3,r2,10500 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10520:	e0bffe17 	ldw	r2,-8(fp)
   10524:	108007cc 	andi	r2,r2,31
   10528:	1005003a 	cmpeq	r2,r2,zero
   1052c:	1000021e 	bne	r2,zero,10538 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10530:	e0bffd17 	ldw	r2,-12(fp)
   10534:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10538:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1053c:	e037883a 	mov	sp,fp
   10540:	df000017 	ldw	fp,0(sp)
   10544:	dec00104 	addi	sp,sp,4
   10548:	f800283a 	ret

0001054c <exit>:
   1054c:	defffe04 	addi	sp,sp,-8
   10550:	dc400015 	stw	r17,0(sp)
   10554:	000b883a 	mov	r5,zero
   10558:	2023883a 	mov	r17,r4
   1055c:	dfc00115 	stw	ra,4(sp)
   10560:	00105700 	call	10570 <__call_exitprocs>
   10564:	8809883a 	mov	r4,r17
   10568:	001076c0 	call	1076c <_exit>

0001056c <register_fini>:
   1056c:	f800283a 	ret

00010570 <__call_exitprocs>:
   10570:	defff304 	addi	sp,sp,-52
   10574:	00800074 	movhi	r2,1
   10578:	10829004 	addi	r2,r2,2624
   1057c:	df000b15 	stw	fp,44(sp)
   10580:	17000017 	ldw	fp,0(r2)
   10584:	00800034 	movhi	r2,0
   10588:	10800004 	addi	r2,r2,0
   1058c:	1005003a 	cmpeq	r2,r2,zero
   10590:	d8800215 	stw	r2,8(sp)
   10594:	e0800c04 	addi	r2,fp,48
   10598:	dd800915 	stw	r22,36(sp)
   1059c:	dd400815 	stw	r21,32(sp)
   105a0:	dfc00c15 	stw	ra,48(sp)
   105a4:	ddc00a15 	stw	r23,40(sp)
   105a8:	dd000715 	stw	r20,28(sp)
   105ac:	dcc00615 	stw	r19,24(sp)
   105b0:	dc800515 	stw	r18,20(sp)
   105b4:	dc400415 	stw	r17,16(sp)
   105b8:	dc000315 	stw	r16,12(sp)
   105bc:	282d883a 	mov	r22,r5
   105c0:	d9000115 	stw	r4,4(sp)
   105c4:	d8800015 	stw	r2,0(sp)
   105c8:	282b003a 	cmpeq	r21,r5,zero
   105cc:	e4400c17 	ldw	r17,48(fp)
   105d0:	88001226 	beq	r17,zero,1061c <__call_exitprocs+0xac>
   105d4:	ddc00017 	ldw	r23,0(sp)
   105d8:	88800117 	ldw	r2,4(r17)
   105dc:	8c802217 	ldw	r18,136(r17)
   105e0:	143fffc4 	addi	r16,r2,-1
   105e4:	80000b16 	blt	r16,zero,10614 <__call_exitprocs+0xa4>
   105e8:	9027003a 	cmpeq	r19,r18,zero
   105ec:	a800171e 	bne	r21,zero,1064c <__call_exitprocs+0xdc>
   105f0:	9800051e 	bne	r19,zero,10608 <__call_exitprocs+0x98>
   105f4:	8409883a 	add	r4,r16,r16
   105f8:	2105883a 	add	r2,r4,r4
   105fc:	1485883a 	add	r2,r2,r18
   10600:	10c02017 	ldw	r3,128(r2)
   10604:	b0c01226 	beq	r22,r3,10650 <__call_exitprocs+0xe0>
   10608:	843fffc4 	addi	r16,r16,-1
   1060c:	00bfffc4 	movi	r2,-1
   10610:	80bff61e 	bne	r16,r2,105ec <__call_exitprocs+0x7c>
   10614:	d8800217 	ldw	r2,8(sp)
   10618:	10003226 	beq	r2,zero,106e4 <__call_exitprocs+0x174>
   1061c:	dfc00c17 	ldw	ra,48(sp)
   10620:	df000b17 	ldw	fp,44(sp)
   10624:	ddc00a17 	ldw	r23,40(sp)
   10628:	dd800917 	ldw	r22,36(sp)
   1062c:	dd400817 	ldw	r21,32(sp)
   10630:	dd000717 	ldw	r20,28(sp)
   10634:	dcc00617 	ldw	r19,24(sp)
   10638:	dc800517 	ldw	r18,20(sp)
   1063c:	dc400417 	ldw	r17,16(sp)
   10640:	dc000317 	ldw	r16,12(sp)
   10644:	dec00d04 	addi	sp,sp,52
   10648:	f800283a 	ret
   1064c:	8409883a 	add	r4,r16,r16
   10650:	88c00117 	ldw	r3,4(r17)
   10654:	2105883a 	add	r2,r4,r4
   10658:	1445883a 	add	r2,r2,r17
   1065c:	18ffffc4 	addi	r3,r3,-1
   10660:	11800217 	ldw	r6,8(r2)
   10664:	1c001826 	beq	r3,r16,106c8 <__call_exitprocs+0x158>
   10668:	10000215 	stw	zero,8(r2)
   1066c:	303fe626 	beq	r6,zero,10608 <__call_exitprocs+0x98>
   10670:	8d000117 	ldw	r20,4(r17)
   10674:	9800121e 	bne	r19,zero,106c0 <__call_exitprocs+0x150>
   10678:	00c00044 	movi	r3,1
   1067c:	1c06983a 	sll	r3,r3,r16
   10680:	90804017 	ldw	r2,256(r18)
   10684:	1884703a 	and	r2,r3,r2
   10688:	10000d26 	beq	r2,zero,106c0 <__call_exitprocs+0x150>
   1068c:	90804117 	ldw	r2,260(r18)
   10690:	1884703a 	and	r2,r3,r2
   10694:	10000e1e 	bne	r2,zero,106d0 <__call_exitprocs+0x160>
   10698:	2105883a 	add	r2,r4,r4
   1069c:	1485883a 	add	r2,r2,r18
   106a0:	11400017 	ldw	r5,0(r2)
   106a4:	d9000117 	ldw	r4,4(sp)
   106a8:	303ee83a 	callr	r6
   106ac:	88800117 	ldw	r2,4(r17)
   106b0:	a0bfc61e 	bne	r20,r2,105cc <__call_exitprocs+0x5c>
   106b4:	b8800017 	ldw	r2,0(r23)
   106b8:	147fd326 	beq	r2,r17,10608 <__call_exitprocs+0x98>
   106bc:	003fc306 	br	105cc <__call_exitprocs+0x5c>
   106c0:	303ee83a 	callr	r6
   106c4:	003ff906 	br	106ac <__call_exitprocs+0x13c>
   106c8:	8c000115 	stw	r16,4(r17)
   106cc:	003fe706 	br	1066c <__call_exitprocs+0xfc>
   106d0:	2105883a 	add	r2,r4,r4
   106d4:	1485883a 	add	r2,r2,r18
   106d8:	11000017 	ldw	r4,0(r2)
   106dc:	303ee83a 	callr	r6
   106e0:	003ff206 	br	106ac <__call_exitprocs+0x13c>
   106e4:	88800117 	ldw	r2,4(r17)
   106e8:	10000b1e 	bne	r2,zero,10718 <__call_exitprocs+0x1a8>
   106ec:	89000017 	ldw	r4,0(r17)
   106f0:	20000a26 	beq	r4,zero,1071c <__call_exitprocs+0x1ac>
   106f4:	b9000015 	stw	r4,0(r23)
   106f8:	90000226 	beq	r18,zero,10704 <__call_exitprocs+0x194>
   106fc:	9009883a 	mov	r4,r18
   10700:	00000000 	call	0 <__reset-0x10000>
   10704:	8809883a 	mov	r4,r17
   10708:	00000000 	call	0 <__reset-0x10000>
   1070c:	bc400017 	ldw	r17,0(r23)
   10710:	883fb11e 	bne	r17,zero,105d8 <__call_exitprocs+0x68>
   10714:	003fc106 	br	1061c <__call_exitprocs+0xac>
   10718:	89000017 	ldw	r4,0(r17)
   1071c:	882f883a 	mov	r23,r17
   10720:	2023883a 	mov	r17,r4
   10724:	883fac1e 	bne	r17,zero,105d8 <__call_exitprocs+0x68>
   10728:	003fbc06 	br	1061c <__call_exitprocs+0xac>

0001072c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1072c:	defffd04 	addi	sp,sp,-12
   10730:	df000215 	stw	fp,8(sp)
   10734:	df000204 	addi	fp,sp,8
   10738:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1073c:	e0bfff17 	ldw	r2,-4(fp)
   10740:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10744:	e0bffe17 	ldw	r2,-8(fp)
   10748:	1005003a 	cmpeq	r2,r2,zero
   1074c:	1000021e 	bne	r2,zero,10758 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   10750:	002af070 	cmpltui	zero,zero,43969
   10754:	00000106 	br	1075c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   10758:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1075c:	e037883a 	mov	sp,fp
   10760:	df000017 	ldw	fp,0(sp)
   10764:	dec00104 	addi	sp,sp,4
   10768:	f800283a 	ret

0001076c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1076c:	defffd04 	addi	sp,sp,-12
   10770:	dfc00215 	stw	ra,8(sp)
   10774:	df000115 	stw	fp,4(sp)
   10778:	df000104 	addi	fp,sp,4
   1077c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   10780:	e13fff17 	ldw	r4,-4(fp)
   10784:	001072c0 	call	1072c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10788:	003fff06 	br	10788 <_exit+0x1c>
   1078c:	0001056c 	andhi	zero,zero,1045
