
reg_test_official.elf:     file format elf32-littlenios2
reg_test_official.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00001c98 memsz 0x00001c98 flags r-x
    LOAD off    0x00002cb8 vaddr 0x00081cb8 paddr 0x00081f98 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003278 vaddr 0x00082278 paddr 0x00082278 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001ab0  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  00081c64  00081c64  00002c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00081cb8  00081f98  00002cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00082278  00082278  00003278  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004d8  00000000  00000000  00002fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000006d3  00000000  00000000  00003498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000086a7  00000000  00000000  00003b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f76  00000000  00000000  0000c212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000590d  00000000  00000000  0000e188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007b4  00000000  00000000  00013a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a0c  00000000  00000000  0001424c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c60  00000000  00000000  00014c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000158b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000158d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000171b8  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000171bb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000171be  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000171bf  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000171c0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000171c4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000171c8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000171cc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000171d5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000171de  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000171e7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  000171f9  2**0
                  CONTENTS, READONLY
 29 .jdi          000056a0  00000000  00000000  00017213  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003bd76  00000000  00000000  0001c8b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00081c64 l    d  .rodata	00000000 .rodata
00081cb8 l    d  .rwdata	00000000 .rwdata
00082278 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00081cb8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000804c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000806a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00081d98 l     O .rwdata	0000002c jtag_uart
00080780 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00080a10 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00080c0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00080c88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00080d68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000810c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00081200 l     F .text	000000dc alt_file_locked
00081464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00081a40 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00081c00 l     F .text	00000040 alt_sim_halt
0008052c g     F .text	0000005c alt_main
00080248 g     F .text	00000090 _puts_r
00082294 g     O .bss	00000100 alt_irq
00081f98 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082278 g     O .bss	00000004 errno
00082280 g     O .bss	00000004 alt_argv
00089f6c g       *ABS*	00000000 _gp
00081dec g     O .rwdata	00000180 alt_fd_list
000816e8 g     F .text	00000094 alt_find_dev
00081188 g     F .text	00000078 alt_io_redirect
000802d8 g     F .text	00000014 puts
00080868 g     F .text	00000104 altera_avalon_jtag_uart_read
00081954 g     F .text	00000090 alt_icache_flush
00081f84 g     O .rwdata	00000004 alt_max_fd
00081f70 g     O .rwdata	00000004 _global_impure_ptr
00082394 g       *ABS*	00000000 __bss_end
00080fcc g     F .text	000000f8 alt_iic_isr_register
000815bc g     F .text	0000010c alt_tick
00080f84 g     F .text	00000048 alt_ic_irq_enabled
00081524 g     F .text	00000098 alt_alarm_stop
00082288 g     O .bss	00000004 alt_irq_active
00080000 g       *ABS*	00000000 __alt_mem_onchip_mem
000800ec g     F .exceptions	000000c8 alt_irq_handler
00081dc4 g     O .rwdata	00000028 alt_dev_null
00080c6c g     F .text	0000001c alt_dcache_flush_all
00081f98 g       *ABS*	00000000 __ram_rwdata_end
00081f7c g     O .rwdata	00000008 alt_dev_list
00080588 g     F .text	00000120 write
00081cb8 g       *ABS*	00000000 __ram_rodata_end
00082394 g       *ABS*	00000000 end
00085000 g       *ABS*	00000000 __alt_stack_pointer
00080a80 g     F .text	00000090 alt_avalon_timer_sc_init
0008096c g     F .text	000000a4 altera_avalon_jtag_uart_write
00081a44 g     F .text	000001bc __call_exitprocs
000801b4 g     F .text	0000003c _start
0008228c g     O .bss	00000004 _alt_tick_rate
00082290 g     O .bss	00000004 _alt_nticks
0008073c g     F .text	00000044 alt_sys_init
00081cb8 g       *ABS*	00000000 __ram_rwdata_start
00081c64 g       *ABS*	00000000 __ram_rodata_start
000807b8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008189c g     F .text	000000b8 alt_get_fd
00081a04 g     F .text	0000003c memcmp
00082394 g       *ABS*	00000000 __alt_stack_base
0008177c g     F .text	00000120 alt_find_file
00080cb4 g     F .text	000000b4 alt_dev_llist_insert
0008030c g     F .text	000000bc __sfvwrite_small_dev
00082278 g       *ABS*	00000000 __bss_start
000801f0 g     F .text	00000058 main
00082284 g     O .bss	00000004 alt_envp
00080810 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00081f88 g     O .rwdata	00000004 alt_errno
00081c64 g       *ABS*	00000000 __flash_rodata_start
00080708 g     F .text	00000034 alt_irq_init
000814c4 g     F .text	00000060 alt_release_fd
000803c8 g     F .text	00000078 _write_r
00081f6c g     O .rwdata	00000004 _impure_ptr
0008227c g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
00081f74 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00080df8 g     F .text	00000050 alt_ic_isr_register
00081f98 g       *ABS*	00000000 _edata
00082394 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00080ee4 g     F .text	000000a0 alt_ic_irq_disable
000816c8 g     F .text	00000020 altera_nios2_qsys_irq_init
000819e4 g     F .text	00000020 exit
00085000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00081c40 g     F .text	00000020 _exit
000802ec g     F .text	00000020 strlen
000812dc g     F .text	00000188 open
00080dc8 g     F .text	00000030 alt_icache_flush_all
00081f8c g     O .rwdata	00000004 alt_priority_mask
00080e48 g     F .text	0000009c alt_ic_irq_enable
00081f90 g     O .rwdata	00000008 alt_alarm_list
00080b10 g     F .text	000000fc close
00080440 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406d14 	ori	at,at,436
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00234 	movhi	r3,8
   80134:	18c8a504 	addi	r3,r3,8852
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00234 	movhi	r3,8
   8014c:	18c8a504 	addi	r3,r3,8852
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c0:	d6a7db14 	ori	gp,gp,40812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	10889e14 	ori	r2,r2,8824

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18c8e514 	ori	r3,r3,9108

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	00804400 	call	80440 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008052c0 	call	8052c <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <main>:
#include <io.h>

#define REGFILE_0_BASE 0x0

int main()
{
   801f0:	defffd04 	addi	sp,sp,-12
   801f4:	dfc00215 	stw	ra,8(sp)
   801f8:	df000115 	stw	fp,4(sp)
   801fc:	df000104 	addi	fp,sp,4
	  printf("Hello from Nios II!\n");
   80200:	01000234 	movhi	r4,8
   80204:	21071904 	addi	r4,r4,7268
   80208:	00802d80 	call	802d8 <puts>

	  int REG_ADDR;

	  // Read address 0
	  REG_ADDR = 0;
   8020c:	e03fff15 	stw	zero,-4(fp)
	  IOWR_32DIRECT(REGFILE_0_BASE, REG_ADDR, 0xDEADBEEF);
   80210:	e0bfff17 	ldw	r2,-4(fp)
   80214:	1007883a 	mov	r3,r2
   80218:	00b7abb4 	movhi	r2,57006
   8021c:	10afbbc4 	addi	r2,r2,-16657
   80220:	18800035 	stwio	r2,0(r3)
	  printf("DONE READING\n");
   80224:	01000234 	movhi	r4,8
   80228:	21071e04 	addi	r4,r4,7288
   8022c:	00802d80 	call	802d8 <puts>

	  return 0;
   80230:	0005883a 	mov	r2,zero
}
   80234:	e037883a 	mov	sp,fp
   80238:	dfc00117 	ldw	ra,4(sp)
   8023c:	df000017 	ldw	fp,0(sp)
   80240:	dec00204 	addi	sp,sp,8
   80244:	f800283a 	ret

00080248 <_puts_r>:
   80248:	defffd04 	addi	sp,sp,-12
   8024c:	dc000015 	stw	r16,0(sp)
   80250:	2021883a 	mov	r16,r4
   80254:	2809883a 	mov	r4,r5
   80258:	dfc00215 	stw	ra,8(sp)
   8025c:	dc400115 	stw	r17,4(sp)
   80260:	2823883a 	mov	r17,r5
   80264:	00802ec0 	call	802ec <strlen>
   80268:	80c00217 	ldw	r3,8(r16)
   8026c:	02000234 	movhi	r8,8
   80270:	4200c304 	addi	r8,r8,780
   80274:	880d883a 	mov	r6,r17
   80278:	100f883a 	mov	r7,r2
   8027c:	8009883a 	mov	r4,r16
   80280:	180b883a 	mov	r5,r3
   80284:	1a000115 	stw	r8,4(r3)
   80288:	403ee83a 	callr	r8
   8028c:	047fffc4 	movi	r17,-1
   80290:	8009883a 	mov	r4,r16
   80294:	01800234 	movhi	r6,8
   80298:	31872204 	addi	r6,r6,7304
   8029c:	01c00044 	movi	r7,1
   802a0:	1440071e 	bne	r2,r17,802c0 <_puts_r+0x78>
   802a4:	00ffffc4 	movi	r3,-1
   802a8:	1805883a 	mov	r2,r3
   802ac:	dfc00217 	ldw	ra,8(sp)
   802b0:	dc400117 	ldw	r17,4(sp)
   802b4:	dc000017 	ldw	r16,0(sp)
   802b8:	dec00304 	addi	sp,sp,12
   802bc:	f800283a 	ret
   802c0:	81400217 	ldw	r5,8(r16)
   802c4:	28c00117 	ldw	r3,4(r5)
   802c8:	183ee83a 	callr	r3
   802cc:	0007883a 	mov	r3,zero
   802d0:	147ff51e 	bne	r2,r17,802a8 <_puts_r+0x60>
   802d4:	003ff306 	br	802a4 <_puts_r+0x5c>

000802d8 <puts>:
   802d8:	00800234 	movhi	r2,8
   802dc:	1087db04 	addi	r2,r2,8044
   802e0:	200b883a 	mov	r5,r4
   802e4:	11000017 	ldw	r4,0(r2)
   802e8:	00802481 	jmpi	80248 <_puts_r>

000802ec <strlen>:
   802ec:	20800007 	ldb	r2,0(r4)
   802f0:	10000526 	beq	r2,zero,80308 <strlen+0x1c>
   802f4:	2007883a 	mov	r3,r4
   802f8:	18c00044 	addi	r3,r3,1
   802fc:	18800007 	ldb	r2,0(r3)
   80300:	103ffd1e 	bne	r2,zero,802f8 <strlen+0xc>
   80304:	1905c83a 	sub	r2,r3,r4
   80308:	f800283a 	ret

0008030c <__sfvwrite_small_dev>:
   8030c:	2880000b 	ldhu	r2,0(r5)
   80310:	defffa04 	addi	sp,sp,-24
   80314:	dcc00315 	stw	r19,12(sp)
   80318:	1080020c 	andi	r2,r2,8
   8031c:	dc800215 	stw	r18,8(sp)
   80320:	dc400115 	stw	r17,4(sp)
   80324:	dfc00515 	stw	ra,20(sp)
   80328:	dd000415 	stw	r20,16(sp)
   8032c:	dc000015 	stw	r16,0(sp)
   80330:	2825883a 	mov	r18,r5
   80334:	2027883a 	mov	r19,r4
   80338:	3023883a 	mov	r17,r6
   8033c:	10002026 	beq	r2,zero,803c0 <__sfvwrite_small_dev+0xb4>
   80340:	2940008f 	ldh	r5,2(r5)
   80344:	28000f16 	blt	r5,zero,80384 <__sfvwrite_small_dev+0x78>
   80348:	01c01b0e 	bge	zero,r7,803b8 <__sfvwrite_small_dev+0xac>
   8034c:	3821883a 	mov	r16,r7
   80350:	05010004 	movi	r20,1024
   80354:	00000206 	br	80360 <__sfvwrite_small_dev+0x54>
   80358:	0400170e 	bge	zero,r16,803b8 <__sfvwrite_small_dev+0xac>
   8035c:	9140008f 	ldh	r5,2(r18)
   80360:	880d883a 	mov	r6,r17
   80364:	9809883a 	mov	r4,r19
   80368:	800f883a 	mov	r7,r16
   8036c:	a400010e 	bge	r20,r16,80374 <__sfvwrite_small_dev+0x68>
   80370:	01c10004 	movi	r7,1024
   80374:	00803c80 	call	803c8 <_write_r>
   80378:	88a3883a 	add	r17,r17,r2
   8037c:	80a1c83a 	sub	r16,r16,r2
   80380:	00bff516 	blt	zero,r2,80358 <__sfvwrite_small_dev+0x4c>
   80384:	9080000b 	ldhu	r2,0(r18)
   80388:	00ffffc4 	movi	r3,-1
   8038c:	10801014 	ori	r2,r2,64
   80390:	9080000d 	sth	r2,0(r18)
   80394:	1805883a 	mov	r2,r3
   80398:	dfc00517 	ldw	ra,20(sp)
   8039c:	dd000417 	ldw	r20,16(sp)
   803a0:	dcc00317 	ldw	r19,12(sp)
   803a4:	dc800217 	ldw	r18,8(sp)
   803a8:	dc400117 	ldw	r17,4(sp)
   803ac:	dc000017 	ldw	r16,0(sp)
   803b0:	dec00604 	addi	sp,sp,24
   803b4:	f800283a 	ret
   803b8:	0007883a 	mov	r3,zero
   803bc:	003ff506 	br	80394 <__sfvwrite_small_dev+0x88>
   803c0:	00ffffc4 	movi	r3,-1
   803c4:	003ff306 	br	80394 <__sfvwrite_small_dev+0x88>

000803c8 <_write_r>:
   803c8:	defffd04 	addi	sp,sp,-12
   803cc:	dc000015 	stw	r16,0(sp)
   803d0:	04000234 	movhi	r16,8
   803d4:	84089e04 	addi	r16,r16,8824
   803d8:	dc400115 	stw	r17,4(sp)
   803dc:	80000015 	stw	zero,0(r16)
   803e0:	2023883a 	mov	r17,r4
   803e4:	2809883a 	mov	r4,r5
   803e8:	300b883a 	mov	r5,r6
   803ec:	380d883a 	mov	r6,r7
   803f0:	dfc00215 	stw	ra,8(sp)
   803f4:	00805880 	call	80588 <write>
   803f8:	1007883a 	mov	r3,r2
   803fc:	00bfffc4 	movi	r2,-1
   80400:	18800626 	beq	r3,r2,8041c <_write_r+0x54>
   80404:	1805883a 	mov	r2,r3
   80408:	dfc00217 	ldw	ra,8(sp)
   8040c:	dc400117 	ldw	r17,4(sp)
   80410:	dc000017 	ldw	r16,0(sp)
   80414:	dec00304 	addi	sp,sp,12
   80418:	f800283a 	ret
   8041c:	80800017 	ldw	r2,0(r16)
   80420:	103ff826 	beq	r2,zero,80404 <_write_r+0x3c>
   80424:	88800015 	stw	r2,0(r17)
   80428:	1805883a 	mov	r2,r3
   8042c:	dfc00217 	ldw	ra,8(sp)
   80430:	dc400117 	ldw	r17,4(sp)
   80434:	dc000017 	ldw	r16,0(sp)
   80438:	dec00304 	addi	sp,sp,12
   8043c:	f800283a 	ret

00080440 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80440:	defffe04 	addi	sp,sp,-8
   80444:	dfc00115 	stw	ra,4(sp)
   80448:	df000015 	stw	fp,0(sp)
   8044c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80450:	01000234 	movhi	r4,8
   80454:	2107e604 	addi	r4,r4,8088
   80458:	01400234 	movhi	r5,8
   8045c:	29472e04 	addi	r5,r5,7352
   80460:	01800234 	movhi	r6,8
   80464:	3187e604 	addi	r6,r6,8088
   80468:	00804c00 	call	804c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8046c:	01000234 	movhi	r4,8
   80470:	21000804 	addi	r4,r4,32
   80474:	01400234 	movhi	r5,8
   80478:	29400804 	addi	r5,r5,32
   8047c:	01800234 	movhi	r6,8
   80480:	31806d04 	addi	r6,r6,436
   80484:	00804c00 	call	804c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80488:	01000234 	movhi	r4,8
   8048c:	21071904 	addi	r4,r4,7268
   80490:	01400234 	movhi	r5,8
   80494:	29471904 	addi	r5,r5,7268
   80498:	01800234 	movhi	r6,8
   8049c:	31872e04 	addi	r6,r6,7352
   804a0:	00804c00 	call	804c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   804a4:	0080c6c0 	call	80c6c <alt_dcache_flush_all>
  alt_icache_flush_all();
   804a8:	0080dc80 	call	80dc8 <alt_icache_flush_all>
}
   804ac:	e037883a 	mov	sp,fp
   804b0:	dfc00117 	ldw	ra,4(sp)
   804b4:	df000017 	ldw	fp,0(sp)
   804b8:	dec00204 	addi	sp,sp,8
   804bc:	f800283a 	ret

000804c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   804c0:	defffc04 	addi	sp,sp,-16
   804c4:	df000315 	stw	fp,12(sp)
   804c8:	df000304 	addi	fp,sp,12
   804cc:	e13ffd15 	stw	r4,-12(fp)
   804d0:	e17ffe15 	stw	r5,-8(fp)
   804d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   804d8:	e0fffe17 	ldw	r3,-8(fp)
   804dc:	e0bffd17 	ldw	r2,-12(fp)
   804e0:	18800e26 	beq	r3,r2,8051c <alt_load_section+0x5c>
  {
    while( to != end )
   804e4:	00000a06 	br	80510 <alt_load_section+0x50>
    {
      *to++ = *from++;
   804e8:	e0bffd17 	ldw	r2,-12(fp)
   804ec:	10c00017 	ldw	r3,0(r2)
   804f0:	e0bffe17 	ldw	r2,-8(fp)
   804f4:	10c00015 	stw	r3,0(r2)
   804f8:	e0bffe17 	ldw	r2,-8(fp)
   804fc:	10800104 	addi	r2,r2,4
   80500:	e0bffe15 	stw	r2,-8(fp)
   80504:	e0bffd17 	ldw	r2,-12(fp)
   80508:	10800104 	addi	r2,r2,4
   8050c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80510:	e0fffe17 	ldw	r3,-8(fp)
   80514:	e0bfff17 	ldw	r2,-4(fp)
   80518:	18bff31e 	bne	r3,r2,804e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8051c:	e037883a 	mov	sp,fp
   80520:	df000017 	ldw	fp,0(sp)
   80524:	dec00104 	addi	sp,sp,4
   80528:	f800283a 	ret

0008052c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8052c:	defffd04 	addi	sp,sp,-12
   80530:	dfc00215 	stw	ra,8(sp)
   80534:	df000115 	stw	fp,4(sp)
   80538:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8053c:	0009883a 	mov	r4,zero
   80540:	00807080 	call	80708 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80544:	008073c0 	call	8073c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80548:	01000234 	movhi	r4,8
   8054c:	21072304 	addi	r4,r4,7308
   80550:	01400234 	movhi	r5,8
   80554:	29472304 	addi	r5,r5,7308
   80558:	01800234 	movhi	r6,8
   8055c:	31872304 	addi	r6,r6,7308
   80560:	00811880 	call	81188 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80564:	d120c417 	ldw	r4,-31984(gp)
   80568:	d160c517 	ldw	r5,-31980(gp)
   8056c:	d1a0c617 	ldw	r6,-31976(gp)
   80570:	00801f00 	call	801f0 <main>
   80574:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80578:	01000044 	movi	r4,1
   8057c:	0080b100 	call	80b10 <close>
  exit (result);
   80580:	e13fff17 	ldw	r4,-4(fp)
   80584:	00819e40 	call	819e4 <exit>

00080588 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   80588:	defff704 	addi	sp,sp,-36
   8058c:	dfc00815 	stw	ra,32(sp)
   80590:	df000715 	stw	fp,28(sp)
   80594:	df000704 	addi	fp,sp,28
   80598:	e13ffb15 	stw	r4,-20(fp)
   8059c:	e17ffc15 	stw	r5,-16(fp)
   805a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   805a4:	e0bffb17 	ldw	r2,-20(fp)
   805a8:	1004803a 	cmplt	r2,r2,zero
   805ac:	1000081e 	bne	r2,zero,805d0 <write+0x48>
   805b0:	e0bffb17 	ldw	r2,-20(fp)
   805b4:	10800324 	muli	r2,r2,12
   805b8:	1007883a 	mov	r3,r2
   805bc:	00800234 	movhi	r2,8
   805c0:	10877b04 	addi	r2,r2,7660
   805c4:	1887883a 	add	r3,r3,r2
   805c8:	e0ffff15 	stw	r3,-4(fp)
   805cc:	00000106 	br	805d4 <write+0x4c>
   805d0:	e03fff15 	stw	zero,-4(fp)
   805d4:	e0bfff17 	ldw	r2,-4(fp)
   805d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   805dc:	e0bffa17 	ldw	r2,-24(fp)
   805e0:	1005003a 	cmpeq	r2,r2,zero
   805e4:	1000241e 	bne	r2,zero,80678 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   805e8:	e0bffa17 	ldw	r2,-24(fp)
   805ec:	10800217 	ldw	r2,8(r2)
   805f0:	108000cc 	andi	r2,r2,3
   805f4:	1005003a 	cmpeq	r2,r2,zero
   805f8:	10001a1e 	bne	r2,zero,80664 <write+0xdc>
   805fc:	e0bffa17 	ldw	r2,-24(fp)
   80600:	10800017 	ldw	r2,0(r2)
   80604:	10800617 	ldw	r2,24(r2)
   80608:	1005003a 	cmpeq	r2,r2,zero
   8060c:	1000151e 	bne	r2,zero,80664 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   80610:	e0bffa17 	ldw	r2,-24(fp)
   80614:	10800017 	ldw	r2,0(r2)
   80618:	10800617 	ldw	r2,24(r2)
   8061c:	e17ffc17 	ldw	r5,-16(fp)
   80620:	e1bffd17 	ldw	r6,-12(fp)
   80624:	e13ffa17 	ldw	r4,-24(fp)
   80628:	103ee83a 	callr	r2
   8062c:	e0bff915 	stw	r2,-28(fp)
   80630:	e0bff917 	ldw	r2,-28(fp)
   80634:	1004403a 	cmpge	r2,r2,zero
   80638:	1000071e 	bne	r2,zero,80658 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   8063c:	00806a80 	call	806a8 <alt_get_errno>
   80640:	e0fff917 	ldw	r3,-28(fp)
   80644:	00c7c83a 	sub	r3,zero,r3
   80648:	10c00015 	stw	r3,0(r2)
        return -1;
   8064c:	00bfffc4 	movi	r2,-1
   80650:	e0bffe15 	stw	r2,-8(fp)
   80654:	00000e06 	br	80690 <write+0x108>
      }
      return rval;
   80658:	e0bff917 	ldw	r2,-28(fp)
   8065c:	e0bffe15 	stw	r2,-8(fp)
   80660:	00000b06 	br	80690 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   80664:	00806a80 	call	806a8 <alt_get_errno>
   80668:	1007883a 	mov	r3,r2
   8066c:	00800344 	movi	r2,13
   80670:	18800015 	stw	r2,0(r3)
   80674:	00000406 	br	80688 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   80678:	00806a80 	call	806a8 <alt_get_errno>
   8067c:	1007883a 	mov	r3,r2
   80680:	00801444 	movi	r2,81
   80684:	18800015 	stw	r2,0(r3)
  }
  return -1;
   80688:	00bfffc4 	movi	r2,-1
   8068c:	e0bffe15 	stw	r2,-8(fp)
   80690:	e0bffe17 	ldw	r2,-8(fp)
}
   80694:	e037883a 	mov	sp,fp
   80698:	dfc00117 	ldw	ra,4(sp)
   8069c:	df000017 	ldw	fp,0(sp)
   806a0:	dec00204 	addi	sp,sp,8
   806a4:	f800283a 	ret

000806a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   806a8:	defffd04 	addi	sp,sp,-12
   806ac:	dfc00215 	stw	ra,8(sp)
   806b0:	df000115 	stw	fp,4(sp)
   806b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   806b8:	00800234 	movhi	r2,8
   806bc:	1087e204 	addi	r2,r2,8072
   806c0:	10800017 	ldw	r2,0(r2)
   806c4:	1005003a 	cmpeq	r2,r2,zero
   806c8:	1000061e 	bne	r2,zero,806e4 <alt_get_errno+0x3c>
   806cc:	00800234 	movhi	r2,8
   806d0:	1087e204 	addi	r2,r2,8072
   806d4:	10800017 	ldw	r2,0(r2)
   806d8:	103ee83a 	callr	r2
   806dc:	e0bfff15 	stw	r2,-4(fp)
   806e0:	00000306 	br	806f0 <alt_get_errno+0x48>
   806e4:	00800234 	movhi	r2,8
   806e8:	10889e04 	addi	r2,r2,8824
   806ec:	e0bfff15 	stw	r2,-4(fp)
   806f0:	e0bfff17 	ldw	r2,-4(fp)
}
   806f4:	e037883a 	mov	sp,fp
   806f8:	dfc00117 	ldw	ra,4(sp)
   806fc:	df000017 	ldw	fp,0(sp)
   80700:	dec00204 	addi	sp,sp,8
   80704:	f800283a 	ret

00080708 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80708:	defffd04 	addi	sp,sp,-12
   8070c:	dfc00215 	stw	ra,8(sp)
   80710:	df000115 	stw	fp,4(sp)
   80714:	df000104 	addi	fp,sp,4
   80718:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   8071c:	00816c80 	call	816c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80720:	00800044 	movi	r2,1
   80724:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80728:	e037883a 	mov	sp,fp
   8072c:	dfc00117 	ldw	ra,4(sp)
   80730:	df000017 	ldw	fp,0(sp)
   80734:	dec00204 	addi	sp,sp,8
   80738:	f800283a 	ret

0008073c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8073c:	defffe04 	addi	sp,sp,-8
   80740:	dfc00115 	stw	ra,4(sp)
   80744:	df000015 	stw	fp,0(sp)
   80748:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   8074c:	01001804 	movi	r4,96
   80750:	000b883a 	mov	r5,zero
   80754:	01800044 	movi	r6,1
   80758:	01c0fa04 	movi	r7,1000
   8075c:	0080a800 	call	80a80 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80760:	01000234 	movhi	r4,8
   80764:	21076604 	addi	r4,r4,7576
   80768:	00807800 	call	80780 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   8076c:	e037883a 	mov	sp,fp
   80770:	dfc00117 	ldw	ra,4(sp)
   80774:	df000017 	ldw	fp,0(sp)
   80778:	dec00204 	addi	sp,sp,8
   8077c:	f800283a 	ret

00080780 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80780:	defffd04 	addi	sp,sp,-12
   80784:	dfc00215 	stw	ra,8(sp)
   80788:	df000115 	stw	fp,4(sp)
   8078c:	df000104 	addi	fp,sp,4
   80790:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80794:	e13fff17 	ldw	r4,-4(fp)
   80798:	01400234 	movhi	r5,8
   8079c:	2947df04 	addi	r5,r5,8060
   807a0:	0080cb40 	call	80cb4 <alt_dev_llist_insert>
}
   807a4:	e037883a 	mov	sp,fp
   807a8:	dfc00117 	ldw	ra,4(sp)
   807ac:	df000017 	ldw	fp,0(sp)
   807b0:	dec00204 	addi	sp,sp,8
   807b4:	f800283a 	ret

000807b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   807b8:	defffa04 	addi	sp,sp,-24
   807bc:	dfc00515 	stw	ra,20(sp)
   807c0:	df000415 	stw	fp,16(sp)
   807c4:	df000404 	addi	fp,sp,16
   807c8:	e13ffd15 	stw	r4,-12(fp)
   807cc:	e17ffe15 	stw	r5,-8(fp)
   807d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   807d4:	e0bffd17 	ldw	r2,-12(fp)
   807d8:	10800017 	ldw	r2,0(r2)
   807dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   807e0:	e0bffc17 	ldw	r2,-16(fp)
   807e4:	11000a04 	addi	r4,r2,40
   807e8:	e0bffd17 	ldw	r2,-12(fp)
   807ec:	11c00217 	ldw	r7,8(r2)
   807f0:	e17ffe17 	ldw	r5,-8(fp)
   807f4:	e1bfff17 	ldw	r6,-4(fp)
   807f8:	00808680 	call	80868 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   807fc:	e037883a 	mov	sp,fp
   80800:	dfc00117 	ldw	ra,4(sp)
   80804:	df000017 	ldw	fp,0(sp)
   80808:	dec00204 	addi	sp,sp,8
   8080c:	f800283a 	ret

00080810 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80810:	defffa04 	addi	sp,sp,-24
   80814:	dfc00515 	stw	ra,20(sp)
   80818:	df000415 	stw	fp,16(sp)
   8081c:	df000404 	addi	fp,sp,16
   80820:	e13ffd15 	stw	r4,-12(fp)
   80824:	e17ffe15 	stw	r5,-8(fp)
   80828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8082c:	e0bffd17 	ldw	r2,-12(fp)
   80830:	10800017 	ldw	r2,0(r2)
   80834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80838:	e0bffc17 	ldw	r2,-16(fp)
   8083c:	11000a04 	addi	r4,r2,40
   80840:	e0bffd17 	ldw	r2,-12(fp)
   80844:	11c00217 	ldw	r7,8(r2)
   80848:	e17ffe17 	ldw	r5,-8(fp)
   8084c:	e1bfff17 	ldw	r6,-4(fp)
   80850:	008096c0 	call	8096c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80854:	e037883a 	mov	sp,fp
   80858:	dfc00117 	ldw	ra,4(sp)
   8085c:	df000017 	ldw	fp,0(sp)
   80860:	dec00204 	addi	sp,sp,8
   80864:	f800283a 	ret

00080868 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   80868:	defff604 	addi	sp,sp,-40
   8086c:	df000915 	stw	fp,36(sp)
   80870:	df000904 	addi	fp,sp,36
   80874:	e13ffb15 	stw	r4,-20(fp)
   80878:	e17ffc15 	stw	r5,-16(fp)
   8087c:	e1bffd15 	stw	r6,-12(fp)
   80880:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   80884:	e0bffb17 	ldw	r2,-20(fp)
   80888:	10800017 	ldw	r2,0(r2)
   8088c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   80890:	e0bffc17 	ldw	r2,-16(fp)
   80894:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   80898:	e0bffd17 	ldw	r2,-12(fp)
   8089c:	1007883a 	mov	r3,r2
   808a0:	e0bffc17 	ldw	r2,-16(fp)
   808a4:	10c5883a 	add	r2,r2,r3
   808a8:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   808ac:	00001606 	br	80908 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   808b0:	e0bffa17 	ldw	r2,-24(fp)
   808b4:	10800037 	ldwio	r2,0(r2)
   808b8:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   808bc:	e0bff717 	ldw	r2,-36(fp)
   808c0:	10a0000c 	andi	r2,r2,32768
   808c4:	1005003a 	cmpeq	r2,r2,zero
   808c8:	1000081e 	bne	r2,zero,808ec <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   808cc:	e0bff717 	ldw	r2,-36(fp)
   808d0:	1007883a 	mov	r3,r2
   808d4:	e0bff917 	ldw	r2,-28(fp)
   808d8:	10c00005 	stb	r3,0(r2)
   808dc:	e0bff917 	ldw	r2,-28(fp)
   808e0:	10800044 	addi	r2,r2,1
   808e4:	e0bff915 	stw	r2,-28(fp)
   808e8:	00000706 	br	80908 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   808ec:	e0fff917 	ldw	r3,-28(fp)
   808f0:	e0bffc17 	ldw	r2,-16(fp)
   808f4:	1880071e 	bne	r3,r2,80914 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   808f8:	e0bffe17 	ldw	r2,-8(fp)
   808fc:	1090000c 	andi	r2,r2,16384
   80900:	1004c03a 	cmpne	r2,r2,zero
   80904:	1000031e 	bne	r2,zero,80914 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   80908:	e0fff917 	ldw	r3,-28(fp)
   8090c:	e0bff817 	ldw	r2,-32(fp)
   80910:	18bfe736 	bltu	r3,r2,808b0 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   80914:	e0fff917 	ldw	r3,-28(fp)
   80918:	e0bffc17 	ldw	r2,-16(fp)
   8091c:	18800526 	beq	r3,r2,80934 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   80920:	e0fff917 	ldw	r3,-28(fp)
   80924:	e0bffc17 	ldw	r2,-16(fp)
   80928:	1887c83a 	sub	r3,r3,r2
   8092c:	e0ffff15 	stw	r3,-4(fp)
   80930:	00000906 	br	80958 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   80934:	e0bffe17 	ldw	r2,-8(fp)
   80938:	1090000c 	andi	r2,r2,16384
   8093c:	1005003a 	cmpeq	r2,r2,zero
   80940:	1000031e 	bne	r2,zero,80950 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   80944:	00bffd44 	movi	r2,-11
   80948:	e0bfff15 	stw	r2,-4(fp)
   8094c:	00000206 	br	80958 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   80950:	00bffec4 	movi	r2,-5
   80954:	e0bfff15 	stw	r2,-4(fp)
   80958:	e0bfff17 	ldw	r2,-4(fp)
}
   8095c:	e037883a 	mov	sp,fp
   80960:	df000017 	ldw	fp,0(sp)
   80964:	dec00104 	addi	sp,sp,4
   80968:	f800283a 	ret

0008096c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8096c:	defff904 	addi	sp,sp,-28
   80970:	df000615 	stw	fp,24(sp)
   80974:	df000604 	addi	fp,sp,24
   80978:	e13ffc15 	stw	r4,-16(fp)
   8097c:	e17ffd15 	stw	r5,-12(fp)
   80980:	e1bffe15 	stw	r6,-8(fp)
   80984:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   80988:	e0bffc17 	ldw	r2,-16(fp)
   8098c:	10800017 	ldw	r2,0(r2)
   80990:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   80994:	e0bffe17 	ldw	r2,-8(fp)
   80998:	1007883a 	mov	r3,r2
   8099c:	e0bffd17 	ldw	r2,-12(fp)
   809a0:	10c5883a 	add	r2,r2,r3
   809a4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   809a8:	00001106 	br	809f0 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   809ac:	e0bffb17 	ldw	r2,-20(fp)
   809b0:	10800104 	addi	r2,r2,4
   809b4:	10800037 	ldwio	r2,0(r2)
   809b8:	10bfffec 	andhi	r2,r2,65535
   809bc:	1005003a 	cmpeq	r2,r2,zero
   809c0:	10000b1e 	bne	r2,zero,809f0 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   809c4:	e13ffb17 	ldw	r4,-20(fp)
   809c8:	e0bffd17 	ldw	r2,-12(fp)
   809cc:	10800003 	ldbu	r2,0(r2)
   809d0:	10c03fcc 	andi	r3,r2,255
   809d4:	18c0201c 	xori	r3,r3,128
   809d8:	18ffe004 	addi	r3,r3,-128
   809dc:	e0bffd17 	ldw	r2,-12(fp)
   809e0:	10800044 	addi	r2,r2,1
   809e4:	e0bffd15 	stw	r2,-12(fp)
   809e8:	2005883a 	mov	r2,r4
   809ec:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   809f0:	e0fffd17 	ldw	r3,-12(fp)
   809f4:	e0bffa17 	ldw	r2,-24(fp)
   809f8:	18bfec36 	bltu	r3,r2,809ac <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   809fc:	e0bffe17 	ldw	r2,-8(fp)
}
   80a00:	e037883a 	mov	sp,fp
   80a04:	df000017 	ldw	fp,0(sp)
   80a08:	dec00104 	addi	sp,sp,4
   80a0c:	f800283a 	ret

00080a10 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   80a10:	defffa04 	addi	sp,sp,-24
   80a14:	dfc00515 	stw	ra,20(sp)
   80a18:	df000415 	stw	fp,16(sp)
   80a1c:	df000404 	addi	fp,sp,16
   80a20:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   80a24:	e0bfff17 	ldw	r2,-4(fp)
   80a28:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   80a2c:	e0bfff17 	ldw	r2,-4(fp)
   80a30:	10800104 	addi	r2,r2,4
   80a34:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80a38:	0005303a 	rdctl	r2,status
   80a3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80a40:	e0fffd17 	ldw	r3,-12(fp)
   80a44:	00bfff84 	movi	r2,-2
   80a48:	1884703a 	and	r2,r3,r2
   80a4c:	1001703a 	wrctl	status,r2
  
  return context;
   80a50:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   80a54:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   80a58:	00815bc0 	call	815bc <alt_tick>
   80a5c:	e0bffe17 	ldw	r2,-8(fp)
   80a60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80a64:	e0bffc17 	ldw	r2,-16(fp)
   80a68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   80a6c:	e037883a 	mov	sp,fp
   80a70:	dfc00117 	ldw	ra,4(sp)
   80a74:	df000017 	ldw	fp,0(sp)
   80a78:	dec00204 	addi	sp,sp,8
   80a7c:	f800283a 	ret

00080a80 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   80a80:	defff804 	addi	sp,sp,-32
   80a84:	dfc00715 	stw	ra,28(sp)
   80a88:	df000615 	stw	fp,24(sp)
   80a8c:	df000604 	addi	fp,sp,24
   80a90:	e13ffc15 	stw	r4,-16(fp)
   80a94:	e17ffd15 	stw	r5,-12(fp)
   80a98:	e1bffe15 	stw	r6,-8(fp)
   80a9c:	e1ffff15 	stw	r7,-4(fp)
   80aa0:	e0bfff17 	ldw	r2,-4(fp)
   80aa4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   80aa8:	00800234 	movhi	r2,8
   80aac:	1088a304 	addi	r2,r2,8844
   80ab0:	10800017 	ldw	r2,0(r2)
   80ab4:	1004c03a 	cmpne	r2,r2,zero
   80ab8:	1000041e 	bne	r2,zero,80acc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   80abc:	00c00234 	movhi	r3,8
   80ac0:	18c8a304 	addi	r3,r3,8844
   80ac4:	e0bffb17 	ldw	r2,-20(fp)
   80ac8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   80acc:	e0bffc17 	ldw	r2,-16(fp)
   80ad0:	10800104 	addi	r2,r2,4
   80ad4:	1007883a 	mov	r3,r2
   80ad8:	008001c4 	movi	r2,7
   80adc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   80ae0:	d8000015 	stw	zero,0(sp)
   80ae4:	e13ffd17 	ldw	r4,-12(fp)
   80ae8:	e17ffe17 	ldw	r5,-8(fp)
   80aec:	01800234 	movhi	r6,8
   80af0:	31828404 	addi	r6,r6,2576
   80af4:	e1fffc17 	ldw	r7,-16(fp)
   80af8:	0080df80 	call	80df8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   80afc:	e037883a 	mov	sp,fp
   80b00:	dfc00117 	ldw	ra,4(sp)
   80b04:	df000017 	ldw	fp,0(sp)
   80b08:	dec00204 	addi	sp,sp,8
   80b0c:	f800283a 	ret

00080b10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   80b10:	defff804 	addi	sp,sp,-32
   80b14:	dfc00715 	stw	ra,28(sp)
   80b18:	df000615 	stw	fp,24(sp)
   80b1c:	df000604 	addi	fp,sp,24
   80b20:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   80b24:	e0bffc17 	ldw	r2,-16(fp)
   80b28:	1004803a 	cmplt	r2,r2,zero
   80b2c:	1000081e 	bne	r2,zero,80b50 <close+0x40>
   80b30:	e0bffc17 	ldw	r2,-16(fp)
   80b34:	10800324 	muli	r2,r2,12
   80b38:	1007883a 	mov	r3,r2
   80b3c:	00800234 	movhi	r2,8
   80b40:	10877b04 	addi	r2,r2,7660
   80b44:	1887883a 	add	r3,r3,r2
   80b48:	e0ffff15 	stw	r3,-4(fp)
   80b4c:	00000106 	br	80b54 <close+0x44>
   80b50:	e03fff15 	stw	zero,-4(fp)
   80b54:	e0bfff17 	ldw	r2,-4(fp)
   80b58:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   80b5c:	e0bffb17 	ldw	r2,-20(fp)
   80b60:	1005003a 	cmpeq	r2,r2,zero
   80b64:	10001d1e 	bne	r2,zero,80bdc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   80b68:	e0bffb17 	ldw	r2,-20(fp)
   80b6c:	10800017 	ldw	r2,0(r2)
   80b70:	10800417 	ldw	r2,16(r2)
   80b74:	1005003a 	cmpeq	r2,r2,zero
   80b78:	1000071e 	bne	r2,zero,80b98 <close+0x88>
   80b7c:	e0bffb17 	ldw	r2,-20(fp)
   80b80:	10800017 	ldw	r2,0(r2)
   80b84:	10800417 	ldw	r2,16(r2)
   80b88:	e13ffb17 	ldw	r4,-20(fp)
   80b8c:	103ee83a 	callr	r2
   80b90:	e0bffe15 	stw	r2,-8(fp)
   80b94:	00000106 	br	80b9c <close+0x8c>
   80b98:	e03ffe15 	stw	zero,-8(fp)
   80b9c:	e0bffe17 	ldw	r2,-8(fp)
   80ba0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   80ba4:	e13ffc17 	ldw	r4,-16(fp)
   80ba8:	00814c40 	call	814c4 <alt_release_fd>
    if (rval < 0)
   80bac:	e0bffa17 	ldw	r2,-24(fp)
   80bb0:	1004403a 	cmpge	r2,r2,zero
   80bb4:	1000071e 	bne	r2,zero,80bd4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   80bb8:	0080c0c0 	call	80c0c <alt_get_errno>
   80bbc:	e0fffa17 	ldw	r3,-24(fp)
   80bc0:	00c7c83a 	sub	r3,zero,r3
   80bc4:	10c00015 	stw	r3,0(r2)
      return -1;
   80bc8:	00bfffc4 	movi	r2,-1
   80bcc:	e0bffd15 	stw	r2,-12(fp)
   80bd0:	00000806 	br	80bf4 <close+0xe4>
    }
    return 0;
   80bd4:	e03ffd15 	stw	zero,-12(fp)
   80bd8:	00000606 	br	80bf4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   80bdc:	0080c0c0 	call	80c0c <alt_get_errno>
   80be0:	1007883a 	mov	r3,r2
   80be4:	00801444 	movi	r2,81
   80be8:	18800015 	stw	r2,0(r3)
    return -1;
   80bec:	00bfffc4 	movi	r2,-1
   80bf0:	e0bffd15 	stw	r2,-12(fp)
   80bf4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   80bf8:	e037883a 	mov	sp,fp
   80bfc:	dfc00117 	ldw	ra,4(sp)
   80c00:	df000017 	ldw	fp,0(sp)
   80c04:	dec00204 	addi	sp,sp,8
   80c08:	f800283a 	ret

00080c0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   80c0c:	defffd04 	addi	sp,sp,-12
   80c10:	dfc00215 	stw	ra,8(sp)
   80c14:	df000115 	stw	fp,4(sp)
   80c18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   80c1c:	00800234 	movhi	r2,8
   80c20:	1087e204 	addi	r2,r2,8072
   80c24:	10800017 	ldw	r2,0(r2)
   80c28:	1005003a 	cmpeq	r2,r2,zero
   80c2c:	1000061e 	bne	r2,zero,80c48 <alt_get_errno+0x3c>
   80c30:	00800234 	movhi	r2,8
   80c34:	1087e204 	addi	r2,r2,8072
   80c38:	10800017 	ldw	r2,0(r2)
   80c3c:	103ee83a 	callr	r2
   80c40:	e0bfff15 	stw	r2,-4(fp)
   80c44:	00000306 	br	80c54 <alt_get_errno+0x48>
   80c48:	00800234 	movhi	r2,8
   80c4c:	10889e04 	addi	r2,r2,8824
   80c50:	e0bfff15 	stw	r2,-4(fp)
   80c54:	e0bfff17 	ldw	r2,-4(fp)
}
   80c58:	e037883a 	mov	sp,fp
   80c5c:	dfc00117 	ldw	ra,4(sp)
   80c60:	df000017 	ldw	fp,0(sp)
   80c64:	dec00204 	addi	sp,sp,8
   80c68:	f800283a 	ret

00080c6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   80c6c:	deffff04 	addi	sp,sp,-4
   80c70:	df000015 	stw	fp,0(sp)
   80c74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   80c78:	e037883a 	mov	sp,fp
   80c7c:	df000017 	ldw	fp,0(sp)
   80c80:	dec00104 	addi	sp,sp,4
   80c84:	f800283a 	ret

00080c88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   80c88:	defffc04 	addi	sp,sp,-16
   80c8c:	df000315 	stw	fp,12(sp)
   80c90:	df000304 	addi	fp,sp,12
   80c94:	e13ffd15 	stw	r4,-12(fp)
   80c98:	e17ffe15 	stw	r5,-8(fp)
   80c9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   80ca0:	e0bfff17 	ldw	r2,-4(fp)
}
   80ca4:	e037883a 	mov	sp,fp
   80ca8:	df000017 	ldw	fp,0(sp)
   80cac:	dec00104 	addi	sp,sp,4
   80cb0:	f800283a 	ret

00080cb4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   80cb4:	defff904 	addi	sp,sp,-28
   80cb8:	dfc00615 	stw	ra,24(sp)
   80cbc:	df000515 	stw	fp,20(sp)
   80cc0:	df000504 	addi	fp,sp,20
   80cc4:	e13ffd15 	stw	r4,-12(fp)
   80cc8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   80ccc:	e0bffd17 	ldw	r2,-12(fp)
   80cd0:	1005003a 	cmpeq	r2,r2,zero
   80cd4:	1000041e 	bne	r2,zero,80ce8 <alt_dev_llist_insert+0x34>
   80cd8:	e0bffd17 	ldw	r2,-12(fp)
   80cdc:	10800217 	ldw	r2,8(r2)
   80ce0:	1004c03a 	cmpne	r2,r2,zero
   80ce4:	1000071e 	bne	r2,zero,80d04 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   80ce8:	0080d680 	call	80d68 <alt_get_errno>
   80cec:	1007883a 	mov	r3,r2
   80cf0:	00800584 	movi	r2,22
   80cf4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   80cf8:	00bffa84 	movi	r2,-22
   80cfc:	e0bfff15 	stw	r2,-4(fp)
   80d00:	00001306 	br	80d50 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   80d04:	e0fffd17 	ldw	r3,-12(fp)
   80d08:	e0bffe17 	ldw	r2,-8(fp)
   80d0c:	e0bffb15 	stw	r2,-20(fp)
   80d10:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   80d14:	e0fffc17 	ldw	r3,-16(fp)
   80d18:	e0bffb17 	ldw	r2,-20(fp)
   80d1c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   80d20:	e0bffb17 	ldw	r2,-20(fp)
   80d24:	10c00017 	ldw	r3,0(r2)
   80d28:	e0bffc17 	ldw	r2,-16(fp)
   80d2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   80d30:	e0bffb17 	ldw	r2,-20(fp)
   80d34:	10c00017 	ldw	r3,0(r2)
   80d38:	e0bffc17 	ldw	r2,-16(fp)
   80d3c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   80d40:	e0fffb17 	ldw	r3,-20(fp)
   80d44:	e0bffc17 	ldw	r2,-16(fp)
   80d48:	18800015 	stw	r2,0(r3)

  return 0;  
   80d4c:	e03fff15 	stw	zero,-4(fp)
   80d50:	e0bfff17 	ldw	r2,-4(fp)
}
   80d54:	e037883a 	mov	sp,fp
   80d58:	dfc00117 	ldw	ra,4(sp)
   80d5c:	df000017 	ldw	fp,0(sp)
   80d60:	dec00204 	addi	sp,sp,8
   80d64:	f800283a 	ret

00080d68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   80d68:	defffd04 	addi	sp,sp,-12
   80d6c:	dfc00215 	stw	ra,8(sp)
   80d70:	df000115 	stw	fp,4(sp)
   80d74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   80d78:	00800234 	movhi	r2,8
   80d7c:	1087e204 	addi	r2,r2,8072
   80d80:	10800017 	ldw	r2,0(r2)
   80d84:	1005003a 	cmpeq	r2,r2,zero
   80d88:	1000061e 	bne	r2,zero,80da4 <alt_get_errno+0x3c>
   80d8c:	00800234 	movhi	r2,8
   80d90:	1087e204 	addi	r2,r2,8072
   80d94:	10800017 	ldw	r2,0(r2)
   80d98:	103ee83a 	callr	r2
   80d9c:	e0bfff15 	stw	r2,-4(fp)
   80da0:	00000306 	br	80db0 <alt_get_errno+0x48>
   80da4:	00800234 	movhi	r2,8
   80da8:	10889e04 	addi	r2,r2,8824
   80dac:	e0bfff15 	stw	r2,-4(fp)
   80db0:	e0bfff17 	ldw	r2,-4(fp)
}
   80db4:	e037883a 	mov	sp,fp
   80db8:	dfc00117 	ldw	ra,4(sp)
   80dbc:	df000017 	ldw	fp,0(sp)
   80dc0:	dec00204 	addi	sp,sp,8
   80dc4:	f800283a 	ret

00080dc8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   80dc8:	defffe04 	addi	sp,sp,-8
   80dcc:	dfc00115 	stw	ra,4(sp)
   80dd0:	df000015 	stw	fp,0(sp)
   80dd4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   80dd8:	0009883a 	mov	r4,zero
   80ddc:	01420004 	movi	r5,2048
   80de0:	00819540 	call	81954 <alt_icache_flush>
#endif
}
   80de4:	e037883a 	mov	sp,fp
   80de8:	dfc00117 	ldw	ra,4(sp)
   80dec:	df000017 	ldw	fp,0(sp)
   80df0:	dec00204 	addi	sp,sp,8
   80df4:	f800283a 	ret

00080df8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   80df8:	defff904 	addi	sp,sp,-28
   80dfc:	dfc00615 	stw	ra,24(sp)
   80e00:	df000515 	stw	fp,20(sp)
   80e04:	df000504 	addi	fp,sp,20
   80e08:	e13ffc15 	stw	r4,-16(fp)
   80e0c:	e17ffd15 	stw	r5,-12(fp)
   80e10:	e1bffe15 	stw	r6,-8(fp)
   80e14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   80e18:	e0800217 	ldw	r2,8(fp)
   80e1c:	d8800015 	stw	r2,0(sp)
   80e20:	e13ffc17 	ldw	r4,-16(fp)
   80e24:	e17ffd17 	ldw	r5,-12(fp)
   80e28:	e1bffe17 	ldw	r6,-8(fp)
   80e2c:	e1ffff17 	ldw	r7,-4(fp)
   80e30:	0080fcc0 	call	80fcc <alt_iic_isr_register>
}  
   80e34:	e037883a 	mov	sp,fp
   80e38:	dfc00117 	ldw	ra,4(sp)
   80e3c:	df000017 	ldw	fp,0(sp)
   80e40:	dec00204 	addi	sp,sp,8
   80e44:	f800283a 	ret

00080e48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   80e48:	defff904 	addi	sp,sp,-28
   80e4c:	df000615 	stw	fp,24(sp)
   80e50:	df000604 	addi	fp,sp,24
   80e54:	e13ffe15 	stw	r4,-8(fp)
   80e58:	e17fff15 	stw	r5,-4(fp)
   80e5c:	e0bfff17 	ldw	r2,-4(fp)
   80e60:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80e64:	0005303a 	rdctl	r2,status
   80e68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80e6c:	e0fffb17 	ldw	r3,-20(fp)
   80e70:	00bfff84 	movi	r2,-2
   80e74:	1884703a 	and	r2,r3,r2
   80e78:	1001703a 	wrctl	status,r2
  
  return context;
   80e7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   80e80:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   80e84:	e0fffc17 	ldw	r3,-16(fp)
   80e88:	00800044 	movi	r2,1
   80e8c:	10c4983a 	sll	r2,r2,r3
   80e90:	1007883a 	mov	r3,r2
   80e94:	00800234 	movhi	r2,8
   80e98:	1088a204 	addi	r2,r2,8840
   80e9c:	10800017 	ldw	r2,0(r2)
   80ea0:	1886b03a 	or	r3,r3,r2
   80ea4:	00800234 	movhi	r2,8
   80ea8:	1088a204 	addi	r2,r2,8840
   80eac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   80eb0:	00800234 	movhi	r2,8
   80eb4:	1088a204 	addi	r2,r2,8840
   80eb8:	10800017 	ldw	r2,0(r2)
   80ebc:	100170fa 	wrctl	ienable,r2
   80ec0:	e0bffd17 	ldw	r2,-12(fp)
   80ec4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80ec8:	e0bffa17 	ldw	r2,-24(fp)
   80ecc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   80ed0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   80ed4:	e037883a 	mov	sp,fp
   80ed8:	df000017 	ldw	fp,0(sp)
   80edc:	dec00104 	addi	sp,sp,4
   80ee0:	f800283a 	ret

00080ee4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   80ee4:	defff904 	addi	sp,sp,-28
   80ee8:	df000615 	stw	fp,24(sp)
   80eec:	df000604 	addi	fp,sp,24
   80ef0:	e13ffe15 	stw	r4,-8(fp)
   80ef4:	e17fff15 	stw	r5,-4(fp)
   80ef8:	e0bfff17 	ldw	r2,-4(fp)
   80efc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80f00:	0005303a 	rdctl	r2,status
   80f04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80f08:	e0fffb17 	ldw	r3,-20(fp)
   80f0c:	00bfff84 	movi	r2,-2
   80f10:	1884703a 	and	r2,r3,r2
   80f14:	1001703a 	wrctl	status,r2
  
  return context;
   80f18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   80f1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   80f20:	e0fffc17 	ldw	r3,-16(fp)
   80f24:	00800044 	movi	r2,1
   80f28:	10c4983a 	sll	r2,r2,r3
   80f2c:	0084303a 	nor	r2,zero,r2
   80f30:	1007883a 	mov	r3,r2
   80f34:	00800234 	movhi	r2,8
   80f38:	1088a204 	addi	r2,r2,8840
   80f3c:	10800017 	ldw	r2,0(r2)
   80f40:	1886703a 	and	r3,r3,r2
   80f44:	00800234 	movhi	r2,8
   80f48:	1088a204 	addi	r2,r2,8840
   80f4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   80f50:	00800234 	movhi	r2,8
   80f54:	1088a204 	addi	r2,r2,8840
   80f58:	10800017 	ldw	r2,0(r2)
   80f5c:	100170fa 	wrctl	ienable,r2
   80f60:	e0bffd17 	ldw	r2,-12(fp)
   80f64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80f68:	e0bffa17 	ldw	r2,-24(fp)
   80f6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   80f70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   80f74:	e037883a 	mov	sp,fp
   80f78:	df000017 	ldw	fp,0(sp)
   80f7c:	dec00104 	addi	sp,sp,4
   80f80:	f800283a 	ret

00080f84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   80f84:	defffc04 	addi	sp,sp,-16
   80f88:	df000315 	stw	fp,12(sp)
   80f8c:	df000304 	addi	fp,sp,12
   80f90:	e13ffe15 	stw	r4,-8(fp)
   80f94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   80f98:	000530fa 	rdctl	r2,ienable
   80f9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   80fa0:	e0ffff17 	ldw	r3,-4(fp)
   80fa4:	00800044 	movi	r2,1
   80fa8:	10c4983a 	sll	r2,r2,r3
   80fac:	1007883a 	mov	r3,r2
   80fb0:	e0bffd17 	ldw	r2,-12(fp)
   80fb4:	1884703a 	and	r2,r3,r2
   80fb8:	1004c03a 	cmpne	r2,r2,zero
}
   80fbc:	e037883a 	mov	sp,fp
   80fc0:	df000017 	ldw	fp,0(sp)
   80fc4:	dec00104 	addi	sp,sp,4
   80fc8:	f800283a 	ret

00080fcc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   80fcc:	defff404 	addi	sp,sp,-48
   80fd0:	dfc00b15 	stw	ra,44(sp)
   80fd4:	df000a15 	stw	fp,40(sp)
   80fd8:	df000a04 	addi	fp,sp,40
   80fdc:	e13ffb15 	stw	r4,-20(fp)
   80fe0:	e17ffc15 	stw	r5,-16(fp)
   80fe4:	e1bffd15 	stw	r6,-12(fp)
   80fe8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   80fec:	00bffa84 	movi	r2,-22
   80ff0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   80ff4:	e0bffc17 	ldw	r2,-16(fp)
   80ff8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   80ffc:	e0bff917 	ldw	r2,-28(fp)
   81000:	10800808 	cmpgei	r2,r2,32
   81004:	1000291e 	bne	r2,zero,810ac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81008:	0005303a 	rdctl	r2,status
   8100c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81010:	e0fff717 	ldw	r3,-36(fp)
   81014:	00bfff84 	movi	r2,-2
   81018:	1884703a 	and	r2,r3,r2
   8101c:	1001703a 	wrctl	status,r2
  
  return context;
   81020:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   81024:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   81028:	e0bff917 	ldw	r2,-28(fp)
   8102c:	00c00234 	movhi	r3,8
   81030:	18c8a504 	addi	r3,r3,8852
   81034:	100490fa 	slli	r2,r2,3
   81038:	10c7883a 	add	r3,r2,r3
   8103c:	e0bffd17 	ldw	r2,-12(fp)
   81040:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   81044:	e0bff917 	ldw	r2,-28(fp)
   81048:	00c00234 	movhi	r3,8
   8104c:	18c8a504 	addi	r3,r3,8852
   81050:	100490fa 	slli	r2,r2,3
   81054:	10c5883a 	add	r2,r2,r3
   81058:	10c00104 	addi	r3,r2,4
   8105c:	e0bffe17 	ldw	r2,-8(fp)
   81060:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   81064:	e0bffd17 	ldw	r2,-12(fp)
   81068:	1005003a 	cmpeq	r2,r2,zero
   8106c:	1000051e 	bne	r2,zero,81084 <alt_iic_isr_register+0xb8>
   81070:	e17ff917 	ldw	r5,-28(fp)
   81074:	e13ffb17 	ldw	r4,-20(fp)
   81078:	0080e480 	call	80e48 <alt_ic_irq_enable>
   8107c:	e0bfff15 	stw	r2,-4(fp)
   81080:	00000406 	br	81094 <alt_iic_isr_register+0xc8>
   81084:	e17ff917 	ldw	r5,-28(fp)
   81088:	e13ffb17 	ldw	r4,-20(fp)
   8108c:	0080ee40 	call	80ee4 <alt_ic_irq_disable>
   81090:	e0bfff15 	stw	r2,-4(fp)
   81094:	e0bfff17 	ldw	r2,-4(fp)
   81098:	e0bffa15 	stw	r2,-24(fp)
   8109c:	e0bff817 	ldw	r2,-32(fp)
   810a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   810a4:	e0bff617 	ldw	r2,-40(fp)
   810a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   810ac:	e0bffa17 	ldw	r2,-24(fp)
}
   810b0:	e037883a 	mov	sp,fp
   810b4:	dfc00117 	ldw	ra,4(sp)
   810b8:	df000017 	ldw	fp,0(sp)
   810bc:	dec00204 	addi	sp,sp,8
   810c0:	f800283a 	ret

000810c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   810c4:	defff904 	addi	sp,sp,-28
   810c8:	dfc00615 	stw	ra,24(sp)
   810cc:	df000515 	stw	fp,20(sp)
   810d0:	df000504 	addi	fp,sp,20
   810d4:	e13ffc15 	stw	r4,-16(fp)
   810d8:	e17ffd15 	stw	r5,-12(fp)
   810dc:	e1bffe15 	stw	r6,-8(fp)
   810e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   810e4:	e13ffd17 	ldw	r4,-12(fp)
   810e8:	e17ffe17 	ldw	r5,-8(fp)
   810ec:	e1bfff17 	ldw	r6,-4(fp)
   810f0:	00812dc0 	call	812dc <open>
   810f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   810f8:	e0bffb17 	ldw	r2,-20(fp)
   810fc:	1004803a 	cmplt	r2,r2,zero
   81100:	10001c1e 	bne	r2,zero,81174 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   81104:	e0bffb17 	ldw	r2,-20(fp)
   81108:	00c00234 	movhi	r3,8
   8110c:	18c77b04 	addi	r3,r3,7660
   81110:	10800324 	muli	r2,r2,12
   81114:	10c5883a 	add	r2,r2,r3
   81118:	10c00017 	ldw	r3,0(r2)
   8111c:	e0bffc17 	ldw	r2,-16(fp)
   81120:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   81124:	e0bffb17 	ldw	r2,-20(fp)
   81128:	00c00234 	movhi	r3,8
   8112c:	18c77b04 	addi	r3,r3,7660
   81130:	10800324 	muli	r2,r2,12
   81134:	10c5883a 	add	r2,r2,r3
   81138:	10800104 	addi	r2,r2,4
   8113c:	10c00017 	ldw	r3,0(r2)
   81140:	e0bffc17 	ldw	r2,-16(fp)
   81144:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   81148:	e0bffb17 	ldw	r2,-20(fp)
   8114c:	00c00234 	movhi	r3,8
   81150:	18c77b04 	addi	r3,r3,7660
   81154:	10800324 	muli	r2,r2,12
   81158:	10c5883a 	add	r2,r2,r3
   8115c:	10800204 	addi	r2,r2,8
   81160:	10c00017 	ldw	r3,0(r2)
   81164:	e0bffc17 	ldw	r2,-16(fp)
   81168:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8116c:	e13ffb17 	ldw	r4,-20(fp)
   81170:	00814c40 	call	814c4 <alt_release_fd>
  }
} 
   81174:	e037883a 	mov	sp,fp
   81178:	dfc00117 	ldw	ra,4(sp)
   8117c:	df000017 	ldw	fp,0(sp)
   81180:	dec00204 	addi	sp,sp,8
   81184:	f800283a 	ret

00081188 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   81188:	defffb04 	addi	sp,sp,-20
   8118c:	dfc00415 	stw	ra,16(sp)
   81190:	df000315 	stw	fp,12(sp)
   81194:	df000304 	addi	fp,sp,12
   81198:	e13ffd15 	stw	r4,-12(fp)
   8119c:	e17ffe15 	stw	r5,-8(fp)
   811a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   811a4:	01000234 	movhi	r4,8
   811a8:	21077e04 	addi	r4,r4,7672
   811ac:	e17ffd17 	ldw	r5,-12(fp)
   811b0:	01800044 	movi	r6,1
   811b4:	01c07fc4 	movi	r7,511
   811b8:	00810c40 	call	810c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   811bc:	01000234 	movhi	r4,8
   811c0:	21077b04 	addi	r4,r4,7660
   811c4:	e17ffe17 	ldw	r5,-8(fp)
   811c8:	000d883a 	mov	r6,zero
   811cc:	01c07fc4 	movi	r7,511
   811d0:	00810c40 	call	810c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   811d4:	01000234 	movhi	r4,8
   811d8:	21078104 	addi	r4,r4,7684
   811dc:	e17fff17 	ldw	r5,-4(fp)
   811e0:	01800044 	movi	r6,1
   811e4:	01c07fc4 	movi	r7,511
   811e8:	00810c40 	call	810c4 <alt_open_fd>
}  
   811ec:	e037883a 	mov	sp,fp
   811f0:	dfc00117 	ldw	ra,4(sp)
   811f4:	df000017 	ldw	fp,0(sp)
   811f8:	dec00204 	addi	sp,sp,8
   811fc:	f800283a 	ret

00081200 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   81200:	defffc04 	addi	sp,sp,-16
   81204:	df000315 	stw	fp,12(sp)
   81208:	df000304 	addi	fp,sp,12
   8120c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   81210:	e0bffe17 	ldw	r2,-8(fp)
   81214:	10800217 	ldw	r2,8(r2)
   81218:	10d00034 	orhi	r3,r2,16384
   8121c:	e0bffe17 	ldw	r2,-8(fp)
   81220:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81224:	e03ffd15 	stw	zero,-12(fp)
   81228:	00002006 	br	812ac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8122c:	e0bffd17 	ldw	r2,-12(fp)
   81230:	00c00234 	movhi	r3,8
   81234:	18c77b04 	addi	r3,r3,7660
   81238:	10800324 	muli	r2,r2,12
   8123c:	10c5883a 	add	r2,r2,r3
   81240:	10c00017 	ldw	r3,0(r2)
   81244:	e0bffe17 	ldw	r2,-8(fp)
   81248:	10800017 	ldw	r2,0(r2)
   8124c:	1880141e 	bne	r3,r2,812a0 <alt_file_locked+0xa0>
   81250:	e0bffd17 	ldw	r2,-12(fp)
   81254:	00c00234 	movhi	r3,8
   81258:	18c77b04 	addi	r3,r3,7660
   8125c:	10800324 	muli	r2,r2,12
   81260:	10c5883a 	add	r2,r2,r3
   81264:	10800204 	addi	r2,r2,8
   81268:	10800017 	ldw	r2,0(r2)
   8126c:	1004403a 	cmpge	r2,r2,zero
   81270:	10000b1e 	bne	r2,zero,812a0 <alt_file_locked+0xa0>
   81274:	e0bffd17 	ldw	r2,-12(fp)
   81278:	10800324 	muli	r2,r2,12
   8127c:	1007883a 	mov	r3,r2
   81280:	00800234 	movhi	r2,8
   81284:	10877b04 	addi	r2,r2,7660
   81288:	1887883a 	add	r3,r3,r2
   8128c:	e0bffe17 	ldw	r2,-8(fp)
   81290:	18800326 	beq	r3,r2,812a0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   81294:	00bffcc4 	movi	r2,-13
   81298:	e0bfff15 	stw	r2,-4(fp)
   8129c:	00000a06 	br	812c8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   812a0:	e0bffd17 	ldw	r2,-12(fp)
   812a4:	10800044 	addi	r2,r2,1
   812a8:	e0bffd15 	stw	r2,-12(fp)
   812ac:	00800234 	movhi	r2,8
   812b0:	1087e104 	addi	r2,r2,8068
   812b4:	10800017 	ldw	r2,0(r2)
   812b8:	1007883a 	mov	r3,r2
   812bc:	e0bffd17 	ldw	r2,-12(fp)
   812c0:	18bfda2e 	bgeu	r3,r2,8122c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   812c4:	e03fff15 	stw	zero,-4(fp)
   812c8:	e0bfff17 	ldw	r2,-4(fp)
}
   812cc:	e037883a 	mov	sp,fp
   812d0:	df000017 	ldw	fp,0(sp)
   812d4:	dec00104 	addi	sp,sp,4
   812d8:	f800283a 	ret

000812dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   812dc:	defff404 	addi	sp,sp,-48
   812e0:	dfc00b15 	stw	ra,44(sp)
   812e4:	df000a15 	stw	fp,40(sp)
   812e8:	df000a04 	addi	fp,sp,40
   812ec:	e13ffb15 	stw	r4,-20(fp)
   812f0:	e17ffc15 	stw	r5,-16(fp)
   812f4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   812f8:	00bfffc4 	movi	r2,-1
   812fc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   81300:	00bffb44 	movi	r2,-19
   81304:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   81308:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8130c:	e13ffb17 	ldw	r4,-20(fp)
   81310:	01400234 	movhi	r5,8
   81314:	2947df04 	addi	r5,r5,8060
   81318:	00816e80 	call	816e8 <alt_find_dev>
   8131c:	e0bffa15 	stw	r2,-24(fp)
   81320:	e0bffa17 	ldw	r2,-24(fp)
   81324:	1004c03a 	cmpne	r2,r2,zero
   81328:	1000051e 	bne	r2,zero,81340 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8132c:	e13ffb17 	ldw	r4,-20(fp)
   81330:	008177c0 	call	8177c <alt_find_file>
   81334:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   81338:	00800044 	movi	r2,1
   8133c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   81340:	e0bffa17 	ldw	r2,-24(fp)
   81344:	1005003a 	cmpeq	r2,r2,zero
   81348:	1000301e 	bne	r2,zero,8140c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8134c:	e13ffa17 	ldw	r4,-24(fp)
   81350:	008189c0 	call	8189c <alt_get_fd>
   81354:	e0bff815 	stw	r2,-32(fp)
   81358:	e0bff817 	ldw	r2,-32(fp)
   8135c:	1004403a 	cmpge	r2,r2,zero
   81360:	1000031e 	bne	r2,zero,81370 <open+0x94>
    {
      status = index;
   81364:	e0bff817 	ldw	r2,-32(fp)
   81368:	e0bff715 	stw	r2,-36(fp)
   8136c:	00002906 	br	81414 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   81370:	e0bff817 	ldw	r2,-32(fp)
   81374:	10800324 	muli	r2,r2,12
   81378:	1007883a 	mov	r3,r2
   8137c:	00800234 	movhi	r2,8
   81380:	10877b04 	addi	r2,r2,7660
   81384:	1885883a 	add	r2,r3,r2
   81388:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8138c:	e0fffc17 	ldw	r3,-16(fp)
   81390:	00900034 	movhi	r2,16384
   81394:	10bfffc4 	addi	r2,r2,-1
   81398:	1886703a 	and	r3,r3,r2
   8139c:	e0bff917 	ldw	r2,-28(fp)
   813a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   813a4:	e0bff617 	ldw	r2,-40(fp)
   813a8:	1004c03a 	cmpne	r2,r2,zero
   813ac:	1000061e 	bne	r2,zero,813c8 <open+0xec>
   813b0:	e13ff917 	ldw	r4,-28(fp)
   813b4:	00812000 	call	81200 <alt_file_locked>
   813b8:	e0bff715 	stw	r2,-36(fp)
   813bc:	e0bff717 	ldw	r2,-36(fp)
   813c0:	1004803a 	cmplt	r2,r2,zero
   813c4:	1000131e 	bne	r2,zero,81414 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   813c8:	e0bffa17 	ldw	r2,-24(fp)
   813cc:	10800317 	ldw	r2,12(r2)
   813d0:	1005003a 	cmpeq	r2,r2,zero
   813d4:	1000091e 	bne	r2,zero,813fc <open+0x120>
   813d8:	e0bffa17 	ldw	r2,-24(fp)
   813dc:	10800317 	ldw	r2,12(r2)
   813e0:	e13ff917 	ldw	r4,-28(fp)
   813e4:	e17ffb17 	ldw	r5,-20(fp)
   813e8:	e1bffc17 	ldw	r6,-16(fp)
   813ec:	e1fffd17 	ldw	r7,-12(fp)
   813f0:	103ee83a 	callr	r2
   813f4:	e0bfff15 	stw	r2,-4(fp)
   813f8:	00000106 	br	81400 <open+0x124>
   813fc:	e03fff15 	stw	zero,-4(fp)
   81400:	e0bfff17 	ldw	r2,-4(fp)
   81404:	e0bff715 	stw	r2,-36(fp)
   81408:	00000206 	br	81414 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8140c:	00bffb44 	movi	r2,-19
   81410:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   81414:	e0bff717 	ldw	r2,-36(fp)
   81418:	1004403a 	cmpge	r2,r2,zero
   8141c:	1000091e 	bne	r2,zero,81444 <open+0x168>
  {
    alt_release_fd (index);  
   81420:	e13ff817 	ldw	r4,-32(fp)
   81424:	00814c40 	call	814c4 <alt_release_fd>
    ALT_ERRNO = -status;
   81428:	00814640 	call	81464 <alt_get_errno>
   8142c:	e0fff717 	ldw	r3,-36(fp)
   81430:	00c7c83a 	sub	r3,zero,r3
   81434:	10c00015 	stw	r3,0(r2)
    return -1;
   81438:	00bfffc4 	movi	r2,-1
   8143c:	e0bffe15 	stw	r2,-8(fp)
   81440:	00000206 	br	8144c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   81444:	e0bff817 	ldw	r2,-32(fp)
   81448:	e0bffe15 	stw	r2,-8(fp)
   8144c:	e0bffe17 	ldw	r2,-8(fp)
}
   81450:	e037883a 	mov	sp,fp
   81454:	dfc00117 	ldw	ra,4(sp)
   81458:	df000017 	ldw	fp,0(sp)
   8145c:	dec00204 	addi	sp,sp,8
   81460:	f800283a 	ret

00081464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81464:	defffd04 	addi	sp,sp,-12
   81468:	dfc00215 	stw	ra,8(sp)
   8146c:	df000115 	stw	fp,4(sp)
   81470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   81474:	00800234 	movhi	r2,8
   81478:	1087e204 	addi	r2,r2,8072
   8147c:	10800017 	ldw	r2,0(r2)
   81480:	1005003a 	cmpeq	r2,r2,zero
   81484:	1000061e 	bne	r2,zero,814a0 <alt_get_errno+0x3c>
   81488:	00800234 	movhi	r2,8
   8148c:	1087e204 	addi	r2,r2,8072
   81490:	10800017 	ldw	r2,0(r2)
   81494:	103ee83a 	callr	r2
   81498:	e0bfff15 	stw	r2,-4(fp)
   8149c:	00000306 	br	814ac <alt_get_errno+0x48>
   814a0:	00800234 	movhi	r2,8
   814a4:	10889e04 	addi	r2,r2,8824
   814a8:	e0bfff15 	stw	r2,-4(fp)
   814ac:	e0bfff17 	ldw	r2,-4(fp)
}
   814b0:	e037883a 	mov	sp,fp
   814b4:	dfc00117 	ldw	ra,4(sp)
   814b8:	df000017 	ldw	fp,0(sp)
   814bc:	dec00204 	addi	sp,sp,8
   814c0:	f800283a 	ret

000814c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   814c4:	defffe04 	addi	sp,sp,-8
   814c8:	df000115 	stw	fp,4(sp)
   814cc:	df000104 	addi	fp,sp,4
   814d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   814d4:	e0bfff17 	ldw	r2,-4(fp)
   814d8:	108000d0 	cmplti	r2,r2,3
   814dc:	10000d1e 	bne	r2,zero,81514 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   814e0:	e0bfff17 	ldw	r2,-4(fp)
   814e4:	00c00234 	movhi	r3,8
   814e8:	18c77b04 	addi	r3,r3,7660
   814ec:	10800324 	muli	r2,r2,12
   814f0:	10c5883a 	add	r2,r2,r3
   814f4:	10800204 	addi	r2,r2,8
   814f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   814fc:	e0bfff17 	ldw	r2,-4(fp)
   81500:	00c00234 	movhi	r3,8
   81504:	18c77b04 	addi	r3,r3,7660
   81508:	10800324 	muli	r2,r2,12
   8150c:	10c5883a 	add	r2,r2,r3
   81510:	10000015 	stw	zero,0(r2)
  }
}
   81514:	e037883a 	mov	sp,fp
   81518:	df000017 	ldw	fp,0(sp)
   8151c:	dec00104 	addi	sp,sp,4
   81520:	f800283a 	ret

00081524 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   81524:	defffa04 	addi	sp,sp,-24
   81528:	df000515 	stw	fp,20(sp)
   8152c:	df000504 	addi	fp,sp,20
   81530:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81534:	0005303a 	rdctl	r2,status
   81538:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8153c:	e0fffd17 	ldw	r3,-12(fp)
   81540:	00bfff84 	movi	r2,-2
   81544:	1884703a 	and	r2,r3,r2
   81548:	1001703a 	wrctl	status,r2
  
  return context;
   8154c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   81550:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   81554:	e0bfff17 	ldw	r2,-4(fp)
   81558:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8155c:	e0bffc17 	ldw	r2,-16(fp)
   81560:	10c00017 	ldw	r3,0(r2)
   81564:	e0bffc17 	ldw	r2,-16(fp)
   81568:	10800117 	ldw	r2,4(r2)
   8156c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   81570:	e0bffc17 	ldw	r2,-16(fp)
   81574:	10c00117 	ldw	r3,4(r2)
   81578:	e0bffc17 	ldw	r2,-16(fp)
   8157c:	10800017 	ldw	r2,0(r2)
   81580:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   81584:	e0fffc17 	ldw	r3,-16(fp)
   81588:	e0bffc17 	ldw	r2,-16(fp)
   8158c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   81590:	e0fffc17 	ldw	r3,-16(fp)
   81594:	e0bffc17 	ldw	r2,-16(fp)
   81598:	18800015 	stw	r2,0(r3)
   8159c:	e0bffe17 	ldw	r2,-8(fp)
   815a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   815a4:	e0bffb17 	ldw	r2,-20(fp)
   815a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   815ac:	e037883a 	mov	sp,fp
   815b0:	df000017 	ldw	fp,0(sp)
   815b4:	dec00104 	addi	sp,sp,4
   815b8:	f800283a 	ret

000815bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   815bc:	defffb04 	addi	sp,sp,-20
   815c0:	dfc00415 	stw	ra,16(sp)
   815c4:	df000315 	stw	fp,12(sp)
   815c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   815cc:	d0a00917 	ldw	r2,-32732(gp)
   815d0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   815d4:	d0a0c917 	ldw	r2,-31964(gp)
   815d8:	10800044 	addi	r2,r2,1
   815dc:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   815e0:	00003106 	br	816a8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   815e4:	e0bffe17 	ldw	r2,-8(fp)
   815e8:	10800017 	ldw	r2,0(r2)
   815ec:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   815f0:	e0bffe17 	ldw	r2,-8(fp)
   815f4:	10800403 	ldbu	r2,16(r2)
   815f8:	10803fcc 	andi	r2,r2,255
   815fc:	1005003a 	cmpeq	r2,r2,zero
   81600:	1000051e 	bne	r2,zero,81618 <alt_tick+0x5c>
   81604:	d0a0c917 	ldw	r2,-31964(gp)
   81608:	1004c03a 	cmpne	r2,r2,zero
   8160c:	1000021e 	bne	r2,zero,81618 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   81610:	e0bffe17 	ldw	r2,-8(fp)
   81614:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   81618:	e0bffe17 	ldw	r2,-8(fp)
   8161c:	10c00217 	ldw	r3,8(r2)
   81620:	d0a0c917 	ldw	r2,-31964(gp)
   81624:	10c01e36 	bltu	r2,r3,816a0 <alt_tick+0xe4>
   81628:	e0bffe17 	ldw	r2,-8(fp)
   8162c:	10800403 	ldbu	r2,16(r2)
   81630:	10803fcc 	andi	r2,r2,255
   81634:	1004c03a 	cmpne	r2,r2,zero
   81638:	1000191e 	bne	r2,zero,816a0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8163c:	e0bffe17 	ldw	r2,-8(fp)
   81640:	10c00317 	ldw	r3,12(r2)
   81644:	e0bffe17 	ldw	r2,-8(fp)
   81648:	11000517 	ldw	r4,20(r2)
   8164c:	183ee83a 	callr	r3
   81650:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   81654:	e0bffd17 	ldw	r2,-12(fp)
   81658:	1004c03a 	cmpne	r2,r2,zero
   8165c:	1000031e 	bne	r2,zero,8166c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   81660:	e13ffe17 	ldw	r4,-8(fp)
   81664:	00815240 	call	81524 <alt_alarm_stop>
   81668:	00000d06 	br	816a0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8166c:	e0bffe17 	ldw	r2,-8(fp)
   81670:	10c00217 	ldw	r3,8(r2)
   81674:	e0bffd17 	ldw	r2,-12(fp)
   81678:	1887883a 	add	r3,r3,r2
   8167c:	e0bffe17 	ldw	r2,-8(fp)
   81680:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   81684:	e0bffe17 	ldw	r2,-8(fp)
   81688:	10c00217 	ldw	r3,8(r2)
   8168c:	d0a0c917 	ldw	r2,-31964(gp)
   81690:	1880032e 	bgeu	r3,r2,816a0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   81694:	e0fffe17 	ldw	r3,-8(fp)
   81698:	00800044 	movi	r2,1
   8169c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   816a0:	e0bfff17 	ldw	r2,-4(fp)
   816a4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   816a8:	d0e00904 	addi	r3,gp,-32732
   816ac:	e0bffe17 	ldw	r2,-8(fp)
   816b0:	10ffcc1e 	bne	r2,r3,815e4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   816b4:	e037883a 	mov	sp,fp
   816b8:	dfc00117 	ldw	ra,4(sp)
   816bc:	df000017 	ldw	fp,0(sp)
   816c0:	dec00204 	addi	sp,sp,8
   816c4:	f800283a 	ret

000816c8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   816c8:	deffff04 	addi	sp,sp,-4
   816cc:	df000015 	stw	fp,0(sp)
   816d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   816d4:	000170fa 	wrctl	ienable,zero
}
   816d8:	e037883a 	mov	sp,fp
   816dc:	df000017 	ldw	fp,0(sp)
   816e0:	dec00104 	addi	sp,sp,4
   816e4:	f800283a 	ret

000816e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   816e8:	defff904 	addi	sp,sp,-28
   816ec:	dfc00615 	stw	ra,24(sp)
   816f0:	df000515 	stw	fp,20(sp)
   816f4:	df000504 	addi	fp,sp,20
   816f8:	e13ffd15 	stw	r4,-12(fp)
   816fc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   81700:	e0bffe17 	ldw	r2,-8(fp)
   81704:	10800017 	ldw	r2,0(r2)
   81708:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8170c:	e13ffd17 	ldw	r4,-12(fp)
   81710:	00802ec0 	call	802ec <strlen>
   81714:	10800044 	addi	r2,r2,1
   81718:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8171c:	00000d06 	br	81754 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   81720:	e0bffc17 	ldw	r2,-16(fp)
   81724:	11000217 	ldw	r4,8(r2)
   81728:	e1bffb17 	ldw	r6,-20(fp)
   8172c:	e17ffd17 	ldw	r5,-12(fp)
   81730:	0081a040 	call	81a04 <memcmp>
   81734:	1004c03a 	cmpne	r2,r2,zero
   81738:	1000031e 	bne	r2,zero,81748 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8173c:	e0bffc17 	ldw	r2,-16(fp)
   81740:	e0bfff15 	stw	r2,-4(fp)
   81744:	00000706 	br	81764 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   81748:	e0bffc17 	ldw	r2,-16(fp)
   8174c:	10800017 	ldw	r2,0(r2)
   81750:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81754:	e0fffe17 	ldw	r3,-8(fp)
   81758:	e0bffc17 	ldw	r2,-16(fp)
   8175c:	10fff01e 	bne	r2,r3,81720 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   81760:	e03fff15 	stw	zero,-4(fp)
   81764:	e0bfff17 	ldw	r2,-4(fp)
}
   81768:	e037883a 	mov	sp,fp
   8176c:	dfc00117 	ldw	ra,4(sp)
   81770:	df000017 	ldw	fp,0(sp)
   81774:	dec00204 	addi	sp,sp,8
   81778:	f800283a 	ret

0008177c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8177c:	defffa04 	addi	sp,sp,-24
   81780:	dfc00515 	stw	ra,20(sp)
   81784:	df000415 	stw	fp,16(sp)
   81788:	df000404 	addi	fp,sp,16
   8178c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   81790:	00800234 	movhi	r2,8
   81794:	1087dd04 	addi	r2,r2,8052
   81798:	10800017 	ldw	r2,0(r2)
   8179c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   817a0:	00003306 	br	81870 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   817a4:	e0bffd17 	ldw	r2,-12(fp)
   817a8:	11000217 	ldw	r4,8(r2)
   817ac:	00802ec0 	call	802ec <strlen>
   817b0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   817b4:	e0bffd17 	ldw	r2,-12(fp)
   817b8:	10c00217 	ldw	r3,8(r2)
   817bc:	e0bffc17 	ldw	r2,-16(fp)
   817c0:	1885883a 	add	r2,r3,r2
   817c4:	10bfffc4 	addi	r2,r2,-1
   817c8:	10800003 	ldbu	r2,0(r2)
   817cc:	10803fcc 	andi	r2,r2,255
   817d0:	1080201c 	xori	r2,r2,128
   817d4:	10bfe004 	addi	r2,r2,-128
   817d8:	10800bd8 	cmpnei	r2,r2,47
   817dc:	1000031e 	bne	r2,zero,817ec <alt_find_file+0x70>
    {
      len -= 1;
   817e0:	e0bffc17 	ldw	r2,-16(fp)
   817e4:	10bfffc4 	addi	r2,r2,-1
   817e8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   817ec:	e0bffc17 	ldw	r2,-16(fp)
   817f0:	1007883a 	mov	r3,r2
   817f4:	e0bffe17 	ldw	r2,-8(fp)
   817f8:	1885883a 	add	r2,r3,r2
   817fc:	10800003 	ldbu	r2,0(r2)
   81800:	10803fcc 	andi	r2,r2,255
   81804:	1080201c 	xori	r2,r2,128
   81808:	10bfe004 	addi	r2,r2,-128
   8180c:	10800be0 	cmpeqi	r2,r2,47
   81810:	10000a1e 	bne	r2,zero,8183c <alt_find_file+0xc0>
   81814:	e0bffc17 	ldw	r2,-16(fp)
   81818:	1007883a 	mov	r3,r2
   8181c:	e0bffe17 	ldw	r2,-8(fp)
   81820:	1885883a 	add	r2,r3,r2
   81824:	10800003 	ldbu	r2,0(r2)
   81828:	10803fcc 	andi	r2,r2,255
   8182c:	1080201c 	xori	r2,r2,128
   81830:	10bfe004 	addi	r2,r2,-128
   81834:	1004c03a 	cmpne	r2,r2,zero
   81838:	10000a1e 	bne	r2,zero,81864 <alt_find_file+0xe8>
   8183c:	e0bffd17 	ldw	r2,-12(fp)
   81840:	11000217 	ldw	r4,8(r2)
   81844:	e1bffc17 	ldw	r6,-16(fp)
   81848:	e17ffe17 	ldw	r5,-8(fp)
   8184c:	0081a040 	call	81a04 <memcmp>
   81850:	1004c03a 	cmpne	r2,r2,zero
   81854:	1000031e 	bne	r2,zero,81864 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   81858:	e0bffd17 	ldw	r2,-12(fp)
   8185c:	e0bfff15 	stw	r2,-4(fp)
   81860:	00000806 	br	81884 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   81864:	e0bffd17 	ldw	r2,-12(fp)
   81868:	10800017 	ldw	r2,0(r2)
   8186c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81870:	00c00234 	movhi	r3,8
   81874:	18c7dd04 	addi	r3,r3,8052
   81878:	e0bffd17 	ldw	r2,-12(fp)
   8187c:	10ffc91e 	bne	r2,r3,817a4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   81880:	e03fff15 	stw	zero,-4(fp)
   81884:	e0bfff17 	ldw	r2,-4(fp)
}
   81888:	e037883a 	mov	sp,fp
   8188c:	dfc00117 	ldw	ra,4(sp)
   81890:	df000017 	ldw	fp,0(sp)
   81894:	dec00204 	addi	sp,sp,8
   81898:	f800283a 	ret

0008189c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8189c:	defffc04 	addi	sp,sp,-16
   818a0:	df000315 	stw	fp,12(sp)
   818a4:	df000304 	addi	fp,sp,12
   818a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   818ac:	00bffa04 	movi	r2,-24
   818b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   818b4:	e03ffe15 	stw	zero,-8(fp)
   818b8:	00001e06 	br	81934 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   818bc:	e0bffe17 	ldw	r2,-8(fp)
   818c0:	00c00234 	movhi	r3,8
   818c4:	18c77b04 	addi	r3,r3,7660
   818c8:	10800324 	muli	r2,r2,12
   818cc:	10c5883a 	add	r2,r2,r3
   818d0:	10800017 	ldw	r2,0(r2)
   818d4:	1004c03a 	cmpne	r2,r2,zero
   818d8:	1000131e 	bne	r2,zero,81928 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   818dc:	e0bffe17 	ldw	r2,-8(fp)
   818e0:	00c00234 	movhi	r3,8
   818e4:	18c77b04 	addi	r3,r3,7660
   818e8:	10800324 	muli	r2,r2,12
   818ec:	10c7883a 	add	r3,r2,r3
   818f0:	e0bfff17 	ldw	r2,-4(fp)
   818f4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   818f8:	00800234 	movhi	r2,8
   818fc:	1087e104 	addi	r2,r2,8068
   81900:	10c00017 	ldw	r3,0(r2)
   81904:	e0bffe17 	ldw	r2,-8(fp)
   81908:	1880040e 	bge	r3,r2,8191c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   8190c:	00c00234 	movhi	r3,8
   81910:	18c7e104 	addi	r3,r3,8068
   81914:	e0bffe17 	ldw	r2,-8(fp)
   81918:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8191c:	e0bffe17 	ldw	r2,-8(fp)
   81920:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   81924:	00000606 	br	81940 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81928:	e0bffe17 	ldw	r2,-8(fp)
   8192c:	10800044 	addi	r2,r2,1
   81930:	e0bffe15 	stw	r2,-8(fp)
   81934:	e0bffe17 	ldw	r2,-8(fp)
   81938:	10800810 	cmplti	r2,r2,32
   8193c:	103fdf1e 	bne	r2,zero,818bc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   81940:	e0bffd17 	ldw	r2,-12(fp)
}
   81944:	e037883a 	mov	sp,fp
   81948:	df000017 	ldw	fp,0(sp)
   8194c:	dec00104 	addi	sp,sp,4
   81950:	f800283a 	ret

00081954 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   81954:	defffb04 	addi	sp,sp,-20
   81958:	df000415 	stw	fp,16(sp)
   8195c:	df000404 	addi	fp,sp,16
   81960:	e13ffe15 	stw	r4,-8(fp)
   81964:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   81968:	e0bfff17 	ldw	r2,-4(fp)
   8196c:	10820070 	cmpltui	r2,r2,2049
   81970:	1000021e 	bne	r2,zero,8197c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   81974:	00820004 	movi	r2,2048
   81978:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   8197c:	e0fffe17 	ldw	r3,-8(fp)
   81980:	e0bfff17 	ldw	r2,-4(fp)
   81984:	1885883a 	add	r2,r3,r2
   81988:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8198c:	e0bffe17 	ldw	r2,-8(fp)
   81990:	e0bffd15 	stw	r2,-12(fp)
   81994:	00000506 	br	819ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   81998:	e0bffd17 	ldw	r2,-12(fp)
   8199c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   819a0:	e0bffd17 	ldw	r2,-12(fp)
   819a4:	10800804 	addi	r2,r2,32
   819a8:	e0bffd15 	stw	r2,-12(fp)
   819ac:	e0fffd17 	ldw	r3,-12(fp)
   819b0:	e0bffc17 	ldw	r2,-16(fp)
   819b4:	18bff836 	bltu	r3,r2,81998 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   819b8:	e0bffe17 	ldw	r2,-8(fp)
   819bc:	108007cc 	andi	r2,r2,31
   819c0:	1005003a 	cmpeq	r2,r2,zero
   819c4:	1000021e 	bne	r2,zero,819d0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   819c8:	e0bffd17 	ldw	r2,-12(fp)
   819cc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   819d0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   819d4:	e037883a 	mov	sp,fp
   819d8:	df000017 	ldw	fp,0(sp)
   819dc:	dec00104 	addi	sp,sp,4
   819e0:	f800283a 	ret

000819e4 <exit>:
   819e4:	defffe04 	addi	sp,sp,-8
   819e8:	dc400015 	stw	r17,0(sp)
   819ec:	000b883a 	mov	r5,zero
   819f0:	2023883a 	mov	r17,r4
   819f4:	dfc00115 	stw	ra,4(sp)
   819f8:	0081a440 	call	81a44 <__call_exitprocs>
   819fc:	8809883a 	mov	r4,r17
   81a00:	0081c400 	call	81c40 <_exit>

00081a04 <memcmp>:
   81a04:	31ffffc4 	addi	r7,r6,-1
   81a08:	3000061e 	bne	r6,zero,81a24 <memcmp+0x20>
   81a0c:	00000a06 	br	81a38 <memcmp+0x34>
   81a10:	39ffffc4 	addi	r7,r7,-1
   81a14:	00bfffc4 	movi	r2,-1
   81a18:	21000044 	addi	r4,r4,1
   81a1c:	29400044 	addi	r5,r5,1
   81a20:	38800526 	beq	r7,r2,81a38 <memcmp+0x34>
   81a24:	20c00003 	ldbu	r3,0(r4)
   81a28:	28800003 	ldbu	r2,0(r5)
   81a2c:	18bff826 	beq	r3,r2,81a10 <memcmp+0xc>
   81a30:	1885c83a 	sub	r2,r3,r2
   81a34:	f800283a 	ret
   81a38:	0005883a 	mov	r2,zero
   81a3c:	f800283a 	ret

00081a40 <register_fini>:
   81a40:	f800283a 	ret

00081a44 <__call_exitprocs>:
   81a44:	defff304 	addi	sp,sp,-52
   81a48:	00800234 	movhi	r2,8
   81a4c:	1087dc04 	addi	r2,r2,8048
   81a50:	df000b15 	stw	fp,44(sp)
   81a54:	17000017 	ldw	fp,0(r2)
   81a58:	00800034 	movhi	r2,0
   81a5c:	10800004 	addi	r2,r2,0
   81a60:	1005003a 	cmpeq	r2,r2,zero
   81a64:	d8800215 	stw	r2,8(sp)
   81a68:	e0800c04 	addi	r2,fp,48
   81a6c:	dd800915 	stw	r22,36(sp)
   81a70:	dd400815 	stw	r21,32(sp)
   81a74:	dfc00c15 	stw	ra,48(sp)
   81a78:	ddc00a15 	stw	r23,40(sp)
   81a7c:	dd000715 	stw	r20,28(sp)
   81a80:	dcc00615 	stw	r19,24(sp)
   81a84:	dc800515 	stw	r18,20(sp)
   81a88:	dc400415 	stw	r17,16(sp)
   81a8c:	dc000315 	stw	r16,12(sp)
   81a90:	282d883a 	mov	r22,r5
   81a94:	d9000115 	stw	r4,4(sp)
   81a98:	d8800015 	stw	r2,0(sp)
   81a9c:	282b003a 	cmpeq	r21,r5,zero
   81aa0:	e4400c17 	ldw	r17,48(fp)
   81aa4:	88001226 	beq	r17,zero,81af0 <__call_exitprocs+0xac>
   81aa8:	ddc00017 	ldw	r23,0(sp)
   81aac:	88800117 	ldw	r2,4(r17)
   81ab0:	8c802217 	ldw	r18,136(r17)
   81ab4:	143fffc4 	addi	r16,r2,-1
   81ab8:	80000b16 	blt	r16,zero,81ae8 <__call_exitprocs+0xa4>
   81abc:	9027003a 	cmpeq	r19,r18,zero
   81ac0:	a800171e 	bne	r21,zero,81b20 <__call_exitprocs+0xdc>
   81ac4:	9800051e 	bne	r19,zero,81adc <__call_exitprocs+0x98>
   81ac8:	8409883a 	add	r4,r16,r16
   81acc:	2105883a 	add	r2,r4,r4
   81ad0:	1485883a 	add	r2,r2,r18
   81ad4:	10c02017 	ldw	r3,128(r2)
   81ad8:	b0c01226 	beq	r22,r3,81b24 <__call_exitprocs+0xe0>
   81adc:	843fffc4 	addi	r16,r16,-1
   81ae0:	00bfffc4 	movi	r2,-1
   81ae4:	80bff61e 	bne	r16,r2,81ac0 <__call_exitprocs+0x7c>
   81ae8:	d8800217 	ldw	r2,8(sp)
   81aec:	10003226 	beq	r2,zero,81bb8 <__call_exitprocs+0x174>
   81af0:	dfc00c17 	ldw	ra,48(sp)
   81af4:	df000b17 	ldw	fp,44(sp)
   81af8:	ddc00a17 	ldw	r23,40(sp)
   81afc:	dd800917 	ldw	r22,36(sp)
   81b00:	dd400817 	ldw	r21,32(sp)
   81b04:	dd000717 	ldw	r20,28(sp)
   81b08:	dcc00617 	ldw	r19,24(sp)
   81b0c:	dc800517 	ldw	r18,20(sp)
   81b10:	dc400417 	ldw	r17,16(sp)
   81b14:	dc000317 	ldw	r16,12(sp)
   81b18:	dec00d04 	addi	sp,sp,52
   81b1c:	f800283a 	ret
   81b20:	8409883a 	add	r4,r16,r16
   81b24:	88c00117 	ldw	r3,4(r17)
   81b28:	2105883a 	add	r2,r4,r4
   81b2c:	1445883a 	add	r2,r2,r17
   81b30:	18ffffc4 	addi	r3,r3,-1
   81b34:	11800217 	ldw	r6,8(r2)
   81b38:	1c001826 	beq	r3,r16,81b9c <__call_exitprocs+0x158>
   81b3c:	10000215 	stw	zero,8(r2)
   81b40:	303fe626 	beq	r6,zero,81adc <__call_exitprocs+0x98>
   81b44:	8d000117 	ldw	r20,4(r17)
   81b48:	9800121e 	bne	r19,zero,81b94 <__call_exitprocs+0x150>
   81b4c:	00c00044 	movi	r3,1
   81b50:	1c06983a 	sll	r3,r3,r16
   81b54:	90804017 	ldw	r2,256(r18)
   81b58:	1884703a 	and	r2,r3,r2
   81b5c:	10000d26 	beq	r2,zero,81b94 <__call_exitprocs+0x150>
   81b60:	90804117 	ldw	r2,260(r18)
   81b64:	1884703a 	and	r2,r3,r2
   81b68:	10000e1e 	bne	r2,zero,81ba4 <__call_exitprocs+0x160>
   81b6c:	2105883a 	add	r2,r4,r4
   81b70:	1485883a 	add	r2,r2,r18
   81b74:	11400017 	ldw	r5,0(r2)
   81b78:	d9000117 	ldw	r4,4(sp)
   81b7c:	303ee83a 	callr	r6
   81b80:	88800117 	ldw	r2,4(r17)
   81b84:	a0bfc61e 	bne	r20,r2,81aa0 <__call_exitprocs+0x5c>
   81b88:	b8800017 	ldw	r2,0(r23)
   81b8c:	147fd326 	beq	r2,r17,81adc <__call_exitprocs+0x98>
   81b90:	003fc306 	br	81aa0 <__call_exitprocs+0x5c>
   81b94:	303ee83a 	callr	r6
   81b98:	003ff906 	br	81b80 <__call_exitprocs+0x13c>
   81b9c:	8c000115 	stw	r16,4(r17)
   81ba0:	003fe706 	br	81b40 <__call_exitprocs+0xfc>
   81ba4:	2105883a 	add	r2,r4,r4
   81ba8:	1485883a 	add	r2,r2,r18
   81bac:	11000017 	ldw	r4,0(r2)
   81bb0:	303ee83a 	callr	r6
   81bb4:	003ff206 	br	81b80 <__call_exitprocs+0x13c>
   81bb8:	88800117 	ldw	r2,4(r17)
   81bbc:	10000b1e 	bne	r2,zero,81bec <__call_exitprocs+0x1a8>
   81bc0:	89000017 	ldw	r4,0(r17)
   81bc4:	20000a26 	beq	r4,zero,81bf0 <__call_exitprocs+0x1ac>
   81bc8:	b9000015 	stw	r4,0(r23)
   81bcc:	90000226 	beq	r18,zero,81bd8 <__call_exitprocs+0x194>
   81bd0:	9009883a 	mov	r4,r18
   81bd4:	00000000 	call	0 <__alt_mem_onchip_mem-0x80000>
   81bd8:	8809883a 	mov	r4,r17
   81bdc:	00000000 	call	0 <__alt_mem_onchip_mem-0x80000>
   81be0:	bc400017 	ldw	r17,0(r23)
   81be4:	883fb11e 	bne	r17,zero,81aac <__call_exitprocs+0x68>
   81be8:	003fc106 	br	81af0 <__call_exitprocs+0xac>
   81bec:	89000017 	ldw	r4,0(r17)
   81bf0:	882f883a 	mov	r23,r17
   81bf4:	2023883a 	mov	r17,r4
   81bf8:	883fac1e 	bne	r17,zero,81aac <__call_exitprocs+0x68>
   81bfc:	003fbc06 	br	81af0 <__call_exitprocs+0xac>

00081c00 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   81c00:	defffd04 	addi	sp,sp,-12
   81c04:	df000215 	stw	fp,8(sp)
   81c08:	df000204 	addi	fp,sp,8
   81c0c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   81c10:	e0bfff17 	ldw	r2,-4(fp)
   81c14:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   81c18:	e0bffe17 	ldw	r2,-8(fp)
   81c1c:	1005003a 	cmpeq	r2,r2,zero
   81c20:	1000021e 	bne	r2,zero,81c2c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   81c24:	002af070 	cmpltui	zero,zero,43969
   81c28:	00000106 	br	81c30 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   81c2c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   81c30:	e037883a 	mov	sp,fp
   81c34:	df000017 	ldw	fp,0(sp)
   81c38:	dec00104 	addi	sp,sp,4
   81c3c:	f800283a 	ret

00081c40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   81c40:	defffd04 	addi	sp,sp,-12
   81c44:	dfc00215 	stw	ra,8(sp)
   81c48:	df000115 	stw	fp,4(sp)
   81c4c:	df000104 	addi	fp,sp,4
   81c50:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   81c54:	e13fff17 	ldw	r4,-4(fp)
   81c58:	0081c000 	call	81c00 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   81c5c:	003fff06 	br	81c5c <_exit+0x1c>
   81c60:	00081a40 	call	81a4 <__alt_mem_onchip_mem-0x77e5c>
