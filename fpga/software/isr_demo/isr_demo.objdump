
isr_demo.elf:     file format elf32-littlenios2
isr_demo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00001a18 memsz 0x00001a18 flags r-x
    LOAD off    0x00002a38 vaddr 0x00081a38 paddr 0x00081d18 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00002ff8 vaddr 0x00081ff8 paddr 0x00081ff8 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001858  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  00081a0c  00081a0c  00002a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00081a38  00081d18  00002a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00081ff8  00081ff8  00002ff8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000458  00000000  00000000  00002d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000646  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006bae  00000000  00000000  000037de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a11  00000000  00000000  0000a38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004f17  00000000  00000000  0000bd9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000006d4  00000000  00000000  00010cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000875  00000000  00000000  00011388  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000096f  00000000  00000000  00011bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001256c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00012590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00013d6f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00013d72  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00013d75  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013d76  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00013d77  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00013d7b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00013d7f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00013d83  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00013d8c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00013d95  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00013d9e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  00013db0  2**0
                  CONTENTS, READONLY
 29 .jdi          000056a0  00000000  00000000  00013dca  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003da02  00000000  00000000  0001946a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00081a0c l    d  .rodata	00000000 .rodata
00081a38 l    d  .rwdata	00000000 .rwdata
00081ff8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000803c8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00081a38 l     O .rwdata	0000002c jtag_uart
00080508 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00080798 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00080994 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00080a10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00080af0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00080e4c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00080f88 l     F .text	000000dc alt_file_locked
000811ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000817e8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
00081c0c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
000819a8 l     F .text	00000040 alt_sim_halt
00080434 g     F .text	0000005c alt_main
00082014 g     O .bss	00000100 alt_irq
00081d18 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082010 g     O .bss	00000004 errno
00081ffc g     O .bss	00000004 alt_argv
00089cec g       *ABS*	00000000 _gp
00081a8c g     O .rwdata	00000180 alt_fd_list
00081470 g     F .text	00000094 alt_find_dev
00080f10 g     F .text	00000078 alt_io_redirect
000805f0 g     F .text	00000104 altera_avalon_jtag_uart_read
000816dc g     F .text	00000090 alt_icache_flush
00081cfc g     O .rwdata	00000004 alt_max_fd
00081d14 g     O .rwdata	00000004 _global_impure_ptr
00082114 g       *ABS*	00000000 __bss_end
00080d54 g     F .text	000000f8 alt_iic_isr_register
00081344 g     F .text	0000010c alt_tick
00080d0c g     F .text	00000048 alt_ic_irq_enabled
000812ac g     F .text	00000098 alt_alarm_stop
00082004 g     O .bss	00000004 alt_irq_active
00080000 g       *ABS*	00000000 __alt_mem_onchip_mem
000800ec g     F .exceptions	000000c8 alt_irq_handler
00081a64 g     O .rwdata	00000028 alt_dev_null
000809f4 g     F .text	0000001c alt_dcache_flush_all
00081d18 g       *ABS*	00000000 __ram_rwdata_end
00081cf4 g     O .rwdata	00000008 alt_dev_list
00081a38 g       *ABS*	00000000 __ram_rodata_end
00082114 g       *ABS*	00000000 end
00085000 g       *ABS*	00000000 __alt_stack_pointer
00080808 g     F .text	00000090 alt_avalon_timer_sc_init
000806f4 g     F .text	000000a4 altera_avalon_jtag_uart_write
000817ec g     F .text	000001bc __call_exitprocs
000801b4 g     F .text	0000003c _start
00082008 g     O .bss	00000004 _alt_tick_rate
0008200c g     O .bss	00000004 _alt_nticks
000804c4 g     F .text	00000044 alt_sys_init
00081a38 g       *ABS*	00000000 __ram_rwdata_start
00081a0c g       *ABS*	00000000 __ram_rodata_start
00080540 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00081624 g     F .text	000000b8 alt_get_fd
0008178c g     F .text	0000003c memcmp
00082114 g       *ABS*	00000000 __alt_stack_base
00081504 g     F .text	00000120 alt_find_file
00080a3c g     F .text	000000b4 alt_dev_llist_insert
00081ff8 g       *ABS*	00000000 __bss_start
000801f0 g     F .text	00000158 main
00082000 g     O .bss	00000004 alt_envp
00080598 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00081d00 g     O .rwdata	00000004 alt_errno
00081a0c g       *ABS*	00000000 __flash_rodata_start
00080490 g     F .text	00000034 alt_irq_init
0008124c g     F .text	00000060 alt_release_fd
00081d10 g     O .rwdata	00000004 _impure_ptr
00081ff8 g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
00081cec g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00080b80 g     F .text	00000050 alt_ic_isr_register
00081d18 g       *ABS*	00000000 _edata
00082114 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00080c6c g     F .text	000000a0 alt_ic_irq_disable
00081450 g     F .text	00000020 altera_nios2_qsys_irq_init
0008176c g     F .text	00000020 exit
00085000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000819e8 g     F .text	00000020 _exit
000817c8 g     F .text	00000020 strlen
00081064 g     F .text	00000188 open
00080b50 g     F .text	00000030 alt_icache_flush_all
00081d04 g     O .rwdata	00000004 alt_priority_mask
00080bd0 g     F .text	0000009c alt_ic_irq_enable
00081d08 g     O .rwdata	00000008 alt_alarm_list
00080898 g     F .text	000000fc close
00080348 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406d14 	ori	at,at,436
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00234 	movhi	r3,8
   80134:	18c80504 	addi	r3,r3,8212
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00234 	movhi	r3,8
   8014c:	18c80504 	addi	r3,r3,8212
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c0:	d6a73b14 	ori	gp,gp,40172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	1087fe14 	ori	r2,r2,8184

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18c84514 	ori	r3,r3,8468

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	00803480 	call	80348 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	00804340 	call	80434 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <main>:
#define CHECK_BIT(var,pos) 	((var) & (1<<(pos)))
#define SET_BIT(var,pos) 	(var |= (1U << pos))
#define CLEAR_BIT(var,pos) 	(var &= ~(1U << (pos)))

int main()
{
   801f0:	defffb04 	addi	sp,sp,-20
   801f4:	df000415 	stw	fp,16(sp)
   801f8:	df000404 	addi	fp,sp,16

	int readdata = 0;
   801fc:	e03fff15 	stw	zero,-4(fp)

	int interrupt_counter = 0;
   80200:	e03ffe15 	stw	zero,-8(fp)

	int GP0_val = 0, GP1_val = 0;
   80204:	e03ffd15 	stw	zero,-12(fp)
   80208:	e03ffc15 	stw	zero,-16(fp)

  // Set up Control registers

	// Initialize the values of GP0 and GP1
	IOWR_32DIRECT(REGFILE_0_BASE, GP0, GP0_val);
   8020c:	00c00604 	movi	r3,24
   80210:	e0bffd17 	ldw	r2,-12(fp)
   80214:	18800035 	stwio	r2,0(r3)
	IOWR_32DIRECT(REGFILE_0_BASE, GP1, GP1_val);
   80218:	00c00704 	movi	r3,28
   8021c:	e0bffc17 	ldw	r2,-16(fp)
   80220:	18800035 	stwio	r2,0(r3)

	// Initliaze counter 0 to have the value of 1 second worth of counts
	IOWR_32DIRECT(REGFILE_0_BASE, T0CMP, SECOND);
   80224:	00c00404 	movi	r3,16
   80228:	00800c34 	movhi	r2,48
   8022c:	10abc204 	addi	r2,r2,-20728
   80230:	18800035 	stwio	r2,0(r3)

	// Initialize counter 1 to have a value smaller than counter 0
	IOWR_32DIRECT(REGFILE_0_BASE, T1CMP, SECOND/8 - 10);
   80234:	00c00504 	movi	r3,20
   80238:	008001b4 	movhi	r2,6
   8023c:	10bd75c4 	addi	r2,r2,-2601
   80240:	18800035 	stwio	r2,0(r3)

	// Reset both timers
	// T0RST(0) active high
	// T1RST(1) active high
	IOWR_32DIRECT(REGFILE_0_BASE, TCTL, 0x00000003);
   80244:	00c00104 	movi	r3,4
   80248:	008000c4 	movi	r2,3
   8024c:	18800035 	stwio	r2,0(r3)

	// Enable both timers
	// T0CNTEN(2) active high
	// T1CNTEN(3) active high
	IOWR_32DIRECT(REGFILE_0_BASE, TCTL, 0x0000000F);
   80250:	00c00104 	movi	r3,4
   80254:	008003c4 	movi	r2,15
   80258:	18800035 	stwio	r2,0(r3)

	// Clear reset (keep timers active)
	IOWR_32DIRECT(REGFILE_0_BASE, TCTL, 0x0000000C);
   8025c:	00c00104 	movi	r3,4
   80260:	00800304 	movi	r2,12
   80264:	18800035 	stwio	r2,0(r3)

	// Enable interrupts and the avalon interface interrupts
	// Enable T0INTEN(0) active high
	// Enable T1INTEN(1) active high
	// Enable AVINTDIS(5) active low
	IOWR_32DIRECT(REGFILE_0_BASE, INTCTL, 0x00000003);
   80268:	0007883a 	mov	r3,zero
   8026c:	008000c4 	movi	r2,3
   80270:	18800035 	stwio	r2,0(r3)
   80274:	00000006 	br	80278 <main+0x88>

	while (1)
	{
		// Poll T0INTSTS
		readdata = IORD_32DIRECT(REGFILE_0_BASE, INTCTL);
   80278:	0005883a 	mov	r2,zero
   8027c:	10800037 	ldwio	r2,0(r2)
   80280:	e0bfff15 	stw	r2,-4(fp)
		if (CHECK_BIT(readdata, 2))
   80284:	e0bfff17 	ldw	r2,-4(fp)
   80288:	1080010c 	andi	r2,r2,4
   8028c:	1005003a 	cmpeq	r2,r2,zero
   80290:	1000221e 	bne	r2,zero,8031c <main+0x12c>
			/* USE THIS TO SHOW TIMER 1 OVERRUN AND TIMER 0 INTERRUPT */
			// IOWR_32DIRECT(REGFILE_0_BASE, TCTL, 0x00000004);
			// while(1);

			// Read current value of TCTL
			readdata = IORD_32DIRECT(REGFILE_0_BASE, TCTL);
   80294:	00800104 	movi	r2,4
   80298:	10800037 	ldwio	r2,0(r2)
   8029c:	e0bfff15 	stw	r2,-4(fp)
			// Modify reset bit to 1
			SET_BIT(readdata, 0);
   802a0:	e0bfff17 	ldw	r2,-4(fp)
   802a4:	10800054 	ori	r2,r2,1
   802a8:	e0bfff15 	stw	r2,-4(fp)
			// Write the reset
			IOWR_32DIRECT(REGFILE_0_BASE, TCTL, readdata);
   802ac:	00c00104 	movi	r3,4
   802b0:	e0bfff17 	ldw	r2,-4(fp)
   802b4:	18800035 	stwio	r2,0(r3)

			// Clear the interrupt on 0
			readdata = IORD_32DIRECT(REGFILE_0_BASE, INTCTL);
   802b8:	0005883a 	mov	r2,zero
   802bc:	10800037 	ldwio	r2,0(r2)
   802c0:	e0bfff15 	stw	r2,-4(fp)
			CLEAR_BIT(readdata, 3);
   802c4:	e0ffff17 	ldw	r3,-4(fp)
   802c8:	00bffdc4 	movi	r2,-9
   802cc:	1884703a 	and	r2,r3,r2
   802d0:	e0bfff15 	stw	r2,-4(fp)
			//CLEAR_BIT(readdata, 4); // Clear OVR
			IOWR_32DIRECT(REGFILE_0_BASE, INTCTL, readdata);
   802d4:	0007883a 	mov	r3,zero
   802d8:	e0bfff17 	ldw	r2,-4(fp)
   802dc:	18800035 	stwio	r2,0(r3)

			// Disable the reset
			// Read current value of TCTL
			readdata = IORD_32DIRECT(REGFILE_0_BASE, TCTL);
   802e0:	00800104 	movi	r2,4
   802e4:	10800037 	ldwio	r2,0(r2)
   802e8:	e0bfff15 	stw	r2,-4(fp)
			// Modify reset bit to 1
			CLEAR_BIT(readdata, 0);
   802ec:	e0ffff17 	ldw	r3,-4(fp)
   802f0:	00bfff84 	movi	r2,-2
   802f4:	1884703a 	and	r2,r3,r2
   802f8:	e0bfff15 	stw	r2,-4(fp)
			// Write the reset
			IOWR_32DIRECT(REGFILE_0_BASE, TCTL, readdata);
   802fc:	00c00104 	movi	r3,4
   80300:	e0bfff17 	ldw	r2,-4(fp)
   80304:	18800035 	stwio	r2,0(r3)

			GP0_val = 0;
   80308:	e03ffd15 	stw	zero,-12(fp)
			//GP1_val = 0;
			IOWR_32DIRECT(REGFILE_0_BASE, GP0, GP0_val);
   8030c:	00c00604 	movi	r3,24
   80310:	e0bffd17 	ldw	r2,-12(fp)
   80314:	18800035 	stwio	r2,0(r3)
   80318:	003fd706 	br	80278 <main+0x88>
			//IOWR_32DIRECT(REGFILE_0_BASE, GP1, GP1_val);
		}
		else
		{
			// Poll T1INTSTS
			readdata = IORD_32DIRECT(REGFILE_0_BASE, INTCTL);
   8031c:	0005883a 	mov	r2,zero
   80320:	10800037 	ldwio	r2,0(r2)
   80324:	e0bfff15 	stw	r2,-4(fp)
			if (CHECK_BIT(readdata, 3))
   80328:	e0bfff17 	ldw	r2,-4(fp)
   8032c:	1080020c 	andi	r2,r2,8
   80330:	1005003a 	cmpeq	r2,r2,zero
   80334:	103fd01e 	bne	r2,zero,80278 <main+0x88>
			{


				IOWR_32DIRECT(REGFILE_0_BASE, TCTL, 0x00000008);
   80338:	00c00104 	movi	r3,4
   8033c:	00800204 	movi	r2,8
   80340:	18800035 	stwio	r2,0(r3)
				while(1);
   80344:	003fff06 	br	80344 <main+0x154>

00080348 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80348:	defffe04 	addi	sp,sp,-8
   8034c:	dfc00115 	stw	ra,4(sp)
   80350:	df000015 	stw	fp,0(sp)
   80354:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80358:	01000234 	movhi	r4,8
   8035c:	21074604 	addi	r4,r4,7448
   80360:	01400234 	movhi	r5,8
   80364:	29468e04 	addi	r5,r5,6712
   80368:	01800234 	movhi	r6,8
   8036c:	31874604 	addi	r6,r6,7448
   80370:	00803c80 	call	803c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80374:	01000234 	movhi	r4,8
   80378:	21000804 	addi	r4,r4,32
   8037c:	01400234 	movhi	r5,8
   80380:	29400804 	addi	r5,r5,32
   80384:	01800234 	movhi	r6,8
   80388:	31806d04 	addi	r6,r6,436
   8038c:	00803c80 	call	803c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80390:	01000234 	movhi	r4,8
   80394:	21068304 	addi	r4,r4,6668
   80398:	01400234 	movhi	r5,8
   8039c:	29468304 	addi	r5,r5,6668
   803a0:	01800234 	movhi	r6,8
   803a4:	31868e04 	addi	r6,r6,6712
   803a8:	00803c80 	call	803c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   803ac:	00809f40 	call	809f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   803b0:	0080b500 	call	80b50 <alt_icache_flush_all>
}
   803b4:	e037883a 	mov	sp,fp
   803b8:	dfc00117 	ldw	ra,4(sp)
   803bc:	df000017 	ldw	fp,0(sp)
   803c0:	dec00204 	addi	sp,sp,8
   803c4:	f800283a 	ret

000803c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   803c8:	defffc04 	addi	sp,sp,-16
   803cc:	df000315 	stw	fp,12(sp)
   803d0:	df000304 	addi	fp,sp,12
   803d4:	e13ffd15 	stw	r4,-12(fp)
   803d8:	e17ffe15 	stw	r5,-8(fp)
   803dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   803e0:	e0fffe17 	ldw	r3,-8(fp)
   803e4:	e0bffd17 	ldw	r2,-12(fp)
   803e8:	18800e26 	beq	r3,r2,80424 <alt_load_section+0x5c>
  {
    while( to != end )
   803ec:	00000a06 	br	80418 <alt_load_section+0x50>
    {
      *to++ = *from++;
   803f0:	e0bffd17 	ldw	r2,-12(fp)
   803f4:	10c00017 	ldw	r3,0(r2)
   803f8:	e0bffe17 	ldw	r2,-8(fp)
   803fc:	10c00015 	stw	r3,0(r2)
   80400:	e0bffe17 	ldw	r2,-8(fp)
   80404:	10800104 	addi	r2,r2,4
   80408:	e0bffe15 	stw	r2,-8(fp)
   8040c:	e0bffd17 	ldw	r2,-12(fp)
   80410:	10800104 	addi	r2,r2,4
   80414:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80418:	e0fffe17 	ldw	r3,-8(fp)
   8041c:	e0bfff17 	ldw	r2,-4(fp)
   80420:	18bff31e 	bne	r3,r2,803f0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   80424:	e037883a 	mov	sp,fp
   80428:	df000017 	ldw	fp,0(sp)
   8042c:	dec00104 	addi	sp,sp,4
   80430:	f800283a 	ret

00080434 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80434:	defffd04 	addi	sp,sp,-12
   80438:	dfc00215 	stw	ra,8(sp)
   8043c:	df000115 	stw	fp,4(sp)
   80440:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80444:	0009883a 	mov	r4,zero
   80448:	00804900 	call	80490 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8044c:	00804c40 	call	804c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80450:	01000234 	movhi	r4,8
   80454:	21068304 	addi	r4,r4,6668
   80458:	01400234 	movhi	r5,8
   8045c:	29468304 	addi	r5,r5,6668
   80460:	01800234 	movhi	r6,8
   80464:	31868304 	addi	r6,r6,6668
   80468:	0080f100 	call	80f10 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8046c:	d120c317 	ldw	r4,-31988(gp)
   80470:	d160c417 	ldw	r5,-31984(gp)
   80474:	d1a0c517 	ldw	r6,-31980(gp)
   80478:	00801f00 	call	801f0 <main>
   8047c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80480:	01000044 	movi	r4,1
   80484:	00808980 	call	80898 <close>
  exit (result);
   80488:	e13fff17 	ldw	r4,-4(fp)
   8048c:	008176c0 	call	8176c <exit>

00080490 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80490:	defffd04 	addi	sp,sp,-12
   80494:	dfc00215 	stw	ra,8(sp)
   80498:	df000115 	stw	fp,4(sp)
   8049c:	df000104 	addi	fp,sp,4
   804a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   804a4:	00814500 	call	81450 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   804a8:	00800044 	movi	r2,1
   804ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   804b0:	e037883a 	mov	sp,fp
   804b4:	dfc00117 	ldw	ra,4(sp)
   804b8:	df000017 	ldw	fp,0(sp)
   804bc:	dec00204 	addi	sp,sp,8
   804c0:	f800283a 	ret

000804c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   804c4:	defffe04 	addi	sp,sp,-8
   804c8:	dfc00115 	stw	ra,4(sp)
   804cc:	df000015 	stw	fp,0(sp)
   804d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   804d4:	01001804 	movi	r4,96
   804d8:	000b883a 	mov	r5,zero
   804dc:	01800044 	movi	r6,1
   804e0:	01c0fa04 	movi	r7,1000
   804e4:	00808080 	call	80808 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   804e8:	01000234 	movhi	r4,8
   804ec:	21068e04 	addi	r4,r4,6712
   804f0:	00805080 	call	80508 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   804f4:	e037883a 	mov	sp,fp
   804f8:	dfc00117 	ldw	ra,4(sp)
   804fc:	df000017 	ldw	fp,0(sp)
   80500:	dec00204 	addi	sp,sp,8
   80504:	f800283a 	ret

00080508 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80508:	defffd04 	addi	sp,sp,-12
   8050c:	dfc00215 	stw	ra,8(sp)
   80510:	df000115 	stw	fp,4(sp)
   80514:	df000104 	addi	fp,sp,4
   80518:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8051c:	e13fff17 	ldw	r4,-4(fp)
   80520:	01400234 	movhi	r5,8
   80524:	29473d04 	addi	r5,r5,7412
   80528:	0080a3c0 	call	80a3c <alt_dev_llist_insert>
}
   8052c:	e037883a 	mov	sp,fp
   80530:	dfc00117 	ldw	ra,4(sp)
   80534:	df000017 	ldw	fp,0(sp)
   80538:	dec00204 	addi	sp,sp,8
   8053c:	f800283a 	ret

00080540 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80540:	defffa04 	addi	sp,sp,-24
   80544:	dfc00515 	stw	ra,20(sp)
   80548:	df000415 	stw	fp,16(sp)
   8054c:	df000404 	addi	fp,sp,16
   80550:	e13ffd15 	stw	r4,-12(fp)
   80554:	e17ffe15 	stw	r5,-8(fp)
   80558:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8055c:	e0bffd17 	ldw	r2,-12(fp)
   80560:	10800017 	ldw	r2,0(r2)
   80564:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   80568:	e0bffc17 	ldw	r2,-16(fp)
   8056c:	11000a04 	addi	r4,r2,40
   80570:	e0bffd17 	ldw	r2,-12(fp)
   80574:	11c00217 	ldw	r7,8(r2)
   80578:	e17ffe17 	ldw	r5,-8(fp)
   8057c:	e1bfff17 	ldw	r6,-4(fp)
   80580:	00805f00 	call	805f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80584:	e037883a 	mov	sp,fp
   80588:	dfc00117 	ldw	ra,4(sp)
   8058c:	df000017 	ldw	fp,0(sp)
   80590:	dec00204 	addi	sp,sp,8
   80594:	f800283a 	ret

00080598 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80598:	defffa04 	addi	sp,sp,-24
   8059c:	dfc00515 	stw	ra,20(sp)
   805a0:	df000415 	stw	fp,16(sp)
   805a4:	df000404 	addi	fp,sp,16
   805a8:	e13ffd15 	stw	r4,-12(fp)
   805ac:	e17ffe15 	stw	r5,-8(fp)
   805b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   805b4:	e0bffd17 	ldw	r2,-12(fp)
   805b8:	10800017 	ldw	r2,0(r2)
   805bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   805c0:	e0bffc17 	ldw	r2,-16(fp)
   805c4:	11000a04 	addi	r4,r2,40
   805c8:	e0bffd17 	ldw	r2,-12(fp)
   805cc:	11c00217 	ldw	r7,8(r2)
   805d0:	e17ffe17 	ldw	r5,-8(fp)
   805d4:	e1bfff17 	ldw	r6,-4(fp)
   805d8:	00806f40 	call	806f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   805dc:	e037883a 	mov	sp,fp
   805e0:	dfc00117 	ldw	ra,4(sp)
   805e4:	df000017 	ldw	fp,0(sp)
   805e8:	dec00204 	addi	sp,sp,8
   805ec:	f800283a 	ret

000805f0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   805f0:	defff604 	addi	sp,sp,-40
   805f4:	df000915 	stw	fp,36(sp)
   805f8:	df000904 	addi	fp,sp,36
   805fc:	e13ffb15 	stw	r4,-20(fp)
   80600:	e17ffc15 	stw	r5,-16(fp)
   80604:	e1bffd15 	stw	r6,-12(fp)
   80608:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   8060c:	e0bffb17 	ldw	r2,-20(fp)
   80610:	10800017 	ldw	r2,0(r2)
   80614:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   80618:	e0bffc17 	ldw	r2,-16(fp)
   8061c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   80620:	e0bffd17 	ldw	r2,-12(fp)
   80624:	1007883a 	mov	r3,r2
   80628:	e0bffc17 	ldw	r2,-16(fp)
   8062c:	10c5883a 	add	r2,r2,r3
   80630:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   80634:	00001606 	br	80690 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80638:	e0bffa17 	ldw	r2,-24(fp)
   8063c:	10800037 	ldwio	r2,0(r2)
   80640:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   80644:	e0bff717 	ldw	r2,-36(fp)
   80648:	10a0000c 	andi	r2,r2,32768
   8064c:	1005003a 	cmpeq	r2,r2,zero
   80650:	1000081e 	bne	r2,zero,80674 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80654:	e0bff717 	ldw	r2,-36(fp)
   80658:	1007883a 	mov	r3,r2
   8065c:	e0bff917 	ldw	r2,-28(fp)
   80660:	10c00005 	stb	r3,0(r2)
   80664:	e0bff917 	ldw	r2,-28(fp)
   80668:	10800044 	addi	r2,r2,1
   8066c:	e0bff915 	stw	r2,-28(fp)
   80670:	00000706 	br	80690 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   80674:	e0fff917 	ldw	r3,-28(fp)
   80678:	e0bffc17 	ldw	r2,-16(fp)
   8067c:	1880071e 	bne	r3,r2,8069c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   80680:	e0bffe17 	ldw	r2,-8(fp)
   80684:	1090000c 	andi	r2,r2,16384
   80688:	1004c03a 	cmpne	r2,r2,zero
   8068c:	1000031e 	bne	r2,zero,8069c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   80690:	e0fff917 	ldw	r3,-28(fp)
   80694:	e0bff817 	ldw	r2,-32(fp)
   80698:	18bfe736 	bltu	r3,r2,80638 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   8069c:	e0fff917 	ldw	r3,-28(fp)
   806a0:	e0bffc17 	ldw	r2,-16(fp)
   806a4:	18800526 	beq	r3,r2,806bc <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   806a8:	e0fff917 	ldw	r3,-28(fp)
   806ac:	e0bffc17 	ldw	r2,-16(fp)
   806b0:	1887c83a 	sub	r3,r3,r2
   806b4:	e0ffff15 	stw	r3,-4(fp)
   806b8:	00000906 	br	806e0 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   806bc:	e0bffe17 	ldw	r2,-8(fp)
   806c0:	1090000c 	andi	r2,r2,16384
   806c4:	1005003a 	cmpeq	r2,r2,zero
   806c8:	1000031e 	bne	r2,zero,806d8 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   806cc:	00bffd44 	movi	r2,-11
   806d0:	e0bfff15 	stw	r2,-4(fp)
   806d4:	00000206 	br	806e0 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   806d8:	00bffec4 	movi	r2,-5
   806dc:	e0bfff15 	stw	r2,-4(fp)
   806e0:	e0bfff17 	ldw	r2,-4(fp)
}
   806e4:	e037883a 	mov	sp,fp
   806e8:	df000017 	ldw	fp,0(sp)
   806ec:	dec00104 	addi	sp,sp,4
   806f0:	f800283a 	ret

000806f4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   806f4:	defff904 	addi	sp,sp,-28
   806f8:	df000615 	stw	fp,24(sp)
   806fc:	df000604 	addi	fp,sp,24
   80700:	e13ffc15 	stw	r4,-16(fp)
   80704:	e17ffd15 	stw	r5,-12(fp)
   80708:	e1bffe15 	stw	r6,-8(fp)
   8070c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   80710:	e0bffc17 	ldw	r2,-16(fp)
   80714:	10800017 	ldw	r2,0(r2)
   80718:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   8071c:	e0bffe17 	ldw	r2,-8(fp)
   80720:	1007883a 	mov	r3,r2
   80724:	e0bffd17 	ldw	r2,-12(fp)
   80728:	10c5883a 	add	r2,r2,r3
   8072c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   80730:	00001106 	br	80778 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   80734:	e0bffb17 	ldw	r2,-20(fp)
   80738:	10800104 	addi	r2,r2,4
   8073c:	10800037 	ldwio	r2,0(r2)
   80740:	10bfffec 	andhi	r2,r2,65535
   80744:	1005003a 	cmpeq	r2,r2,zero
   80748:	10000b1e 	bne	r2,zero,80778 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   8074c:	e13ffb17 	ldw	r4,-20(fp)
   80750:	e0bffd17 	ldw	r2,-12(fp)
   80754:	10800003 	ldbu	r2,0(r2)
   80758:	10c03fcc 	andi	r3,r2,255
   8075c:	18c0201c 	xori	r3,r3,128
   80760:	18ffe004 	addi	r3,r3,-128
   80764:	e0bffd17 	ldw	r2,-12(fp)
   80768:	10800044 	addi	r2,r2,1
   8076c:	e0bffd15 	stw	r2,-12(fp)
   80770:	2005883a 	mov	r2,r4
   80774:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   80778:	e0fffd17 	ldw	r3,-12(fp)
   8077c:	e0bffa17 	ldw	r2,-24(fp)
   80780:	18bfec36 	bltu	r3,r2,80734 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   80784:	e0bffe17 	ldw	r2,-8(fp)
}
   80788:	e037883a 	mov	sp,fp
   8078c:	df000017 	ldw	fp,0(sp)
   80790:	dec00104 	addi	sp,sp,4
   80794:	f800283a 	ret

00080798 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   80798:	defffa04 	addi	sp,sp,-24
   8079c:	dfc00515 	stw	ra,20(sp)
   807a0:	df000415 	stw	fp,16(sp)
   807a4:	df000404 	addi	fp,sp,16
   807a8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   807ac:	e0bfff17 	ldw	r2,-4(fp)
   807b0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   807b4:	e0bfff17 	ldw	r2,-4(fp)
   807b8:	10800104 	addi	r2,r2,4
   807bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   807c0:	0005303a 	rdctl	r2,status
   807c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   807c8:	e0fffd17 	ldw	r3,-12(fp)
   807cc:	00bfff84 	movi	r2,-2
   807d0:	1884703a 	and	r2,r3,r2
   807d4:	1001703a 	wrctl	status,r2
  
  return context;
   807d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   807dc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   807e0:	00813440 	call	81344 <alt_tick>
   807e4:	e0bffe17 	ldw	r2,-8(fp)
   807e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   807ec:	e0bffc17 	ldw	r2,-16(fp)
   807f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   807f4:	e037883a 	mov	sp,fp
   807f8:	dfc00117 	ldw	ra,4(sp)
   807fc:	df000017 	ldw	fp,0(sp)
   80800:	dec00204 	addi	sp,sp,8
   80804:	f800283a 	ret

00080808 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   80808:	defff804 	addi	sp,sp,-32
   8080c:	dfc00715 	stw	ra,28(sp)
   80810:	df000615 	stw	fp,24(sp)
   80814:	df000604 	addi	fp,sp,24
   80818:	e13ffc15 	stw	r4,-16(fp)
   8081c:	e17ffd15 	stw	r5,-12(fp)
   80820:	e1bffe15 	stw	r6,-8(fp)
   80824:	e1ffff15 	stw	r7,-4(fp)
   80828:	e0bfff17 	ldw	r2,-4(fp)
   8082c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   80830:	00800234 	movhi	r2,8
   80834:	10880204 	addi	r2,r2,8200
   80838:	10800017 	ldw	r2,0(r2)
   8083c:	1004c03a 	cmpne	r2,r2,zero
   80840:	1000041e 	bne	r2,zero,80854 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   80844:	00c00234 	movhi	r3,8
   80848:	18c80204 	addi	r3,r3,8200
   8084c:	e0bffb17 	ldw	r2,-20(fp)
   80850:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   80854:	e0bffc17 	ldw	r2,-16(fp)
   80858:	10800104 	addi	r2,r2,4
   8085c:	1007883a 	mov	r3,r2
   80860:	008001c4 	movi	r2,7
   80864:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   80868:	d8000015 	stw	zero,0(sp)
   8086c:	e13ffd17 	ldw	r4,-12(fp)
   80870:	e17ffe17 	ldw	r5,-8(fp)
   80874:	01800234 	movhi	r6,8
   80878:	3181e604 	addi	r6,r6,1944
   8087c:	e1fffc17 	ldw	r7,-16(fp)
   80880:	0080b800 	call	80b80 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   80884:	e037883a 	mov	sp,fp
   80888:	dfc00117 	ldw	ra,4(sp)
   8088c:	df000017 	ldw	fp,0(sp)
   80890:	dec00204 	addi	sp,sp,8
   80894:	f800283a 	ret

00080898 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   80898:	defff804 	addi	sp,sp,-32
   8089c:	dfc00715 	stw	ra,28(sp)
   808a0:	df000615 	stw	fp,24(sp)
   808a4:	df000604 	addi	fp,sp,24
   808a8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   808ac:	e0bffc17 	ldw	r2,-16(fp)
   808b0:	1004803a 	cmplt	r2,r2,zero
   808b4:	1000081e 	bne	r2,zero,808d8 <close+0x40>
   808b8:	e0bffc17 	ldw	r2,-16(fp)
   808bc:	10800324 	muli	r2,r2,12
   808c0:	1007883a 	mov	r3,r2
   808c4:	00800234 	movhi	r2,8
   808c8:	1086a304 	addi	r2,r2,6796
   808cc:	1887883a 	add	r3,r3,r2
   808d0:	e0ffff15 	stw	r3,-4(fp)
   808d4:	00000106 	br	808dc <close+0x44>
   808d8:	e03fff15 	stw	zero,-4(fp)
   808dc:	e0bfff17 	ldw	r2,-4(fp)
   808e0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   808e4:	e0bffb17 	ldw	r2,-20(fp)
   808e8:	1005003a 	cmpeq	r2,r2,zero
   808ec:	10001d1e 	bne	r2,zero,80964 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   808f0:	e0bffb17 	ldw	r2,-20(fp)
   808f4:	10800017 	ldw	r2,0(r2)
   808f8:	10800417 	ldw	r2,16(r2)
   808fc:	1005003a 	cmpeq	r2,r2,zero
   80900:	1000071e 	bne	r2,zero,80920 <close+0x88>
   80904:	e0bffb17 	ldw	r2,-20(fp)
   80908:	10800017 	ldw	r2,0(r2)
   8090c:	10800417 	ldw	r2,16(r2)
   80910:	e13ffb17 	ldw	r4,-20(fp)
   80914:	103ee83a 	callr	r2
   80918:	e0bffe15 	stw	r2,-8(fp)
   8091c:	00000106 	br	80924 <close+0x8c>
   80920:	e03ffe15 	stw	zero,-8(fp)
   80924:	e0bffe17 	ldw	r2,-8(fp)
   80928:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8092c:	e13ffc17 	ldw	r4,-16(fp)
   80930:	008124c0 	call	8124c <alt_release_fd>
    if (rval < 0)
   80934:	e0bffa17 	ldw	r2,-24(fp)
   80938:	1004403a 	cmpge	r2,r2,zero
   8093c:	1000071e 	bne	r2,zero,8095c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   80940:	00809940 	call	80994 <alt_get_errno>
   80944:	e0fffa17 	ldw	r3,-24(fp)
   80948:	00c7c83a 	sub	r3,zero,r3
   8094c:	10c00015 	stw	r3,0(r2)
      return -1;
   80950:	00bfffc4 	movi	r2,-1
   80954:	e0bffd15 	stw	r2,-12(fp)
   80958:	00000806 	br	8097c <close+0xe4>
    }
    return 0;
   8095c:	e03ffd15 	stw	zero,-12(fp)
   80960:	00000606 	br	8097c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   80964:	00809940 	call	80994 <alt_get_errno>
   80968:	1007883a 	mov	r3,r2
   8096c:	00801444 	movi	r2,81
   80970:	18800015 	stw	r2,0(r3)
    return -1;
   80974:	00bfffc4 	movi	r2,-1
   80978:	e0bffd15 	stw	r2,-12(fp)
   8097c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   80980:	e037883a 	mov	sp,fp
   80984:	dfc00117 	ldw	ra,4(sp)
   80988:	df000017 	ldw	fp,0(sp)
   8098c:	dec00204 	addi	sp,sp,8
   80990:	f800283a 	ret

00080994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   80994:	defffd04 	addi	sp,sp,-12
   80998:	dfc00215 	stw	ra,8(sp)
   8099c:	df000115 	stw	fp,4(sp)
   809a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   809a4:	00800234 	movhi	r2,8
   809a8:	10874004 	addi	r2,r2,7424
   809ac:	10800017 	ldw	r2,0(r2)
   809b0:	1005003a 	cmpeq	r2,r2,zero
   809b4:	1000061e 	bne	r2,zero,809d0 <alt_get_errno+0x3c>
   809b8:	00800234 	movhi	r2,8
   809bc:	10874004 	addi	r2,r2,7424
   809c0:	10800017 	ldw	r2,0(r2)
   809c4:	103ee83a 	callr	r2
   809c8:	e0bfff15 	stw	r2,-4(fp)
   809cc:	00000306 	br	809dc <alt_get_errno+0x48>
   809d0:	00800234 	movhi	r2,8
   809d4:	10880404 	addi	r2,r2,8208
   809d8:	e0bfff15 	stw	r2,-4(fp)
   809dc:	e0bfff17 	ldw	r2,-4(fp)
}
   809e0:	e037883a 	mov	sp,fp
   809e4:	dfc00117 	ldw	ra,4(sp)
   809e8:	df000017 	ldw	fp,0(sp)
   809ec:	dec00204 	addi	sp,sp,8
   809f0:	f800283a 	ret

000809f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   809f4:	deffff04 	addi	sp,sp,-4
   809f8:	df000015 	stw	fp,0(sp)
   809fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   80a00:	e037883a 	mov	sp,fp
   80a04:	df000017 	ldw	fp,0(sp)
   80a08:	dec00104 	addi	sp,sp,4
   80a0c:	f800283a 	ret

00080a10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   80a10:	defffc04 	addi	sp,sp,-16
   80a14:	df000315 	stw	fp,12(sp)
   80a18:	df000304 	addi	fp,sp,12
   80a1c:	e13ffd15 	stw	r4,-12(fp)
   80a20:	e17ffe15 	stw	r5,-8(fp)
   80a24:	e1bfff15 	stw	r6,-4(fp)
  return len;
   80a28:	e0bfff17 	ldw	r2,-4(fp)
}
   80a2c:	e037883a 	mov	sp,fp
   80a30:	df000017 	ldw	fp,0(sp)
   80a34:	dec00104 	addi	sp,sp,4
   80a38:	f800283a 	ret

00080a3c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   80a3c:	defff904 	addi	sp,sp,-28
   80a40:	dfc00615 	stw	ra,24(sp)
   80a44:	df000515 	stw	fp,20(sp)
   80a48:	df000504 	addi	fp,sp,20
   80a4c:	e13ffd15 	stw	r4,-12(fp)
   80a50:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   80a54:	e0bffd17 	ldw	r2,-12(fp)
   80a58:	1005003a 	cmpeq	r2,r2,zero
   80a5c:	1000041e 	bne	r2,zero,80a70 <alt_dev_llist_insert+0x34>
   80a60:	e0bffd17 	ldw	r2,-12(fp)
   80a64:	10800217 	ldw	r2,8(r2)
   80a68:	1004c03a 	cmpne	r2,r2,zero
   80a6c:	1000071e 	bne	r2,zero,80a8c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   80a70:	0080af00 	call	80af0 <alt_get_errno>
   80a74:	1007883a 	mov	r3,r2
   80a78:	00800584 	movi	r2,22
   80a7c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   80a80:	00bffa84 	movi	r2,-22
   80a84:	e0bfff15 	stw	r2,-4(fp)
   80a88:	00001306 	br	80ad8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   80a8c:	e0fffd17 	ldw	r3,-12(fp)
   80a90:	e0bffe17 	ldw	r2,-8(fp)
   80a94:	e0bffb15 	stw	r2,-20(fp)
   80a98:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   80a9c:	e0fffc17 	ldw	r3,-16(fp)
   80aa0:	e0bffb17 	ldw	r2,-20(fp)
   80aa4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   80aa8:	e0bffb17 	ldw	r2,-20(fp)
   80aac:	10c00017 	ldw	r3,0(r2)
   80ab0:	e0bffc17 	ldw	r2,-16(fp)
   80ab4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   80ab8:	e0bffb17 	ldw	r2,-20(fp)
   80abc:	10c00017 	ldw	r3,0(r2)
   80ac0:	e0bffc17 	ldw	r2,-16(fp)
   80ac4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   80ac8:	e0fffb17 	ldw	r3,-20(fp)
   80acc:	e0bffc17 	ldw	r2,-16(fp)
   80ad0:	18800015 	stw	r2,0(r3)

  return 0;  
   80ad4:	e03fff15 	stw	zero,-4(fp)
   80ad8:	e0bfff17 	ldw	r2,-4(fp)
}
   80adc:	e037883a 	mov	sp,fp
   80ae0:	dfc00117 	ldw	ra,4(sp)
   80ae4:	df000017 	ldw	fp,0(sp)
   80ae8:	dec00204 	addi	sp,sp,8
   80aec:	f800283a 	ret

00080af0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   80af0:	defffd04 	addi	sp,sp,-12
   80af4:	dfc00215 	stw	ra,8(sp)
   80af8:	df000115 	stw	fp,4(sp)
   80afc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   80b00:	00800234 	movhi	r2,8
   80b04:	10874004 	addi	r2,r2,7424
   80b08:	10800017 	ldw	r2,0(r2)
   80b0c:	1005003a 	cmpeq	r2,r2,zero
   80b10:	1000061e 	bne	r2,zero,80b2c <alt_get_errno+0x3c>
   80b14:	00800234 	movhi	r2,8
   80b18:	10874004 	addi	r2,r2,7424
   80b1c:	10800017 	ldw	r2,0(r2)
   80b20:	103ee83a 	callr	r2
   80b24:	e0bfff15 	stw	r2,-4(fp)
   80b28:	00000306 	br	80b38 <alt_get_errno+0x48>
   80b2c:	00800234 	movhi	r2,8
   80b30:	10880404 	addi	r2,r2,8208
   80b34:	e0bfff15 	stw	r2,-4(fp)
   80b38:	e0bfff17 	ldw	r2,-4(fp)
}
   80b3c:	e037883a 	mov	sp,fp
   80b40:	dfc00117 	ldw	ra,4(sp)
   80b44:	df000017 	ldw	fp,0(sp)
   80b48:	dec00204 	addi	sp,sp,8
   80b4c:	f800283a 	ret

00080b50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   80b50:	defffe04 	addi	sp,sp,-8
   80b54:	dfc00115 	stw	ra,4(sp)
   80b58:	df000015 	stw	fp,0(sp)
   80b5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   80b60:	0009883a 	mov	r4,zero
   80b64:	01420004 	movi	r5,2048
   80b68:	00816dc0 	call	816dc <alt_icache_flush>
#endif
}
   80b6c:	e037883a 	mov	sp,fp
   80b70:	dfc00117 	ldw	ra,4(sp)
   80b74:	df000017 	ldw	fp,0(sp)
   80b78:	dec00204 	addi	sp,sp,8
   80b7c:	f800283a 	ret

00080b80 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   80b80:	defff904 	addi	sp,sp,-28
   80b84:	dfc00615 	stw	ra,24(sp)
   80b88:	df000515 	stw	fp,20(sp)
   80b8c:	df000504 	addi	fp,sp,20
   80b90:	e13ffc15 	stw	r4,-16(fp)
   80b94:	e17ffd15 	stw	r5,-12(fp)
   80b98:	e1bffe15 	stw	r6,-8(fp)
   80b9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   80ba0:	e0800217 	ldw	r2,8(fp)
   80ba4:	d8800015 	stw	r2,0(sp)
   80ba8:	e13ffc17 	ldw	r4,-16(fp)
   80bac:	e17ffd17 	ldw	r5,-12(fp)
   80bb0:	e1bffe17 	ldw	r6,-8(fp)
   80bb4:	e1ffff17 	ldw	r7,-4(fp)
   80bb8:	0080d540 	call	80d54 <alt_iic_isr_register>
}  
   80bbc:	e037883a 	mov	sp,fp
   80bc0:	dfc00117 	ldw	ra,4(sp)
   80bc4:	df000017 	ldw	fp,0(sp)
   80bc8:	dec00204 	addi	sp,sp,8
   80bcc:	f800283a 	ret

00080bd0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   80bd0:	defff904 	addi	sp,sp,-28
   80bd4:	df000615 	stw	fp,24(sp)
   80bd8:	df000604 	addi	fp,sp,24
   80bdc:	e13ffe15 	stw	r4,-8(fp)
   80be0:	e17fff15 	stw	r5,-4(fp)
   80be4:	e0bfff17 	ldw	r2,-4(fp)
   80be8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80bec:	0005303a 	rdctl	r2,status
   80bf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80bf4:	e0fffb17 	ldw	r3,-20(fp)
   80bf8:	00bfff84 	movi	r2,-2
   80bfc:	1884703a 	and	r2,r3,r2
   80c00:	1001703a 	wrctl	status,r2
  
  return context;
   80c04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   80c08:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   80c0c:	e0fffc17 	ldw	r3,-16(fp)
   80c10:	00800044 	movi	r2,1
   80c14:	10c4983a 	sll	r2,r2,r3
   80c18:	1007883a 	mov	r3,r2
   80c1c:	00800234 	movhi	r2,8
   80c20:	10880104 	addi	r2,r2,8196
   80c24:	10800017 	ldw	r2,0(r2)
   80c28:	1886b03a 	or	r3,r3,r2
   80c2c:	00800234 	movhi	r2,8
   80c30:	10880104 	addi	r2,r2,8196
   80c34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   80c38:	00800234 	movhi	r2,8
   80c3c:	10880104 	addi	r2,r2,8196
   80c40:	10800017 	ldw	r2,0(r2)
   80c44:	100170fa 	wrctl	ienable,r2
   80c48:	e0bffd17 	ldw	r2,-12(fp)
   80c4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80c50:	e0bffa17 	ldw	r2,-24(fp)
   80c54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   80c58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   80c5c:	e037883a 	mov	sp,fp
   80c60:	df000017 	ldw	fp,0(sp)
   80c64:	dec00104 	addi	sp,sp,4
   80c68:	f800283a 	ret

00080c6c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   80c6c:	defff904 	addi	sp,sp,-28
   80c70:	df000615 	stw	fp,24(sp)
   80c74:	df000604 	addi	fp,sp,24
   80c78:	e13ffe15 	stw	r4,-8(fp)
   80c7c:	e17fff15 	stw	r5,-4(fp)
   80c80:	e0bfff17 	ldw	r2,-4(fp)
   80c84:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80c88:	0005303a 	rdctl	r2,status
   80c8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80c90:	e0fffb17 	ldw	r3,-20(fp)
   80c94:	00bfff84 	movi	r2,-2
   80c98:	1884703a 	and	r2,r3,r2
   80c9c:	1001703a 	wrctl	status,r2
  
  return context;
   80ca0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   80ca4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   80ca8:	e0fffc17 	ldw	r3,-16(fp)
   80cac:	00800044 	movi	r2,1
   80cb0:	10c4983a 	sll	r2,r2,r3
   80cb4:	0084303a 	nor	r2,zero,r2
   80cb8:	1007883a 	mov	r3,r2
   80cbc:	00800234 	movhi	r2,8
   80cc0:	10880104 	addi	r2,r2,8196
   80cc4:	10800017 	ldw	r2,0(r2)
   80cc8:	1886703a 	and	r3,r3,r2
   80ccc:	00800234 	movhi	r2,8
   80cd0:	10880104 	addi	r2,r2,8196
   80cd4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   80cd8:	00800234 	movhi	r2,8
   80cdc:	10880104 	addi	r2,r2,8196
   80ce0:	10800017 	ldw	r2,0(r2)
   80ce4:	100170fa 	wrctl	ienable,r2
   80ce8:	e0bffd17 	ldw	r2,-12(fp)
   80cec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80cf0:	e0bffa17 	ldw	r2,-24(fp)
   80cf4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   80cf8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   80cfc:	e037883a 	mov	sp,fp
   80d00:	df000017 	ldw	fp,0(sp)
   80d04:	dec00104 	addi	sp,sp,4
   80d08:	f800283a 	ret

00080d0c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   80d0c:	defffc04 	addi	sp,sp,-16
   80d10:	df000315 	stw	fp,12(sp)
   80d14:	df000304 	addi	fp,sp,12
   80d18:	e13ffe15 	stw	r4,-8(fp)
   80d1c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   80d20:	000530fa 	rdctl	r2,ienable
   80d24:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   80d28:	e0ffff17 	ldw	r3,-4(fp)
   80d2c:	00800044 	movi	r2,1
   80d30:	10c4983a 	sll	r2,r2,r3
   80d34:	1007883a 	mov	r3,r2
   80d38:	e0bffd17 	ldw	r2,-12(fp)
   80d3c:	1884703a 	and	r2,r3,r2
   80d40:	1004c03a 	cmpne	r2,r2,zero
}
   80d44:	e037883a 	mov	sp,fp
   80d48:	df000017 	ldw	fp,0(sp)
   80d4c:	dec00104 	addi	sp,sp,4
   80d50:	f800283a 	ret

00080d54 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   80d54:	defff404 	addi	sp,sp,-48
   80d58:	dfc00b15 	stw	ra,44(sp)
   80d5c:	df000a15 	stw	fp,40(sp)
   80d60:	df000a04 	addi	fp,sp,40
   80d64:	e13ffb15 	stw	r4,-20(fp)
   80d68:	e17ffc15 	stw	r5,-16(fp)
   80d6c:	e1bffd15 	stw	r6,-12(fp)
   80d70:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   80d74:	00bffa84 	movi	r2,-22
   80d78:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   80d7c:	e0bffc17 	ldw	r2,-16(fp)
   80d80:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   80d84:	e0bff917 	ldw	r2,-28(fp)
   80d88:	10800808 	cmpgei	r2,r2,32
   80d8c:	1000291e 	bne	r2,zero,80e34 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80d90:	0005303a 	rdctl	r2,status
   80d94:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80d98:	e0fff717 	ldw	r3,-36(fp)
   80d9c:	00bfff84 	movi	r2,-2
   80da0:	1884703a 	and	r2,r3,r2
   80da4:	1001703a 	wrctl	status,r2
  
  return context;
   80da8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   80dac:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   80db0:	e0bff917 	ldw	r2,-28(fp)
   80db4:	00c00234 	movhi	r3,8
   80db8:	18c80504 	addi	r3,r3,8212
   80dbc:	100490fa 	slli	r2,r2,3
   80dc0:	10c7883a 	add	r3,r2,r3
   80dc4:	e0bffd17 	ldw	r2,-12(fp)
   80dc8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   80dcc:	e0bff917 	ldw	r2,-28(fp)
   80dd0:	00c00234 	movhi	r3,8
   80dd4:	18c80504 	addi	r3,r3,8212
   80dd8:	100490fa 	slli	r2,r2,3
   80ddc:	10c5883a 	add	r2,r2,r3
   80de0:	10c00104 	addi	r3,r2,4
   80de4:	e0bffe17 	ldw	r2,-8(fp)
   80de8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   80dec:	e0bffd17 	ldw	r2,-12(fp)
   80df0:	1005003a 	cmpeq	r2,r2,zero
   80df4:	1000051e 	bne	r2,zero,80e0c <alt_iic_isr_register+0xb8>
   80df8:	e17ff917 	ldw	r5,-28(fp)
   80dfc:	e13ffb17 	ldw	r4,-20(fp)
   80e00:	0080bd00 	call	80bd0 <alt_ic_irq_enable>
   80e04:	e0bfff15 	stw	r2,-4(fp)
   80e08:	00000406 	br	80e1c <alt_iic_isr_register+0xc8>
   80e0c:	e17ff917 	ldw	r5,-28(fp)
   80e10:	e13ffb17 	ldw	r4,-20(fp)
   80e14:	0080c6c0 	call	80c6c <alt_ic_irq_disable>
   80e18:	e0bfff15 	stw	r2,-4(fp)
   80e1c:	e0bfff17 	ldw	r2,-4(fp)
   80e20:	e0bffa15 	stw	r2,-24(fp)
   80e24:	e0bff817 	ldw	r2,-32(fp)
   80e28:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80e2c:	e0bff617 	ldw	r2,-40(fp)
   80e30:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   80e34:	e0bffa17 	ldw	r2,-24(fp)
}
   80e38:	e037883a 	mov	sp,fp
   80e3c:	dfc00117 	ldw	ra,4(sp)
   80e40:	df000017 	ldw	fp,0(sp)
   80e44:	dec00204 	addi	sp,sp,8
   80e48:	f800283a 	ret

00080e4c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   80e4c:	defff904 	addi	sp,sp,-28
   80e50:	dfc00615 	stw	ra,24(sp)
   80e54:	df000515 	stw	fp,20(sp)
   80e58:	df000504 	addi	fp,sp,20
   80e5c:	e13ffc15 	stw	r4,-16(fp)
   80e60:	e17ffd15 	stw	r5,-12(fp)
   80e64:	e1bffe15 	stw	r6,-8(fp)
   80e68:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   80e6c:	e13ffd17 	ldw	r4,-12(fp)
   80e70:	e17ffe17 	ldw	r5,-8(fp)
   80e74:	e1bfff17 	ldw	r6,-4(fp)
   80e78:	00810640 	call	81064 <open>
   80e7c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   80e80:	e0bffb17 	ldw	r2,-20(fp)
   80e84:	1004803a 	cmplt	r2,r2,zero
   80e88:	10001c1e 	bne	r2,zero,80efc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   80e8c:	e0bffb17 	ldw	r2,-20(fp)
   80e90:	00c00234 	movhi	r3,8
   80e94:	18c6a304 	addi	r3,r3,6796
   80e98:	10800324 	muli	r2,r2,12
   80e9c:	10c5883a 	add	r2,r2,r3
   80ea0:	10c00017 	ldw	r3,0(r2)
   80ea4:	e0bffc17 	ldw	r2,-16(fp)
   80ea8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   80eac:	e0bffb17 	ldw	r2,-20(fp)
   80eb0:	00c00234 	movhi	r3,8
   80eb4:	18c6a304 	addi	r3,r3,6796
   80eb8:	10800324 	muli	r2,r2,12
   80ebc:	10c5883a 	add	r2,r2,r3
   80ec0:	10800104 	addi	r2,r2,4
   80ec4:	10c00017 	ldw	r3,0(r2)
   80ec8:	e0bffc17 	ldw	r2,-16(fp)
   80ecc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   80ed0:	e0bffb17 	ldw	r2,-20(fp)
   80ed4:	00c00234 	movhi	r3,8
   80ed8:	18c6a304 	addi	r3,r3,6796
   80edc:	10800324 	muli	r2,r2,12
   80ee0:	10c5883a 	add	r2,r2,r3
   80ee4:	10800204 	addi	r2,r2,8
   80ee8:	10c00017 	ldw	r3,0(r2)
   80eec:	e0bffc17 	ldw	r2,-16(fp)
   80ef0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   80ef4:	e13ffb17 	ldw	r4,-20(fp)
   80ef8:	008124c0 	call	8124c <alt_release_fd>
  }
} 
   80efc:	e037883a 	mov	sp,fp
   80f00:	dfc00117 	ldw	ra,4(sp)
   80f04:	df000017 	ldw	fp,0(sp)
   80f08:	dec00204 	addi	sp,sp,8
   80f0c:	f800283a 	ret

00080f10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   80f10:	defffb04 	addi	sp,sp,-20
   80f14:	dfc00415 	stw	ra,16(sp)
   80f18:	df000315 	stw	fp,12(sp)
   80f1c:	df000304 	addi	fp,sp,12
   80f20:	e13ffd15 	stw	r4,-12(fp)
   80f24:	e17ffe15 	stw	r5,-8(fp)
   80f28:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   80f2c:	01000234 	movhi	r4,8
   80f30:	2106a604 	addi	r4,r4,6808
   80f34:	e17ffd17 	ldw	r5,-12(fp)
   80f38:	01800044 	movi	r6,1
   80f3c:	01c07fc4 	movi	r7,511
   80f40:	0080e4c0 	call	80e4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   80f44:	01000234 	movhi	r4,8
   80f48:	2106a304 	addi	r4,r4,6796
   80f4c:	e17ffe17 	ldw	r5,-8(fp)
   80f50:	000d883a 	mov	r6,zero
   80f54:	01c07fc4 	movi	r7,511
   80f58:	0080e4c0 	call	80e4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   80f5c:	01000234 	movhi	r4,8
   80f60:	2106a904 	addi	r4,r4,6820
   80f64:	e17fff17 	ldw	r5,-4(fp)
   80f68:	01800044 	movi	r6,1
   80f6c:	01c07fc4 	movi	r7,511
   80f70:	0080e4c0 	call	80e4c <alt_open_fd>
}  
   80f74:	e037883a 	mov	sp,fp
   80f78:	dfc00117 	ldw	ra,4(sp)
   80f7c:	df000017 	ldw	fp,0(sp)
   80f80:	dec00204 	addi	sp,sp,8
   80f84:	f800283a 	ret

00080f88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   80f88:	defffc04 	addi	sp,sp,-16
   80f8c:	df000315 	stw	fp,12(sp)
   80f90:	df000304 	addi	fp,sp,12
   80f94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   80f98:	e0bffe17 	ldw	r2,-8(fp)
   80f9c:	10800217 	ldw	r2,8(r2)
   80fa0:	10d00034 	orhi	r3,r2,16384
   80fa4:	e0bffe17 	ldw	r2,-8(fp)
   80fa8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   80fac:	e03ffd15 	stw	zero,-12(fp)
   80fb0:	00002006 	br	81034 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   80fb4:	e0bffd17 	ldw	r2,-12(fp)
   80fb8:	00c00234 	movhi	r3,8
   80fbc:	18c6a304 	addi	r3,r3,6796
   80fc0:	10800324 	muli	r2,r2,12
   80fc4:	10c5883a 	add	r2,r2,r3
   80fc8:	10c00017 	ldw	r3,0(r2)
   80fcc:	e0bffe17 	ldw	r2,-8(fp)
   80fd0:	10800017 	ldw	r2,0(r2)
   80fd4:	1880141e 	bne	r3,r2,81028 <alt_file_locked+0xa0>
   80fd8:	e0bffd17 	ldw	r2,-12(fp)
   80fdc:	00c00234 	movhi	r3,8
   80fe0:	18c6a304 	addi	r3,r3,6796
   80fe4:	10800324 	muli	r2,r2,12
   80fe8:	10c5883a 	add	r2,r2,r3
   80fec:	10800204 	addi	r2,r2,8
   80ff0:	10800017 	ldw	r2,0(r2)
   80ff4:	1004403a 	cmpge	r2,r2,zero
   80ff8:	10000b1e 	bne	r2,zero,81028 <alt_file_locked+0xa0>
   80ffc:	e0bffd17 	ldw	r2,-12(fp)
   81000:	10800324 	muli	r2,r2,12
   81004:	1007883a 	mov	r3,r2
   81008:	00800234 	movhi	r2,8
   8100c:	1086a304 	addi	r2,r2,6796
   81010:	1887883a 	add	r3,r3,r2
   81014:	e0bffe17 	ldw	r2,-8(fp)
   81018:	18800326 	beq	r3,r2,81028 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8101c:	00bffcc4 	movi	r2,-13
   81020:	e0bfff15 	stw	r2,-4(fp)
   81024:	00000a06 	br	81050 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81028:	e0bffd17 	ldw	r2,-12(fp)
   8102c:	10800044 	addi	r2,r2,1
   81030:	e0bffd15 	stw	r2,-12(fp)
   81034:	00800234 	movhi	r2,8
   81038:	10873f04 	addi	r2,r2,7420
   8103c:	10800017 	ldw	r2,0(r2)
   81040:	1007883a 	mov	r3,r2
   81044:	e0bffd17 	ldw	r2,-12(fp)
   81048:	18bfda2e 	bgeu	r3,r2,80fb4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8104c:	e03fff15 	stw	zero,-4(fp)
   81050:	e0bfff17 	ldw	r2,-4(fp)
}
   81054:	e037883a 	mov	sp,fp
   81058:	df000017 	ldw	fp,0(sp)
   8105c:	dec00104 	addi	sp,sp,4
   81060:	f800283a 	ret

00081064 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   81064:	defff404 	addi	sp,sp,-48
   81068:	dfc00b15 	stw	ra,44(sp)
   8106c:	df000a15 	stw	fp,40(sp)
   81070:	df000a04 	addi	fp,sp,40
   81074:	e13ffb15 	stw	r4,-20(fp)
   81078:	e17ffc15 	stw	r5,-16(fp)
   8107c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   81080:	00bfffc4 	movi	r2,-1
   81084:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   81088:	00bffb44 	movi	r2,-19
   8108c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   81090:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   81094:	e13ffb17 	ldw	r4,-20(fp)
   81098:	01400234 	movhi	r5,8
   8109c:	29473d04 	addi	r5,r5,7412
   810a0:	00814700 	call	81470 <alt_find_dev>
   810a4:	e0bffa15 	stw	r2,-24(fp)
   810a8:	e0bffa17 	ldw	r2,-24(fp)
   810ac:	1004c03a 	cmpne	r2,r2,zero
   810b0:	1000051e 	bne	r2,zero,810c8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   810b4:	e13ffb17 	ldw	r4,-20(fp)
   810b8:	00815040 	call	81504 <alt_find_file>
   810bc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   810c0:	00800044 	movi	r2,1
   810c4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   810c8:	e0bffa17 	ldw	r2,-24(fp)
   810cc:	1005003a 	cmpeq	r2,r2,zero
   810d0:	1000301e 	bne	r2,zero,81194 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   810d4:	e13ffa17 	ldw	r4,-24(fp)
   810d8:	00816240 	call	81624 <alt_get_fd>
   810dc:	e0bff815 	stw	r2,-32(fp)
   810e0:	e0bff817 	ldw	r2,-32(fp)
   810e4:	1004403a 	cmpge	r2,r2,zero
   810e8:	1000031e 	bne	r2,zero,810f8 <open+0x94>
    {
      status = index;
   810ec:	e0bff817 	ldw	r2,-32(fp)
   810f0:	e0bff715 	stw	r2,-36(fp)
   810f4:	00002906 	br	8119c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   810f8:	e0bff817 	ldw	r2,-32(fp)
   810fc:	10800324 	muli	r2,r2,12
   81100:	1007883a 	mov	r3,r2
   81104:	00800234 	movhi	r2,8
   81108:	1086a304 	addi	r2,r2,6796
   8110c:	1885883a 	add	r2,r3,r2
   81110:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   81114:	e0fffc17 	ldw	r3,-16(fp)
   81118:	00900034 	movhi	r2,16384
   8111c:	10bfffc4 	addi	r2,r2,-1
   81120:	1886703a 	and	r3,r3,r2
   81124:	e0bff917 	ldw	r2,-28(fp)
   81128:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8112c:	e0bff617 	ldw	r2,-40(fp)
   81130:	1004c03a 	cmpne	r2,r2,zero
   81134:	1000061e 	bne	r2,zero,81150 <open+0xec>
   81138:	e13ff917 	ldw	r4,-28(fp)
   8113c:	0080f880 	call	80f88 <alt_file_locked>
   81140:	e0bff715 	stw	r2,-36(fp)
   81144:	e0bff717 	ldw	r2,-36(fp)
   81148:	1004803a 	cmplt	r2,r2,zero
   8114c:	1000131e 	bne	r2,zero,8119c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   81150:	e0bffa17 	ldw	r2,-24(fp)
   81154:	10800317 	ldw	r2,12(r2)
   81158:	1005003a 	cmpeq	r2,r2,zero
   8115c:	1000091e 	bne	r2,zero,81184 <open+0x120>
   81160:	e0bffa17 	ldw	r2,-24(fp)
   81164:	10800317 	ldw	r2,12(r2)
   81168:	e13ff917 	ldw	r4,-28(fp)
   8116c:	e17ffb17 	ldw	r5,-20(fp)
   81170:	e1bffc17 	ldw	r6,-16(fp)
   81174:	e1fffd17 	ldw	r7,-12(fp)
   81178:	103ee83a 	callr	r2
   8117c:	e0bfff15 	stw	r2,-4(fp)
   81180:	00000106 	br	81188 <open+0x124>
   81184:	e03fff15 	stw	zero,-4(fp)
   81188:	e0bfff17 	ldw	r2,-4(fp)
   8118c:	e0bff715 	stw	r2,-36(fp)
   81190:	00000206 	br	8119c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   81194:	00bffb44 	movi	r2,-19
   81198:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8119c:	e0bff717 	ldw	r2,-36(fp)
   811a0:	1004403a 	cmpge	r2,r2,zero
   811a4:	1000091e 	bne	r2,zero,811cc <open+0x168>
  {
    alt_release_fd (index);  
   811a8:	e13ff817 	ldw	r4,-32(fp)
   811ac:	008124c0 	call	8124c <alt_release_fd>
    ALT_ERRNO = -status;
   811b0:	00811ec0 	call	811ec <alt_get_errno>
   811b4:	e0fff717 	ldw	r3,-36(fp)
   811b8:	00c7c83a 	sub	r3,zero,r3
   811bc:	10c00015 	stw	r3,0(r2)
    return -1;
   811c0:	00bfffc4 	movi	r2,-1
   811c4:	e0bffe15 	stw	r2,-8(fp)
   811c8:	00000206 	br	811d4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   811cc:	e0bff817 	ldw	r2,-32(fp)
   811d0:	e0bffe15 	stw	r2,-8(fp)
   811d4:	e0bffe17 	ldw	r2,-8(fp)
}
   811d8:	e037883a 	mov	sp,fp
   811dc:	dfc00117 	ldw	ra,4(sp)
   811e0:	df000017 	ldw	fp,0(sp)
   811e4:	dec00204 	addi	sp,sp,8
   811e8:	f800283a 	ret

000811ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   811ec:	defffd04 	addi	sp,sp,-12
   811f0:	dfc00215 	stw	ra,8(sp)
   811f4:	df000115 	stw	fp,4(sp)
   811f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   811fc:	00800234 	movhi	r2,8
   81200:	10874004 	addi	r2,r2,7424
   81204:	10800017 	ldw	r2,0(r2)
   81208:	1005003a 	cmpeq	r2,r2,zero
   8120c:	1000061e 	bne	r2,zero,81228 <alt_get_errno+0x3c>
   81210:	00800234 	movhi	r2,8
   81214:	10874004 	addi	r2,r2,7424
   81218:	10800017 	ldw	r2,0(r2)
   8121c:	103ee83a 	callr	r2
   81220:	e0bfff15 	stw	r2,-4(fp)
   81224:	00000306 	br	81234 <alt_get_errno+0x48>
   81228:	00800234 	movhi	r2,8
   8122c:	10880404 	addi	r2,r2,8208
   81230:	e0bfff15 	stw	r2,-4(fp)
   81234:	e0bfff17 	ldw	r2,-4(fp)
}
   81238:	e037883a 	mov	sp,fp
   8123c:	dfc00117 	ldw	ra,4(sp)
   81240:	df000017 	ldw	fp,0(sp)
   81244:	dec00204 	addi	sp,sp,8
   81248:	f800283a 	ret

0008124c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8124c:	defffe04 	addi	sp,sp,-8
   81250:	df000115 	stw	fp,4(sp)
   81254:	df000104 	addi	fp,sp,4
   81258:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8125c:	e0bfff17 	ldw	r2,-4(fp)
   81260:	108000d0 	cmplti	r2,r2,3
   81264:	10000d1e 	bne	r2,zero,8129c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   81268:	e0bfff17 	ldw	r2,-4(fp)
   8126c:	00c00234 	movhi	r3,8
   81270:	18c6a304 	addi	r3,r3,6796
   81274:	10800324 	muli	r2,r2,12
   81278:	10c5883a 	add	r2,r2,r3
   8127c:	10800204 	addi	r2,r2,8
   81280:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   81284:	e0bfff17 	ldw	r2,-4(fp)
   81288:	00c00234 	movhi	r3,8
   8128c:	18c6a304 	addi	r3,r3,6796
   81290:	10800324 	muli	r2,r2,12
   81294:	10c5883a 	add	r2,r2,r3
   81298:	10000015 	stw	zero,0(r2)
  }
}
   8129c:	e037883a 	mov	sp,fp
   812a0:	df000017 	ldw	fp,0(sp)
   812a4:	dec00104 	addi	sp,sp,4
   812a8:	f800283a 	ret

000812ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   812ac:	defffa04 	addi	sp,sp,-24
   812b0:	df000515 	stw	fp,20(sp)
   812b4:	df000504 	addi	fp,sp,20
   812b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   812bc:	0005303a 	rdctl	r2,status
   812c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   812c4:	e0fffd17 	ldw	r3,-12(fp)
   812c8:	00bfff84 	movi	r2,-2
   812cc:	1884703a 	and	r2,r3,r2
   812d0:	1001703a 	wrctl	status,r2
  
  return context;
   812d4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   812d8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   812dc:	e0bfff17 	ldw	r2,-4(fp)
   812e0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   812e4:	e0bffc17 	ldw	r2,-16(fp)
   812e8:	10c00017 	ldw	r3,0(r2)
   812ec:	e0bffc17 	ldw	r2,-16(fp)
   812f0:	10800117 	ldw	r2,4(r2)
   812f4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   812f8:	e0bffc17 	ldw	r2,-16(fp)
   812fc:	10c00117 	ldw	r3,4(r2)
   81300:	e0bffc17 	ldw	r2,-16(fp)
   81304:	10800017 	ldw	r2,0(r2)
   81308:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8130c:	e0fffc17 	ldw	r3,-16(fp)
   81310:	e0bffc17 	ldw	r2,-16(fp)
   81314:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   81318:	e0fffc17 	ldw	r3,-16(fp)
   8131c:	e0bffc17 	ldw	r2,-16(fp)
   81320:	18800015 	stw	r2,0(r3)
   81324:	e0bffe17 	ldw	r2,-8(fp)
   81328:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8132c:	e0bffb17 	ldw	r2,-20(fp)
   81330:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   81334:	e037883a 	mov	sp,fp
   81338:	df000017 	ldw	fp,0(sp)
   8133c:	dec00104 	addi	sp,sp,4
   81340:	f800283a 	ret

00081344 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   81344:	defffb04 	addi	sp,sp,-20
   81348:	dfc00415 	stw	ra,16(sp)
   8134c:	df000315 	stw	fp,12(sp)
   81350:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   81354:	d0a00717 	ldw	r2,-32740(gp)
   81358:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8135c:	d0a0c817 	ldw	r2,-31968(gp)
   81360:	10800044 	addi	r2,r2,1
   81364:	d0a0c815 	stw	r2,-31968(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81368:	00003106 	br	81430 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8136c:	e0bffe17 	ldw	r2,-8(fp)
   81370:	10800017 	ldw	r2,0(r2)
   81374:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   81378:	e0bffe17 	ldw	r2,-8(fp)
   8137c:	10800403 	ldbu	r2,16(r2)
   81380:	10803fcc 	andi	r2,r2,255
   81384:	1005003a 	cmpeq	r2,r2,zero
   81388:	1000051e 	bne	r2,zero,813a0 <alt_tick+0x5c>
   8138c:	d0a0c817 	ldw	r2,-31968(gp)
   81390:	1004c03a 	cmpne	r2,r2,zero
   81394:	1000021e 	bne	r2,zero,813a0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   81398:	e0bffe17 	ldw	r2,-8(fp)
   8139c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   813a0:	e0bffe17 	ldw	r2,-8(fp)
   813a4:	10c00217 	ldw	r3,8(r2)
   813a8:	d0a0c817 	ldw	r2,-31968(gp)
   813ac:	10c01e36 	bltu	r2,r3,81428 <alt_tick+0xe4>
   813b0:	e0bffe17 	ldw	r2,-8(fp)
   813b4:	10800403 	ldbu	r2,16(r2)
   813b8:	10803fcc 	andi	r2,r2,255
   813bc:	1004c03a 	cmpne	r2,r2,zero
   813c0:	1000191e 	bne	r2,zero,81428 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   813c4:	e0bffe17 	ldw	r2,-8(fp)
   813c8:	10c00317 	ldw	r3,12(r2)
   813cc:	e0bffe17 	ldw	r2,-8(fp)
   813d0:	11000517 	ldw	r4,20(r2)
   813d4:	183ee83a 	callr	r3
   813d8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   813dc:	e0bffd17 	ldw	r2,-12(fp)
   813e0:	1004c03a 	cmpne	r2,r2,zero
   813e4:	1000031e 	bne	r2,zero,813f4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   813e8:	e13ffe17 	ldw	r4,-8(fp)
   813ec:	00812ac0 	call	812ac <alt_alarm_stop>
   813f0:	00000d06 	br	81428 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   813f4:	e0bffe17 	ldw	r2,-8(fp)
   813f8:	10c00217 	ldw	r3,8(r2)
   813fc:	e0bffd17 	ldw	r2,-12(fp)
   81400:	1887883a 	add	r3,r3,r2
   81404:	e0bffe17 	ldw	r2,-8(fp)
   81408:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8140c:	e0bffe17 	ldw	r2,-8(fp)
   81410:	10c00217 	ldw	r3,8(r2)
   81414:	d0a0c817 	ldw	r2,-31968(gp)
   81418:	1880032e 	bgeu	r3,r2,81428 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8141c:	e0fffe17 	ldw	r3,-8(fp)
   81420:	00800044 	movi	r2,1
   81424:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   81428:	e0bfff17 	ldw	r2,-4(fp)
   8142c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81430:	d0e00704 	addi	r3,gp,-32740
   81434:	e0bffe17 	ldw	r2,-8(fp)
   81438:	10ffcc1e 	bne	r2,r3,8136c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8143c:	e037883a 	mov	sp,fp
   81440:	dfc00117 	ldw	ra,4(sp)
   81444:	df000017 	ldw	fp,0(sp)
   81448:	dec00204 	addi	sp,sp,8
   8144c:	f800283a 	ret

00081450 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   81450:	deffff04 	addi	sp,sp,-4
   81454:	df000015 	stw	fp,0(sp)
   81458:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8145c:	000170fa 	wrctl	ienable,zero
}
   81460:	e037883a 	mov	sp,fp
   81464:	df000017 	ldw	fp,0(sp)
   81468:	dec00104 	addi	sp,sp,4
   8146c:	f800283a 	ret

00081470 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   81470:	defff904 	addi	sp,sp,-28
   81474:	dfc00615 	stw	ra,24(sp)
   81478:	df000515 	stw	fp,20(sp)
   8147c:	df000504 	addi	fp,sp,20
   81480:	e13ffd15 	stw	r4,-12(fp)
   81484:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   81488:	e0bffe17 	ldw	r2,-8(fp)
   8148c:	10800017 	ldw	r2,0(r2)
   81490:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   81494:	e13ffd17 	ldw	r4,-12(fp)
   81498:	00817c80 	call	817c8 <strlen>
   8149c:	10800044 	addi	r2,r2,1
   814a0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   814a4:	00000d06 	br	814dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   814a8:	e0bffc17 	ldw	r2,-16(fp)
   814ac:	11000217 	ldw	r4,8(r2)
   814b0:	e1bffb17 	ldw	r6,-20(fp)
   814b4:	e17ffd17 	ldw	r5,-12(fp)
   814b8:	008178c0 	call	8178c <memcmp>
   814bc:	1004c03a 	cmpne	r2,r2,zero
   814c0:	1000031e 	bne	r2,zero,814d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   814c4:	e0bffc17 	ldw	r2,-16(fp)
   814c8:	e0bfff15 	stw	r2,-4(fp)
   814cc:	00000706 	br	814ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   814d0:	e0bffc17 	ldw	r2,-16(fp)
   814d4:	10800017 	ldw	r2,0(r2)
   814d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   814dc:	e0fffe17 	ldw	r3,-8(fp)
   814e0:	e0bffc17 	ldw	r2,-16(fp)
   814e4:	10fff01e 	bne	r2,r3,814a8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   814e8:	e03fff15 	stw	zero,-4(fp)
   814ec:	e0bfff17 	ldw	r2,-4(fp)
}
   814f0:	e037883a 	mov	sp,fp
   814f4:	dfc00117 	ldw	ra,4(sp)
   814f8:	df000017 	ldw	fp,0(sp)
   814fc:	dec00204 	addi	sp,sp,8
   81500:	f800283a 	ret

00081504 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   81504:	defffa04 	addi	sp,sp,-24
   81508:	dfc00515 	stw	ra,20(sp)
   8150c:	df000415 	stw	fp,16(sp)
   81510:	df000404 	addi	fp,sp,16
   81514:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   81518:	00800234 	movhi	r2,8
   8151c:	10873b04 	addi	r2,r2,7404
   81520:	10800017 	ldw	r2,0(r2)
   81524:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81528:	00003306 	br	815f8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8152c:	e0bffd17 	ldw	r2,-12(fp)
   81530:	11000217 	ldw	r4,8(r2)
   81534:	00817c80 	call	817c8 <strlen>
   81538:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8153c:	e0bffd17 	ldw	r2,-12(fp)
   81540:	10c00217 	ldw	r3,8(r2)
   81544:	e0bffc17 	ldw	r2,-16(fp)
   81548:	1885883a 	add	r2,r3,r2
   8154c:	10bfffc4 	addi	r2,r2,-1
   81550:	10800003 	ldbu	r2,0(r2)
   81554:	10803fcc 	andi	r2,r2,255
   81558:	1080201c 	xori	r2,r2,128
   8155c:	10bfe004 	addi	r2,r2,-128
   81560:	10800bd8 	cmpnei	r2,r2,47
   81564:	1000031e 	bne	r2,zero,81574 <alt_find_file+0x70>
    {
      len -= 1;
   81568:	e0bffc17 	ldw	r2,-16(fp)
   8156c:	10bfffc4 	addi	r2,r2,-1
   81570:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81574:	e0bffc17 	ldw	r2,-16(fp)
   81578:	1007883a 	mov	r3,r2
   8157c:	e0bffe17 	ldw	r2,-8(fp)
   81580:	1885883a 	add	r2,r3,r2
   81584:	10800003 	ldbu	r2,0(r2)
   81588:	10803fcc 	andi	r2,r2,255
   8158c:	1080201c 	xori	r2,r2,128
   81590:	10bfe004 	addi	r2,r2,-128
   81594:	10800be0 	cmpeqi	r2,r2,47
   81598:	10000a1e 	bne	r2,zero,815c4 <alt_find_file+0xc0>
   8159c:	e0bffc17 	ldw	r2,-16(fp)
   815a0:	1007883a 	mov	r3,r2
   815a4:	e0bffe17 	ldw	r2,-8(fp)
   815a8:	1885883a 	add	r2,r3,r2
   815ac:	10800003 	ldbu	r2,0(r2)
   815b0:	10803fcc 	andi	r2,r2,255
   815b4:	1080201c 	xori	r2,r2,128
   815b8:	10bfe004 	addi	r2,r2,-128
   815bc:	1004c03a 	cmpne	r2,r2,zero
   815c0:	10000a1e 	bne	r2,zero,815ec <alt_find_file+0xe8>
   815c4:	e0bffd17 	ldw	r2,-12(fp)
   815c8:	11000217 	ldw	r4,8(r2)
   815cc:	e1bffc17 	ldw	r6,-16(fp)
   815d0:	e17ffe17 	ldw	r5,-8(fp)
   815d4:	008178c0 	call	8178c <memcmp>
   815d8:	1004c03a 	cmpne	r2,r2,zero
   815dc:	1000031e 	bne	r2,zero,815ec <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   815e0:	e0bffd17 	ldw	r2,-12(fp)
   815e4:	e0bfff15 	stw	r2,-4(fp)
   815e8:	00000806 	br	8160c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   815ec:	e0bffd17 	ldw	r2,-12(fp)
   815f0:	10800017 	ldw	r2,0(r2)
   815f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   815f8:	00c00234 	movhi	r3,8
   815fc:	18c73b04 	addi	r3,r3,7404
   81600:	e0bffd17 	ldw	r2,-12(fp)
   81604:	10ffc91e 	bne	r2,r3,8152c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   81608:	e03fff15 	stw	zero,-4(fp)
   8160c:	e0bfff17 	ldw	r2,-4(fp)
}
   81610:	e037883a 	mov	sp,fp
   81614:	dfc00117 	ldw	ra,4(sp)
   81618:	df000017 	ldw	fp,0(sp)
   8161c:	dec00204 	addi	sp,sp,8
   81620:	f800283a 	ret

00081624 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   81624:	defffc04 	addi	sp,sp,-16
   81628:	df000315 	stw	fp,12(sp)
   8162c:	df000304 	addi	fp,sp,12
   81630:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   81634:	00bffa04 	movi	r2,-24
   81638:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8163c:	e03ffe15 	stw	zero,-8(fp)
   81640:	00001e06 	br	816bc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   81644:	e0bffe17 	ldw	r2,-8(fp)
   81648:	00c00234 	movhi	r3,8
   8164c:	18c6a304 	addi	r3,r3,6796
   81650:	10800324 	muli	r2,r2,12
   81654:	10c5883a 	add	r2,r2,r3
   81658:	10800017 	ldw	r2,0(r2)
   8165c:	1004c03a 	cmpne	r2,r2,zero
   81660:	1000131e 	bne	r2,zero,816b0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   81664:	e0bffe17 	ldw	r2,-8(fp)
   81668:	00c00234 	movhi	r3,8
   8166c:	18c6a304 	addi	r3,r3,6796
   81670:	10800324 	muli	r2,r2,12
   81674:	10c7883a 	add	r3,r2,r3
   81678:	e0bfff17 	ldw	r2,-4(fp)
   8167c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   81680:	00800234 	movhi	r2,8
   81684:	10873f04 	addi	r2,r2,7420
   81688:	10c00017 	ldw	r3,0(r2)
   8168c:	e0bffe17 	ldw	r2,-8(fp)
   81690:	1880040e 	bge	r3,r2,816a4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   81694:	00c00234 	movhi	r3,8
   81698:	18c73f04 	addi	r3,r3,7420
   8169c:	e0bffe17 	ldw	r2,-8(fp)
   816a0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   816a4:	e0bffe17 	ldw	r2,-8(fp)
   816a8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   816ac:	00000606 	br	816c8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   816b0:	e0bffe17 	ldw	r2,-8(fp)
   816b4:	10800044 	addi	r2,r2,1
   816b8:	e0bffe15 	stw	r2,-8(fp)
   816bc:	e0bffe17 	ldw	r2,-8(fp)
   816c0:	10800810 	cmplti	r2,r2,32
   816c4:	103fdf1e 	bne	r2,zero,81644 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   816c8:	e0bffd17 	ldw	r2,-12(fp)
}
   816cc:	e037883a 	mov	sp,fp
   816d0:	df000017 	ldw	fp,0(sp)
   816d4:	dec00104 	addi	sp,sp,4
   816d8:	f800283a 	ret

000816dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   816dc:	defffb04 	addi	sp,sp,-20
   816e0:	df000415 	stw	fp,16(sp)
   816e4:	df000404 	addi	fp,sp,16
   816e8:	e13ffe15 	stw	r4,-8(fp)
   816ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   816f0:	e0bfff17 	ldw	r2,-4(fp)
   816f4:	10820070 	cmpltui	r2,r2,2049
   816f8:	1000021e 	bne	r2,zero,81704 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   816fc:	00820004 	movi	r2,2048
   81700:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   81704:	e0fffe17 	ldw	r3,-8(fp)
   81708:	e0bfff17 	ldw	r2,-4(fp)
   8170c:	1885883a 	add	r2,r3,r2
   81710:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   81714:	e0bffe17 	ldw	r2,-8(fp)
   81718:	e0bffd15 	stw	r2,-12(fp)
   8171c:	00000506 	br	81734 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   81720:	e0bffd17 	ldw	r2,-12(fp)
   81724:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   81728:	e0bffd17 	ldw	r2,-12(fp)
   8172c:	10800804 	addi	r2,r2,32
   81730:	e0bffd15 	stw	r2,-12(fp)
   81734:	e0fffd17 	ldw	r3,-12(fp)
   81738:	e0bffc17 	ldw	r2,-16(fp)
   8173c:	18bff836 	bltu	r3,r2,81720 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   81740:	e0bffe17 	ldw	r2,-8(fp)
   81744:	108007cc 	andi	r2,r2,31
   81748:	1005003a 	cmpeq	r2,r2,zero
   8174c:	1000021e 	bne	r2,zero,81758 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   81750:	e0bffd17 	ldw	r2,-12(fp)
   81754:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   81758:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8175c:	e037883a 	mov	sp,fp
   81760:	df000017 	ldw	fp,0(sp)
   81764:	dec00104 	addi	sp,sp,4
   81768:	f800283a 	ret

0008176c <exit>:
   8176c:	defffe04 	addi	sp,sp,-8
   81770:	dc400015 	stw	r17,0(sp)
   81774:	000b883a 	mov	r5,zero
   81778:	2023883a 	mov	r17,r4
   8177c:	dfc00115 	stw	ra,4(sp)
   81780:	00817ec0 	call	817ec <__call_exitprocs>
   81784:	8809883a 	mov	r4,r17
   81788:	00819e80 	call	819e8 <_exit>

0008178c <memcmp>:
   8178c:	31ffffc4 	addi	r7,r6,-1
   81790:	3000061e 	bne	r6,zero,817ac <memcmp+0x20>
   81794:	00000a06 	br	817c0 <memcmp+0x34>
   81798:	39ffffc4 	addi	r7,r7,-1
   8179c:	00bfffc4 	movi	r2,-1
   817a0:	21000044 	addi	r4,r4,1
   817a4:	29400044 	addi	r5,r5,1
   817a8:	38800526 	beq	r7,r2,817c0 <memcmp+0x34>
   817ac:	20c00003 	ldbu	r3,0(r4)
   817b0:	28800003 	ldbu	r2,0(r5)
   817b4:	18bff826 	beq	r3,r2,81798 <memcmp+0xc>
   817b8:	1885c83a 	sub	r2,r3,r2
   817bc:	f800283a 	ret
   817c0:	0005883a 	mov	r2,zero
   817c4:	f800283a 	ret

000817c8 <strlen>:
   817c8:	20800007 	ldb	r2,0(r4)
   817cc:	10000526 	beq	r2,zero,817e4 <strlen+0x1c>
   817d0:	2007883a 	mov	r3,r4
   817d4:	18c00044 	addi	r3,r3,1
   817d8:	18800007 	ldb	r2,0(r3)
   817dc:	103ffd1e 	bne	r2,zero,817d4 <strlen+0xc>
   817e0:	1905c83a 	sub	r2,r3,r4
   817e4:	f800283a 	ret

000817e8 <register_fini>:
   817e8:	f800283a 	ret

000817ec <__call_exitprocs>:
   817ec:	defff304 	addi	sp,sp,-52
   817f0:	00800234 	movhi	r2,8
   817f4:	10874504 	addi	r2,r2,7444
   817f8:	df000b15 	stw	fp,44(sp)
   817fc:	17000017 	ldw	fp,0(r2)
   81800:	00800034 	movhi	r2,0
   81804:	10800004 	addi	r2,r2,0
   81808:	1005003a 	cmpeq	r2,r2,zero
   8180c:	d8800215 	stw	r2,8(sp)
   81810:	e0800c04 	addi	r2,fp,48
   81814:	dd800915 	stw	r22,36(sp)
   81818:	dd400815 	stw	r21,32(sp)
   8181c:	dfc00c15 	stw	ra,48(sp)
   81820:	ddc00a15 	stw	r23,40(sp)
   81824:	dd000715 	stw	r20,28(sp)
   81828:	dcc00615 	stw	r19,24(sp)
   8182c:	dc800515 	stw	r18,20(sp)
   81830:	dc400415 	stw	r17,16(sp)
   81834:	dc000315 	stw	r16,12(sp)
   81838:	282d883a 	mov	r22,r5
   8183c:	d9000115 	stw	r4,4(sp)
   81840:	d8800015 	stw	r2,0(sp)
   81844:	282b003a 	cmpeq	r21,r5,zero
   81848:	e4400c17 	ldw	r17,48(fp)
   8184c:	88001226 	beq	r17,zero,81898 <__call_exitprocs+0xac>
   81850:	ddc00017 	ldw	r23,0(sp)
   81854:	88800117 	ldw	r2,4(r17)
   81858:	8c802217 	ldw	r18,136(r17)
   8185c:	143fffc4 	addi	r16,r2,-1
   81860:	80000b16 	blt	r16,zero,81890 <__call_exitprocs+0xa4>
   81864:	9027003a 	cmpeq	r19,r18,zero
   81868:	a800171e 	bne	r21,zero,818c8 <__call_exitprocs+0xdc>
   8186c:	9800051e 	bne	r19,zero,81884 <__call_exitprocs+0x98>
   81870:	8409883a 	add	r4,r16,r16
   81874:	2105883a 	add	r2,r4,r4
   81878:	1485883a 	add	r2,r2,r18
   8187c:	10c02017 	ldw	r3,128(r2)
   81880:	b0c01226 	beq	r22,r3,818cc <__call_exitprocs+0xe0>
   81884:	843fffc4 	addi	r16,r16,-1
   81888:	00bfffc4 	movi	r2,-1
   8188c:	80bff61e 	bne	r16,r2,81868 <__call_exitprocs+0x7c>
   81890:	d8800217 	ldw	r2,8(sp)
   81894:	10003226 	beq	r2,zero,81960 <__call_exitprocs+0x174>
   81898:	dfc00c17 	ldw	ra,48(sp)
   8189c:	df000b17 	ldw	fp,44(sp)
   818a0:	ddc00a17 	ldw	r23,40(sp)
   818a4:	dd800917 	ldw	r22,36(sp)
   818a8:	dd400817 	ldw	r21,32(sp)
   818ac:	dd000717 	ldw	r20,28(sp)
   818b0:	dcc00617 	ldw	r19,24(sp)
   818b4:	dc800517 	ldw	r18,20(sp)
   818b8:	dc400417 	ldw	r17,16(sp)
   818bc:	dc000317 	ldw	r16,12(sp)
   818c0:	dec00d04 	addi	sp,sp,52
   818c4:	f800283a 	ret
   818c8:	8409883a 	add	r4,r16,r16
   818cc:	88c00117 	ldw	r3,4(r17)
   818d0:	2105883a 	add	r2,r4,r4
   818d4:	1445883a 	add	r2,r2,r17
   818d8:	18ffffc4 	addi	r3,r3,-1
   818dc:	11800217 	ldw	r6,8(r2)
   818e0:	1c001826 	beq	r3,r16,81944 <__call_exitprocs+0x158>
   818e4:	10000215 	stw	zero,8(r2)
   818e8:	303fe626 	beq	r6,zero,81884 <__call_exitprocs+0x98>
   818ec:	8d000117 	ldw	r20,4(r17)
   818f0:	9800121e 	bne	r19,zero,8193c <__call_exitprocs+0x150>
   818f4:	00c00044 	movi	r3,1
   818f8:	1c06983a 	sll	r3,r3,r16
   818fc:	90804017 	ldw	r2,256(r18)
   81900:	1884703a 	and	r2,r3,r2
   81904:	10000d26 	beq	r2,zero,8193c <__call_exitprocs+0x150>
   81908:	90804117 	ldw	r2,260(r18)
   8190c:	1884703a 	and	r2,r3,r2
   81910:	10000e1e 	bne	r2,zero,8194c <__call_exitprocs+0x160>
   81914:	2105883a 	add	r2,r4,r4
   81918:	1485883a 	add	r2,r2,r18
   8191c:	11400017 	ldw	r5,0(r2)
   81920:	d9000117 	ldw	r4,4(sp)
   81924:	303ee83a 	callr	r6
   81928:	88800117 	ldw	r2,4(r17)
   8192c:	a0bfc61e 	bne	r20,r2,81848 <__call_exitprocs+0x5c>
   81930:	b8800017 	ldw	r2,0(r23)
   81934:	147fd326 	beq	r2,r17,81884 <__call_exitprocs+0x98>
   81938:	003fc306 	br	81848 <__call_exitprocs+0x5c>
   8193c:	303ee83a 	callr	r6
   81940:	003ff906 	br	81928 <__call_exitprocs+0x13c>
   81944:	8c000115 	stw	r16,4(r17)
   81948:	003fe706 	br	818e8 <__call_exitprocs+0xfc>
   8194c:	2105883a 	add	r2,r4,r4
   81950:	1485883a 	add	r2,r2,r18
   81954:	11000017 	ldw	r4,0(r2)
   81958:	303ee83a 	callr	r6
   8195c:	003ff206 	br	81928 <__call_exitprocs+0x13c>
   81960:	88800117 	ldw	r2,4(r17)
   81964:	10000b1e 	bne	r2,zero,81994 <__call_exitprocs+0x1a8>
   81968:	89000017 	ldw	r4,0(r17)
   8196c:	20000a26 	beq	r4,zero,81998 <__call_exitprocs+0x1ac>
   81970:	b9000015 	stw	r4,0(r23)
   81974:	90000226 	beq	r18,zero,81980 <__call_exitprocs+0x194>
   81978:	9009883a 	mov	r4,r18
   8197c:	00000000 	call	0 <__reset-0x80000>
   81980:	8809883a 	mov	r4,r17
   81984:	00000000 	call	0 <__reset-0x80000>
   81988:	bc400017 	ldw	r17,0(r23)
   8198c:	883fb11e 	bne	r17,zero,81854 <__call_exitprocs+0x68>
   81990:	003fc106 	br	81898 <__call_exitprocs+0xac>
   81994:	89000017 	ldw	r4,0(r17)
   81998:	882f883a 	mov	r23,r17
   8199c:	2023883a 	mov	r17,r4
   819a0:	883fac1e 	bne	r17,zero,81854 <__call_exitprocs+0x68>
   819a4:	003fbc06 	br	81898 <__call_exitprocs+0xac>

000819a8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   819a8:	defffd04 	addi	sp,sp,-12
   819ac:	df000215 	stw	fp,8(sp)
   819b0:	df000204 	addi	fp,sp,8
   819b4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   819b8:	e0bfff17 	ldw	r2,-4(fp)
   819bc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   819c0:	e0bffe17 	ldw	r2,-8(fp)
   819c4:	1005003a 	cmpeq	r2,r2,zero
   819c8:	1000021e 	bne	r2,zero,819d4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   819cc:	002af070 	cmpltui	zero,zero,43969
   819d0:	00000106 	br	819d8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   819d4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   819d8:	e037883a 	mov	sp,fp
   819dc:	df000017 	ldw	fp,0(sp)
   819e0:	dec00104 	addi	sp,sp,4
   819e4:	f800283a 	ret

000819e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   819e8:	defffd04 	addi	sp,sp,-12
   819ec:	dfc00215 	stw	ra,8(sp)
   819f0:	df000115 	stw	fp,4(sp)
   819f4:	df000104 	addi	fp,sp,4
   819f8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   819fc:	e13fff17 	ldw	r4,-4(fp)
   81a00:	00819a80 	call	819a8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   81a04:	003fff06 	br	81a04 <_exit+0x1c>
   81a08:	000817e8 	cmpgeui	zero,zero,8287
