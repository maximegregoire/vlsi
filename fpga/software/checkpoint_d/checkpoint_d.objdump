
checkpoint_d.elf:     file format elf32-littlenios2
checkpoint_d.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000194

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x08000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x08000194 paddr 0x08000194 align 2**12
         filesz 0x00001788 memsz 0x00001788 flags r-x
    LOAD off    0x0000391c vaddr 0x0800191c paddr 0x08001bfc align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003edc vaddr 0x08001edc paddr 0x08001edc align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  08000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000175c  08000194  08000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  080018f0  080018f0  000038f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0800191c  08001bfc  0000391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  08001edc  08001edc  00003edc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000458  00000000  00000000  00003c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000646  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006bfa  00000000  00000000  000046be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a11  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004e6a  00000000  00000000  0000ccc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000006d4  00000000  00000000  00011b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000875  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000096f  00000000  00000000  00012a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000133ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00013410  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00014c1f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00014c22  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00014c25  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00014c26  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00014c27  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00014c2b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00014c2f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00014c33  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00014c3c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00014c45  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00014c4e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  00014c60  2**0
                  CONTENTS, READONLY
 29 .jdi          000056a0  00000000  00000000  00014c7a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000477c8  00000000  00000000  0001a31a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
08000194 l    d  .text	00000000 .text
080018f0 l    d  .rodata	00000000 .rodata
0800191c l    d  .rwdata	00000000 .rwdata
08001edc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
080001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 checkpoint.c
00000000 l    df *ABS*	00000000 alt_load.c
080002ac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800191c l     O .rwdata	0000002c jtag_uart
080003ec l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800067c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
08000878 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080008f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080009d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08000d30 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08000e6c l     F .text	000000dc alt_file_locked
080010d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080016cc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
08001af0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 alt_exit.c
0800188c l     F .text	00000040 alt_sim_halt
08000318 g     F .text	0000005c alt_main
08001ef8 g     O .bss	00000100 alt_irq
08001bfc g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
08000000 g       *ABS*	00000000 __flash_exceptions_start
08001ef4 g     O .bss	00000004 errno
08001ee0 g     O .bss	00000004 alt_argv
08009bd0 g       *ABS*	00000000 _gp
08001970 g     O .rwdata	00000180 alt_fd_list
08001354 g     F .text	00000094 alt_find_dev
08000df4 g     F .text	00000078 alt_io_redirect
080004d4 g     F .text	00000104 altera_avalon_jtag_uart_read
080015c0 g     F .text	00000090 alt_icache_flush
08001be0 g     O .rwdata	00000004 alt_max_fd
08001bf8 g     O .rwdata	00000004 _global_impure_ptr
08001ff8 g       *ABS*	00000000 __bss_end
08000c38 g     F .text	000000f8 alt_iic_isr_register
08001228 g     F .text	0000010c alt_tick
08000bf0 g     F .text	00000048 alt_ic_irq_enabled
08001190 g     F .text	00000098 alt_alarm_stop
08001ee8 g     O .bss	00000004 alt_irq_active
00080000 g       *ABS*	00000000 __alt_mem_onchip_mem
000800ec g     F .exceptions	000000c8 alt_irq_handler
08001948 g     O .rwdata	00000028 alt_dev_null
080008d8 g     F .text	0000001c alt_dcache_flush_all
08001bfc g       *ABS*	00000000 __ram_rwdata_end
08001bd8 g     O .rwdata	00000008 alt_dev_list
0800191c g       *ABS*	00000000 __ram_rodata_end
08001ff8 g       *ABS*	00000000 end
08800000 g       *ABS*	00000000 __alt_stack_pointer
080006ec g     F .text	00000090 alt_avalon_timer_sc_init
080005d8 g     F .text	000000a4 altera_avalon_jtag_uart_write
080016d0 g     F .text	000001bc __call_exitprocs
08000194 g     F .text	0000003c _start
08001eec g     O .bss	00000004 _alt_tick_rate
08001ef0 g     O .bss	00000004 _alt_nticks
080003a8 g     F .text	00000044 alt_sys_init
0800191c g       *ABS*	00000000 __ram_rwdata_start
080018f0 g       *ABS*	00000000 __ram_rodata_start
08000424 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
08001508 g     F .text	000000b8 alt_get_fd
08001670 g     F .text	0000003c memcmp
08001ff8 g       *ABS*	00000000 __alt_stack_base
080013e8 g     F .text	00000120 alt_find_file
08000920 g     F .text	000000b4 alt_dev_llist_insert
08001edc g       *ABS*	00000000 __bss_start
080001d0 g     F .text	0000005c main
08001ee4 g     O .bss	00000004 alt_envp
0800047c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
08001be4 g     O .rwdata	00000004 alt_errno
080018f0 g       *ABS*	00000000 __flash_rodata_start
08000374 g     F .text	00000034 alt_irq_init
08001130 g     F .text	00000060 alt_release_fd
08001bf4 g     O .rwdata	00000004 _impure_ptr
08001edc g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
08001bd0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08000a64 g     F .text	00000050 alt_ic_isr_register
08001bfc g       *ABS*	00000000 _edata
08001ff8 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
08000b50 g     F .text	000000a0 alt_ic_irq_disable
08001334 g     F .text	00000020 altera_nios2_qsys_irq_init
08001650 g     F .text	00000020 exit
08800000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
080018cc g     F .text	00000020 _exit
080016ac g     F .text	00000020 strlen
08000f48 g     F .text	00000188 open
08000a34 g     F .text	00000030 alt_icache_flush_all
08001be8 g     O .rwdata	00000004 alt_priority_mask
08000ab4 g     F .text	0000009c alt_ic_irq_enable
08001bec g     O .rwdata	00000008 alt_alarm_list
0800077c g     F .text	000000fc close
0800022c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   80014:	08406514 	ori	at,at,404
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c20034 	movhi	r3,2048
   80134:	18c7be04 	addi	r3,r3,7928
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c20034 	movhi	r3,2048
   8014c:	18c7be04 	addi	r3,r3,7928
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

08000194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000194:	06c22034 	movhi	sp,2176
    ori sp, sp, %lo(__alt_stack_pointer)
 8000198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 800019c:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 80001a0:	d6a6f414 	ori	gp,gp,39888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001a4:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001a8:	1087b714 	ori	r2,r2,7900

    movhi r3, %hi(__bss_end)
 80001ac:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001b0:	18c7fe14 	ori	r3,r3,8184

    beq r2, r3, 1f
 80001b4:	10c00326 	beq	r2,r3,80001c4 <_start+0x30>

0:
    stw zero, (r2)
 80001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001c0:	10fffd36 	bltu	r2,r3,80001b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001c4:	800022c0 	call	800022c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001c8:	80003180 	call	8000318 <alt_main>

080001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001cc:	003fff06 	br	80001cc <alt_after_alt_main>

080001d0 <main>:
#define CHECK_BIT(var,pos) 	((var) & (1<<(pos)))
#define SET_BIT(var,pos) 	(var |= (1U << pos))
#define CLEAR_BIT(var,pos) 	(var &= ~(1U << (pos)))

int main()
{
 80001d0:	defffd04 	addi	sp,sp,-12
 80001d4:	df000215 	stw	fp,8(sp)
 80001d8:	df000204 	addi	fp,sp,8
	int readdata = 0;
 80001dc:	e03fff15 	stw	zero,-4(fp)
	int offset = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)

	IOWR_16DIRECT(NEW_SDRAM_CONTROLLER_0_BASE, offset, 0xCAFE);
 80001e4:	e0bffe17 	ldw	r2,-8(fp)
 80001e8:	1007883a 	mov	r3,r2
 80001ec:	00820034 	movhi	r2,2048
 80001f0:	1885883a 	add	r2,r3,r2
 80001f4:	1007883a 	mov	r3,r2
 80001f8:	00b2bf94 	movui	r2,51966
 80001fc:	1880002d 	sthio	r2,0(r3)

	readdata = IORD_16DIRECT(NEW_SDRAM_CONTROLLER_0_BASE, offset);
 8000200:	e0bffe17 	ldw	r2,-8(fp)
 8000204:	1007883a 	mov	r3,r2
 8000208:	00820034 	movhi	r2,2048
 800020c:	1885883a 	add	r2,r3,r2
 8000210:	1080002b 	ldhuio	r2,0(r2)
 8000214:	e0bfff15 	stw	r2,-4(fp)

	//offset++;


	return 0;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	df000017 	ldw	fp,0(sp)
 8000224:	dec00104 	addi	sp,sp,4
 8000228:	f800283a 	ret

0800022c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800022c:	defffe04 	addi	sp,sp,-8
 8000230:	dfc00115 	stw	ra,4(sp)
 8000234:	df000015 	stw	fp,0(sp)
 8000238:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800023c:	01020034 	movhi	r4,2048
 8000240:	2106ff04 	addi	r4,r4,7164
 8000244:	01420034 	movhi	r5,2048
 8000248:	29464704 	addi	r5,r5,6428
 800024c:	01820034 	movhi	r6,2048
 8000250:	3186ff04 	addi	r6,r6,7164
 8000254:	80002ac0 	call	80002ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8000258:	01020034 	movhi	r4,2048
 800025c:	21000004 	addi	r4,r4,0
 8000260:	01400234 	movhi	r5,8
 8000264:	29400804 	addi	r5,r5,32
 8000268:	01800234 	movhi	r6,8
 800026c:	31806d04 	addi	r6,r6,436
 8000270:	80002ac0 	call	80002ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8000274:	01020034 	movhi	r4,2048
 8000278:	21063c04 	addi	r4,r4,6384
 800027c:	01420034 	movhi	r5,2048
 8000280:	29463c04 	addi	r5,r5,6384
 8000284:	01820034 	movhi	r6,2048
 8000288:	31864704 	addi	r6,r6,6428
 800028c:	80002ac0 	call	80002ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8000290:	80008d80 	call	80008d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8000294:	8000a340 	call	8000a34 <alt_icache_flush_all>
}
 8000298:	e037883a 	mov	sp,fp
 800029c:	dfc00117 	ldw	ra,4(sp)
 80002a0:	df000017 	ldw	fp,0(sp)
 80002a4:	dec00204 	addi	sp,sp,8
 80002a8:	f800283a 	ret

080002ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80002ac:	defffc04 	addi	sp,sp,-16
 80002b0:	df000315 	stw	fp,12(sp)
 80002b4:	df000304 	addi	fp,sp,12
 80002b8:	e13ffd15 	stw	r4,-12(fp)
 80002bc:	e17ffe15 	stw	r5,-8(fp)
 80002c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80002c4:	e0fffe17 	ldw	r3,-8(fp)
 80002c8:	e0bffd17 	ldw	r2,-12(fp)
 80002cc:	18800e26 	beq	r3,r2,8000308 <alt_load_section+0x5c>
  {
    while( to != end )
 80002d0:	00000a06 	br	80002fc <alt_load_section+0x50>
    {
      *to++ = *from++;
 80002d4:	e0bffd17 	ldw	r2,-12(fp)
 80002d8:	10c00017 	ldw	r3,0(r2)
 80002dc:	e0bffe17 	ldw	r2,-8(fp)
 80002e0:	10c00015 	stw	r3,0(r2)
 80002e4:	e0bffe17 	ldw	r2,-8(fp)
 80002e8:	10800104 	addi	r2,r2,4
 80002ec:	e0bffe15 	stw	r2,-8(fp)
 80002f0:	e0bffd17 	ldw	r2,-12(fp)
 80002f4:	10800104 	addi	r2,r2,4
 80002f8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80002fc:	e0fffe17 	ldw	r3,-8(fp)
 8000300:	e0bfff17 	ldw	r2,-4(fp)
 8000304:	18bff31e 	bne	r3,r2,80002d4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8000308:	e037883a 	mov	sp,fp
 800030c:	df000017 	ldw	fp,0(sp)
 8000310:	dec00104 	addi	sp,sp,4
 8000314:	f800283a 	ret

08000318 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000318:	defffd04 	addi	sp,sp,-12
 800031c:	dfc00215 	stw	ra,8(sp)
 8000320:	df000115 	stw	fp,4(sp)
 8000324:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000328:	0009883a 	mov	r4,zero
 800032c:	80003740 	call	8000374 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000330:	80003a80 	call	80003a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8000334:	01020034 	movhi	r4,2048
 8000338:	21063c04 	addi	r4,r4,6384
 800033c:	01420034 	movhi	r5,2048
 8000340:	29463c04 	addi	r5,r5,6384
 8000344:	01820034 	movhi	r6,2048
 8000348:	31863c04 	addi	r6,r6,6384
 800034c:	8000df40 	call	8000df4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8000350:	d120c317 	ldw	r4,-31988(gp)
 8000354:	d160c417 	ldw	r5,-31984(gp)
 8000358:	d1a0c517 	ldw	r6,-31980(gp)
 800035c:	80001d00 	call	80001d0 <main>
 8000360:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8000364:	01000044 	movi	r4,1
 8000368:	800077c0 	call	800077c <close>
  exit (result);
 800036c:	e13fff17 	ldw	r4,-4(fp)
 8000370:	80016500 	call	8001650 <exit>

08000374 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8000374:	defffd04 	addi	sp,sp,-12
 8000378:	dfc00215 	stw	ra,8(sp)
 800037c:	df000115 	stw	fp,4(sp)
 8000380:	df000104 	addi	fp,sp,4
 8000384:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 8000388:	80013340 	call	8001334 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800038c:	00800044 	movi	r2,1
 8000390:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000394:	e037883a 	mov	sp,fp
 8000398:	dfc00117 	ldw	ra,4(sp)
 800039c:	df000017 	ldw	fp,0(sp)
 80003a0:	dec00204 	addi	sp,sp,8
 80003a4:	f800283a 	ret

080003a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80003a8:	defffe04 	addi	sp,sp,-8
 80003ac:	dfc00115 	stw	ra,4(sp)
 80003b0:	df000015 	stw	fp,0(sp)
 80003b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 80003b8:	01001804 	movi	r4,96
 80003bc:	000b883a 	mov	r5,zero
 80003c0:	01800044 	movi	r6,1
 80003c4:	01c0fa04 	movi	r7,1000
 80003c8:	80006ec0 	call	80006ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 80003cc:	01020034 	movhi	r4,2048
 80003d0:	21064704 	addi	r4,r4,6428
 80003d4:	80003ec0 	call	80003ec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
 80003d8:	e037883a 	mov	sp,fp
 80003dc:	dfc00117 	ldw	ra,4(sp)
 80003e0:	df000017 	ldw	fp,0(sp)
 80003e4:	dec00204 	addi	sp,sp,8
 80003e8:	f800283a 	ret

080003ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80003ec:	defffd04 	addi	sp,sp,-12
 80003f0:	dfc00215 	stw	ra,8(sp)
 80003f4:	df000115 	stw	fp,4(sp)
 80003f8:	df000104 	addi	fp,sp,4
 80003fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8000400:	e13fff17 	ldw	r4,-4(fp)
 8000404:	01420034 	movhi	r5,2048
 8000408:	2946f604 	addi	r5,r5,7128
 800040c:	80009200 	call	8000920 <alt_dev_llist_insert>
}
 8000410:	e037883a 	mov	sp,fp
 8000414:	dfc00117 	ldw	ra,4(sp)
 8000418:	df000017 	ldw	fp,0(sp)
 800041c:	dec00204 	addi	sp,sp,8
 8000420:	f800283a 	ret

08000424 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8000424:	defffa04 	addi	sp,sp,-24
 8000428:	dfc00515 	stw	ra,20(sp)
 800042c:	df000415 	stw	fp,16(sp)
 8000430:	df000404 	addi	fp,sp,16
 8000434:	e13ffd15 	stw	r4,-12(fp)
 8000438:	e17ffe15 	stw	r5,-8(fp)
 800043c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000440:	e0bffd17 	ldw	r2,-12(fp)
 8000444:	10800017 	ldw	r2,0(r2)
 8000448:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800044c:	e0bffc17 	ldw	r2,-16(fp)
 8000450:	11000a04 	addi	r4,r2,40
 8000454:	e0bffd17 	ldw	r2,-12(fp)
 8000458:	11c00217 	ldw	r7,8(r2)
 800045c:	e17ffe17 	ldw	r5,-8(fp)
 8000460:	e1bfff17 	ldw	r6,-4(fp)
 8000464:	80004d40 	call	80004d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8000468:	e037883a 	mov	sp,fp
 800046c:	dfc00117 	ldw	ra,4(sp)
 8000470:	df000017 	ldw	fp,0(sp)
 8000474:	dec00204 	addi	sp,sp,8
 8000478:	f800283a 	ret

0800047c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800047c:	defffa04 	addi	sp,sp,-24
 8000480:	dfc00515 	stw	ra,20(sp)
 8000484:	df000415 	stw	fp,16(sp)
 8000488:	df000404 	addi	fp,sp,16
 800048c:	e13ffd15 	stw	r4,-12(fp)
 8000490:	e17ffe15 	stw	r5,-8(fp)
 8000494:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000498:	e0bffd17 	ldw	r2,-12(fp)
 800049c:	10800017 	ldw	r2,0(r2)
 80004a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80004a4:	e0bffc17 	ldw	r2,-16(fp)
 80004a8:	11000a04 	addi	r4,r2,40
 80004ac:	e0bffd17 	ldw	r2,-12(fp)
 80004b0:	11c00217 	ldw	r7,8(r2)
 80004b4:	e17ffe17 	ldw	r5,-8(fp)
 80004b8:	e1bfff17 	ldw	r6,-4(fp)
 80004bc:	80005d80 	call	80005d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80004c0:	e037883a 	mov	sp,fp
 80004c4:	dfc00117 	ldw	ra,4(sp)
 80004c8:	df000017 	ldw	fp,0(sp)
 80004cc:	dec00204 	addi	sp,sp,8
 80004d0:	f800283a 	ret

080004d4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 80004d4:	defff604 	addi	sp,sp,-40
 80004d8:	df000915 	stw	fp,36(sp)
 80004dc:	df000904 	addi	fp,sp,36
 80004e0:	e13ffb15 	stw	r4,-20(fp)
 80004e4:	e17ffc15 	stw	r5,-16(fp)
 80004e8:	e1bffd15 	stw	r6,-12(fp)
 80004ec:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 80004f0:	e0bffb17 	ldw	r2,-20(fp)
 80004f4:	10800017 	ldw	r2,0(r2)
 80004f8:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 80004fc:	e0bffc17 	ldw	r2,-16(fp)
 8000500:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 8000504:	e0bffd17 	ldw	r2,-12(fp)
 8000508:	1007883a 	mov	r3,r2
 800050c:	e0bffc17 	ldw	r2,-16(fp)
 8000510:	10c5883a 	add	r2,r2,r3
 8000514:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 8000518:	00001606 	br	8000574 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800051c:	e0bffa17 	ldw	r2,-24(fp)
 8000520:	10800037 	ldwio	r2,0(r2)
 8000524:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 8000528:	e0bff717 	ldw	r2,-36(fp)
 800052c:	10a0000c 	andi	r2,r2,32768
 8000530:	1005003a 	cmpeq	r2,r2,zero
 8000534:	1000081e 	bne	r2,zero,8000558 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8000538:	e0bff717 	ldw	r2,-36(fp)
 800053c:	1007883a 	mov	r3,r2
 8000540:	e0bff917 	ldw	r2,-28(fp)
 8000544:	10c00005 	stb	r3,0(r2)
 8000548:	e0bff917 	ldw	r2,-28(fp)
 800054c:	10800044 	addi	r2,r2,1
 8000550:	e0bff915 	stw	r2,-28(fp)
 8000554:	00000706 	br	8000574 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 8000558:	e0fff917 	ldw	r3,-28(fp)
 800055c:	e0bffc17 	ldw	r2,-16(fp)
 8000560:	1880071e 	bne	r3,r2,8000580 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 8000564:	e0bffe17 	ldw	r2,-8(fp)
 8000568:	1090000c 	andi	r2,r2,16384
 800056c:	1004c03a 	cmpne	r2,r2,zero
 8000570:	1000031e 	bne	r2,zero,8000580 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 8000574:	e0fff917 	ldw	r3,-28(fp)
 8000578:	e0bff817 	ldw	r2,-32(fp)
 800057c:	18bfe736 	bltu	r3,r2,800051c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 8000580:	e0fff917 	ldw	r3,-28(fp)
 8000584:	e0bffc17 	ldw	r2,-16(fp)
 8000588:	18800526 	beq	r3,r2,80005a0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 800058c:	e0fff917 	ldw	r3,-28(fp)
 8000590:	e0bffc17 	ldw	r2,-16(fp)
 8000594:	1887c83a 	sub	r3,r3,r2
 8000598:	e0ffff15 	stw	r3,-4(fp)
 800059c:	00000906 	br	80005c4 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 80005a0:	e0bffe17 	ldw	r2,-8(fp)
 80005a4:	1090000c 	andi	r2,r2,16384
 80005a8:	1005003a 	cmpeq	r2,r2,zero
 80005ac:	1000031e 	bne	r2,zero,80005bc <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 80005b0:	00bffd44 	movi	r2,-11
 80005b4:	e0bfff15 	stw	r2,-4(fp)
 80005b8:	00000206 	br	80005c4 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 80005bc:	00bffec4 	movi	r2,-5
 80005c0:	e0bfff15 	stw	r2,-4(fp)
 80005c4:	e0bfff17 	ldw	r2,-4(fp)
}
 80005c8:	e037883a 	mov	sp,fp
 80005cc:	df000017 	ldw	fp,0(sp)
 80005d0:	dec00104 	addi	sp,sp,4
 80005d4:	f800283a 	ret

080005d8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80005d8:	defff904 	addi	sp,sp,-28
 80005dc:	df000615 	stw	fp,24(sp)
 80005e0:	df000604 	addi	fp,sp,24
 80005e4:	e13ffc15 	stw	r4,-16(fp)
 80005e8:	e17ffd15 	stw	r5,-12(fp)
 80005ec:	e1bffe15 	stw	r6,-8(fp)
 80005f0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 80005f4:	e0bffc17 	ldw	r2,-16(fp)
 80005f8:	10800017 	ldw	r2,0(r2)
 80005fc:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 8000600:	e0bffe17 	ldw	r2,-8(fp)
 8000604:	1007883a 	mov	r3,r2
 8000608:	e0bffd17 	ldw	r2,-12(fp)
 800060c:	10c5883a 	add	r2,r2,r3
 8000610:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 8000614:	00001106 	br	800065c <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8000618:	e0bffb17 	ldw	r2,-20(fp)
 800061c:	10800104 	addi	r2,r2,4
 8000620:	10800037 	ldwio	r2,0(r2)
 8000624:	10bfffec 	andhi	r2,r2,65535
 8000628:	1005003a 	cmpeq	r2,r2,zero
 800062c:	10000b1e 	bne	r2,zero,800065c <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8000630:	e13ffb17 	ldw	r4,-20(fp)
 8000634:	e0bffd17 	ldw	r2,-12(fp)
 8000638:	10800003 	ldbu	r2,0(r2)
 800063c:	10c03fcc 	andi	r3,r2,255
 8000640:	18c0201c 	xori	r3,r3,128
 8000644:	18ffe004 	addi	r3,r3,-128
 8000648:	e0bffd17 	ldw	r2,-12(fp)
 800064c:	10800044 	addi	r2,r2,1
 8000650:	e0bffd15 	stw	r2,-12(fp)
 8000654:	2005883a 	mov	r2,r4
 8000658:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 800065c:	e0fffd17 	ldw	r3,-12(fp)
 8000660:	e0bffa17 	ldw	r2,-24(fp)
 8000664:	18bfec36 	bltu	r3,r2,8000618 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 8000668:	e0bffe17 	ldw	r2,-8(fp)
}
 800066c:	e037883a 	mov	sp,fp
 8000670:	df000017 	ldw	fp,0(sp)
 8000674:	dec00104 	addi	sp,sp,4
 8000678:	f800283a 	ret

0800067c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800067c:	defffa04 	addi	sp,sp,-24
 8000680:	dfc00515 	stw	ra,20(sp)
 8000684:	df000415 	stw	fp,16(sp)
 8000688:	df000404 	addi	fp,sp,16
 800068c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8000690:	e0bfff17 	ldw	r2,-4(fp)
 8000694:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8000698:	e0bfff17 	ldw	r2,-4(fp)
 800069c:	10800104 	addi	r2,r2,4
 80006a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80006a4:	0005303a 	rdctl	r2,status
 80006a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80006ac:	e0fffd17 	ldw	r3,-12(fp)
 80006b0:	00bfff84 	movi	r2,-2
 80006b4:	1884703a 	and	r2,r3,r2
 80006b8:	1001703a 	wrctl	status,r2
  
  return context;
 80006bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80006c0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 80006c4:	80012280 	call	8001228 <alt_tick>
 80006c8:	e0bffe17 	ldw	r2,-8(fp)
 80006cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80006d0:	e0bffc17 	ldw	r2,-16(fp)
 80006d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80006d8:	e037883a 	mov	sp,fp
 80006dc:	dfc00117 	ldw	ra,4(sp)
 80006e0:	df000017 	ldw	fp,0(sp)
 80006e4:	dec00204 	addi	sp,sp,8
 80006e8:	f800283a 	ret

080006ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80006ec:	defff804 	addi	sp,sp,-32
 80006f0:	dfc00715 	stw	ra,28(sp)
 80006f4:	df000615 	stw	fp,24(sp)
 80006f8:	df000604 	addi	fp,sp,24
 80006fc:	e13ffc15 	stw	r4,-16(fp)
 8000700:	e17ffd15 	stw	r5,-12(fp)
 8000704:	e1bffe15 	stw	r6,-8(fp)
 8000708:	e1ffff15 	stw	r7,-4(fp)
 800070c:	e0bfff17 	ldw	r2,-4(fp)
 8000710:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8000714:	00820034 	movhi	r2,2048
 8000718:	1087bb04 	addi	r2,r2,7916
 800071c:	10800017 	ldw	r2,0(r2)
 8000720:	1004c03a 	cmpne	r2,r2,zero
 8000724:	1000041e 	bne	r2,zero,8000738 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 8000728:	00c20034 	movhi	r3,2048
 800072c:	18c7bb04 	addi	r3,r3,7916
 8000730:	e0bffb17 	ldw	r2,-20(fp)
 8000734:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8000738:	e0bffc17 	ldw	r2,-16(fp)
 800073c:	10800104 	addi	r2,r2,4
 8000740:	1007883a 	mov	r3,r2
 8000744:	008001c4 	movi	r2,7
 8000748:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800074c:	d8000015 	stw	zero,0(sp)
 8000750:	e13ffd17 	ldw	r4,-12(fp)
 8000754:	e17ffe17 	ldw	r5,-8(fp)
 8000758:	01820034 	movhi	r6,2048
 800075c:	31819f04 	addi	r6,r6,1660
 8000760:	e1fffc17 	ldw	r7,-16(fp)
 8000764:	8000a640 	call	8000a64 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8000768:	e037883a 	mov	sp,fp
 800076c:	dfc00117 	ldw	ra,4(sp)
 8000770:	df000017 	ldw	fp,0(sp)
 8000774:	dec00204 	addi	sp,sp,8
 8000778:	f800283a 	ret

0800077c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800077c:	defff804 	addi	sp,sp,-32
 8000780:	dfc00715 	stw	ra,28(sp)
 8000784:	df000615 	stw	fp,24(sp)
 8000788:	df000604 	addi	fp,sp,24
 800078c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8000790:	e0bffc17 	ldw	r2,-16(fp)
 8000794:	1004803a 	cmplt	r2,r2,zero
 8000798:	1000081e 	bne	r2,zero,80007bc <close+0x40>
 800079c:	e0bffc17 	ldw	r2,-16(fp)
 80007a0:	10800324 	muli	r2,r2,12
 80007a4:	1007883a 	mov	r3,r2
 80007a8:	00820034 	movhi	r2,2048
 80007ac:	10865c04 	addi	r2,r2,6512
 80007b0:	1887883a 	add	r3,r3,r2
 80007b4:	e0ffff15 	stw	r3,-4(fp)
 80007b8:	00000106 	br	80007c0 <close+0x44>
 80007bc:	e03fff15 	stw	zero,-4(fp)
 80007c0:	e0bfff17 	ldw	r2,-4(fp)
 80007c4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 80007c8:	e0bffb17 	ldw	r2,-20(fp)
 80007cc:	1005003a 	cmpeq	r2,r2,zero
 80007d0:	10001d1e 	bne	r2,zero,8000848 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80007d4:	e0bffb17 	ldw	r2,-20(fp)
 80007d8:	10800017 	ldw	r2,0(r2)
 80007dc:	10800417 	ldw	r2,16(r2)
 80007e0:	1005003a 	cmpeq	r2,r2,zero
 80007e4:	1000071e 	bne	r2,zero,8000804 <close+0x88>
 80007e8:	e0bffb17 	ldw	r2,-20(fp)
 80007ec:	10800017 	ldw	r2,0(r2)
 80007f0:	10800417 	ldw	r2,16(r2)
 80007f4:	e13ffb17 	ldw	r4,-20(fp)
 80007f8:	103ee83a 	callr	r2
 80007fc:	e0bffe15 	stw	r2,-8(fp)
 8000800:	00000106 	br	8000808 <close+0x8c>
 8000804:	e03ffe15 	stw	zero,-8(fp)
 8000808:	e0bffe17 	ldw	r2,-8(fp)
 800080c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8000810:	e13ffc17 	ldw	r4,-16(fp)
 8000814:	80011300 	call	8001130 <alt_release_fd>
    if (rval < 0)
 8000818:	e0bffa17 	ldw	r2,-24(fp)
 800081c:	1004403a 	cmpge	r2,r2,zero
 8000820:	1000071e 	bne	r2,zero,8000840 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 8000824:	80008780 	call	8000878 <alt_get_errno>
 8000828:	e0fffa17 	ldw	r3,-24(fp)
 800082c:	00c7c83a 	sub	r3,zero,r3
 8000830:	10c00015 	stw	r3,0(r2)
      return -1;
 8000834:	00bfffc4 	movi	r2,-1
 8000838:	e0bffd15 	stw	r2,-12(fp)
 800083c:	00000806 	br	8000860 <close+0xe4>
    }
    return 0;
 8000840:	e03ffd15 	stw	zero,-12(fp)
 8000844:	00000606 	br	8000860 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8000848:	80008780 	call	8000878 <alt_get_errno>
 800084c:	1007883a 	mov	r3,r2
 8000850:	00801444 	movi	r2,81
 8000854:	18800015 	stw	r2,0(r3)
    return -1;
 8000858:	00bfffc4 	movi	r2,-1
 800085c:	e0bffd15 	stw	r2,-12(fp)
 8000860:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 8000864:	e037883a 	mov	sp,fp
 8000868:	dfc00117 	ldw	ra,4(sp)
 800086c:	df000017 	ldw	fp,0(sp)
 8000870:	dec00204 	addi	sp,sp,8
 8000874:	f800283a 	ret

08000878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8000878:	defffd04 	addi	sp,sp,-12
 800087c:	dfc00215 	stw	ra,8(sp)
 8000880:	df000115 	stw	fp,4(sp)
 8000884:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 8000888:	00820034 	movhi	r2,2048
 800088c:	1086f904 	addi	r2,r2,7140
 8000890:	10800017 	ldw	r2,0(r2)
 8000894:	1005003a 	cmpeq	r2,r2,zero
 8000898:	1000061e 	bne	r2,zero,80008b4 <alt_get_errno+0x3c>
 800089c:	00820034 	movhi	r2,2048
 80008a0:	1086f904 	addi	r2,r2,7140
 80008a4:	10800017 	ldw	r2,0(r2)
 80008a8:	103ee83a 	callr	r2
 80008ac:	e0bfff15 	stw	r2,-4(fp)
 80008b0:	00000306 	br	80008c0 <alt_get_errno+0x48>
 80008b4:	00820034 	movhi	r2,2048
 80008b8:	1087bd04 	addi	r2,r2,7924
 80008bc:	e0bfff15 	stw	r2,-4(fp)
 80008c0:	e0bfff17 	ldw	r2,-4(fp)
}
 80008c4:	e037883a 	mov	sp,fp
 80008c8:	dfc00117 	ldw	ra,4(sp)
 80008cc:	df000017 	ldw	fp,0(sp)
 80008d0:	dec00204 	addi	sp,sp,8
 80008d4:	f800283a 	ret

080008d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80008d8:	deffff04 	addi	sp,sp,-4
 80008dc:	df000015 	stw	fp,0(sp)
 80008e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80008e4:	e037883a 	mov	sp,fp
 80008e8:	df000017 	ldw	fp,0(sp)
 80008ec:	dec00104 	addi	sp,sp,4
 80008f0:	f800283a 	ret

080008f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80008f4:	defffc04 	addi	sp,sp,-16
 80008f8:	df000315 	stw	fp,12(sp)
 80008fc:	df000304 	addi	fp,sp,12
 8000900:	e13ffd15 	stw	r4,-12(fp)
 8000904:	e17ffe15 	stw	r5,-8(fp)
 8000908:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800090c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000910:	e037883a 	mov	sp,fp
 8000914:	df000017 	ldw	fp,0(sp)
 8000918:	dec00104 	addi	sp,sp,4
 800091c:	f800283a 	ret

08000920 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8000920:	defff904 	addi	sp,sp,-28
 8000924:	dfc00615 	stw	ra,24(sp)
 8000928:	df000515 	stw	fp,20(sp)
 800092c:	df000504 	addi	fp,sp,20
 8000930:	e13ffd15 	stw	r4,-12(fp)
 8000934:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8000938:	e0bffd17 	ldw	r2,-12(fp)
 800093c:	1005003a 	cmpeq	r2,r2,zero
 8000940:	1000041e 	bne	r2,zero,8000954 <alt_dev_llist_insert+0x34>
 8000944:	e0bffd17 	ldw	r2,-12(fp)
 8000948:	10800217 	ldw	r2,8(r2)
 800094c:	1004c03a 	cmpne	r2,r2,zero
 8000950:	1000071e 	bne	r2,zero,8000970 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 8000954:	80009d40 	call	80009d4 <alt_get_errno>
 8000958:	1007883a 	mov	r3,r2
 800095c:	00800584 	movi	r2,22
 8000960:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8000964:	00bffa84 	movi	r2,-22
 8000968:	e0bfff15 	stw	r2,-4(fp)
 800096c:	00001306 	br	80009bc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8000970:	e0fffd17 	ldw	r3,-12(fp)
 8000974:	e0bffe17 	ldw	r2,-8(fp)
 8000978:	e0bffb15 	stw	r2,-20(fp)
 800097c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8000980:	e0fffc17 	ldw	r3,-16(fp)
 8000984:	e0bffb17 	ldw	r2,-20(fp)
 8000988:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 800098c:	e0bffb17 	ldw	r2,-20(fp)
 8000990:	10c00017 	ldw	r3,0(r2)
 8000994:	e0bffc17 	ldw	r2,-16(fp)
 8000998:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800099c:	e0bffb17 	ldw	r2,-20(fp)
 80009a0:	10c00017 	ldw	r3,0(r2)
 80009a4:	e0bffc17 	ldw	r2,-16(fp)
 80009a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 80009ac:	e0fffb17 	ldw	r3,-20(fp)
 80009b0:	e0bffc17 	ldw	r2,-16(fp)
 80009b4:	18800015 	stw	r2,0(r3)

  return 0;  
 80009b8:	e03fff15 	stw	zero,-4(fp)
 80009bc:	e0bfff17 	ldw	r2,-4(fp)
}
 80009c0:	e037883a 	mov	sp,fp
 80009c4:	dfc00117 	ldw	ra,4(sp)
 80009c8:	df000017 	ldw	fp,0(sp)
 80009cc:	dec00204 	addi	sp,sp,8
 80009d0:	f800283a 	ret

080009d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80009d4:	defffd04 	addi	sp,sp,-12
 80009d8:	dfc00215 	stw	ra,8(sp)
 80009dc:	df000115 	stw	fp,4(sp)
 80009e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80009e4:	00820034 	movhi	r2,2048
 80009e8:	1086f904 	addi	r2,r2,7140
 80009ec:	10800017 	ldw	r2,0(r2)
 80009f0:	1005003a 	cmpeq	r2,r2,zero
 80009f4:	1000061e 	bne	r2,zero,8000a10 <alt_get_errno+0x3c>
 80009f8:	00820034 	movhi	r2,2048
 80009fc:	1086f904 	addi	r2,r2,7140
 8000a00:	10800017 	ldw	r2,0(r2)
 8000a04:	103ee83a 	callr	r2
 8000a08:	e0bfff15 	stw	r2,-4(fp)
 8000a0c:	00000306 	br	8000a1c <alt_get_errno+0x48>
 8000a10:	00820034 	movhi	r2,2048
 8000a14:	1087bd04 	addi	r2,r2,7924
 8000a18:	e0bfff15 	stw	r2,-4(fp)
 8000a1c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000a20:	e037883a 	mov	sp,fp
 8000a24:	dfc00117 	ldw	ra,4(sp)
 8000a28:	df000017 	ldw	fp,0(sp)
 8000a2c:	dec00204 	addi	sp,sp,8
 8000a30:	f800283a 	ret

08000a34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8000a34:	defffe04 	addi	sp,sp,-8
 8000a38:	dfc00115 	stw	ra,4(sp)
 8000a3c:	df000015 	stw	fp,0(sp)
 8000a40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8000a44:	0009883a 	mov	r4,zero
 8000a48:	01420004 	movi	r5,2048
 8000a4c:	80015c00 	call	80015c0 <alt_icache_flush>
#endif
}
 8000a50:	e037883a 	mov	sp,fp
 8000a54:	dfc00117 	ldw	ra,4(sp)
 8000a58:	df000017 	ldw	fp,0(sp)
 8000a5c:	dec00204 	addi	sp,sp,8
 8000a60:	f800283a 	ret

08000a64 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8000a64:	defff904 	addi	sp,sp,-28
 8000a68:	dfc00615 	stw	ra,24(sp)
 8000a6c:	df000515 	stw	fp,20(sp)
 8000a70:	df000504 	addi	fp,sp,20
 8000a74:	e13ffc15 	stw	r4,-16(fp)
 8000a78:	e17ffd15 	stw	r5,-12(fp)
 8000a7c:	e1bffe15 	stw	r6,-8(fp)
 8000a80:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8000a84:	e0800217 	ldw	r2,8(fp)
 8000a88:	d8800015 	stw	r2,0(sp)
 8000a8c:	e13ffc17 	ldw	r4,-16(fp)
 8000a90:	e17ffd17 	ldw	r5,-12(fp)
 8000a94:	e1bffe17 	ldw	r6,-8(fp)
 8000a98:	e1ffff17 	ldw	r7,-4(fp)
 8000a9c:	8000c380 	call	8000c38 <alt_iic_isr_register>
}  
 8000aa0:	e037883a 	mov	sp,fp
 8000aa4:	dfc00117 	ldw	ra,4(sp)
 8000aa8:	df000017 	ldw	fp,0(sp)
 8000aac:	dec00204 	addi	sp,sp,8
 8000ab0:	f800283a 	ret

08000ab4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8000ab4:	defff904 	addi	sp,sp,-28
 8000ab8:	df000615 	stw	fp,24(sp)
 8000abc:	df000604 	addi	fp,sp,24
 8000ac0:	e13ffe15 	stw	r4,-8(fp)
 8000ac4:	e17fff15 	stw	r5,-4(fp)
 8000ac8:	e0bfff17 	ldw	r2,-4(fp)
 8000acc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000ad0:	0005303a 	rdctl	r2,status
 8000ad4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000ad8:	e0fffb17 	ldw	r3,-20(fp)
 8000adc:	00bfff84 	movi	r2,-2
 8000ae0:	1884703a 	and	r2,r3,r2
 8000ae4:	1001703a 	wrctl	status,r2
  
  return context;
 8000ae8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8000aec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8000af0:	e0fffc17 	ldw	r3,-16(fp)
 8000af4:	00800044 	movi	r2,1
 8000af8:	10c4983a 	sll	r2,r2,r3
 8000afc:	1007883a 	mov	r3,r2
 8000b00:	00820034 	movhi	r2,2048
 8000b04:	1087ba04 	addi	r2,r2,7912
 8000b08:	10800017 	ldw	r2,0(r2)
 8000b0c:	1886b03a 	or	r3,r3,r2
 8000b10:	00820034 	movhi	r2,2048
 8000b14:	1087ba04 	addi	r2,r2,7912
 8000b18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8000b1c:	00820034 	movhi	r2,2048
 8000b20:	1087ba04 	addi	r2,r2,7912
 8000b24:	10800017 	ldw	r2,0(r2)
 8000b28:	100170fa 	wrctl	ienable,r2
 8000b2c:	e0bffd17 	ldw	r2,-12(fp)
 8000b30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000b34:	e0bffa17 	ldw	r2,-24(fp)
 8000b38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8000b3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8000b40:	e037883a 	mov	sp,fp
 8000b44:	df000017 	ldw	fp,0(sp)
 8000b48:	dec00104 	addi	sp,sp,4
 8000b4c:	f800283a 	ret

08000b50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8000b50:	defff904 	addi	sp,sp,-28
 8000b54:	df000615 	stw	fp,24(sp)
 8000b58:	df000604 	addi	fp,sp,24
 8000b5c:	e13ffe15 	stw	r4,-8(fp)
 8000b60:	e17fff15 	stw	r5,-4(fp)
 8000b64:	e0bfff17 	ldw	r2,-4(fp)
 8000b68:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000b6c:	0005303a 	rdctl	r2,status
 8000b70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000b74:	e0fffb17 	ldw	r3,-20(fp)
 8000b78:	00bfff84 	movi	r2,-2
 8000b7c:	1884703a 	and	r2,r3,r2
 8000b80:	1001703a 	wrctl	status,r2
  
  return context;
 8000b84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8000b88:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 8000b8c:	e0fffc17 	ldw	r3,-16(fp)
 8000b90:	00800044 	movi	r2,1
 8000b94:	10c4983a 	sll	r2,r2,r3
 8000b98:	0084303a 	nor	r2,zero,r2
 8000b9c:	1007883a 	mov	r3,r2
 8000ba0:	00820034 	movhi	r2,2048
 8000ba4:	1087ba04 	addi	r2,r2,7912
 8000ba8:	10800017 	ldw	r2,0(r2)
 8000bac:	1886703a 	and	r3,r3,r2
 8000bb0:	00820034 	movhi	r2,2048
 8000bb4:	1087ba04 	addi	r2,r2,7912
 8000bb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8000bbc:	00820034 	movhi	r2,2048
 8000bc0:	1087ba04 	addi	r2,r2,7912
 8000bc4:	10800017 	ldw	r2,0(r2)
 8000bc8:	100170fa 	wrctl	ienable,r2
 8000bcc:	e0bffd17 	ldw	r2,-12(fp)
 8000bd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000bd4:	e0bffa17 	ldw	r2,-24(fp)
 8000bd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8000bdc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8000be0:	e037883a 	mov	sp,fp
 8000be4:	df000017 	ldw	fp,0(sp)
 8000be8:	dec00104 	addi	sp,sp,4
 8000bec:	f800283a 	ret

08000bf0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8000bf0:	defffc04 	addi	sp,sp,-16
 8000bf4:	df000315 	stw	fp,12(sp)
 8000bf8:	df000304 	addi	fp,sp,12
 8000bfc:	e13ffe15 	stw	r4,-8(fp)
 8000c00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8000c04:	000530fa 	rdctl	r2,ienable
 8000c08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8000c0c:	e0ffff17 	ldw	r3,-4(fp)
 8000c10:	00800044 	movi	r2,1
 8000c14:	10c4983a 	sll	r2,r2,r3
 8000c18:	1007883a 	mov	r3,r2
 8000c1c:	e0bffd17 	ldw	r2,-12(fp)
 8000c20:	1884703a 	and	r2,r3,r2
 8000c24:	1004c03a 	cmpne	r2,r2,zero
}
 8000c28:	e037883a 	mov	sp,fp
 8000c2c:	df000017 	ldw	fp,0(sp)
 8000c30:	dec00104 	addi	sp,sp,4
 8000c34:	f800283a 	ret

08000c38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8000c38:	defff404 	addi	sp,sp,-48
 8000c3c:	dfc00b15 	stw	ra,44(sp)
 8000c40:	df000a15 	stw	fp,40(sp)
 8000c44:	df000a04 	addi	fp,sp,40
 8000c48:	e13ffb15 	stw	r4,-20(fp)
 8000c4c:	e17ffc15 	stw	r5,-16(fp)
 8000c50:	e1bffd15 	stw	r6,-12(fp)
 8000c54:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 8000c58:	00bffa84 	movi	r2,-22
 8000c5c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8000c60:	e0bffc17 	ldw	r2,-16(fp)
 8000c64:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8000c68:	e0bff917 	ldw	r2,-28(fp)
 8000c6c:	10800808 	cmpgei	r2,r2,32
 8000c70:	1000291e 	bne	r2,zero,8000d18 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000c74:	0005303a 	rdctl	r2,status
 8000c78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000c7c:	e0fff717 	ldw	r3,-36(fp)
 8000c80:	00bfff84 	movi	r2,-2
 8000c84:	1884703a 	and	r2,r3,r2
 8000c88:	1001703a 	wrctl	status,r2
  
  return context;
 8000c8c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8000c90:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 8000c94:	e0bff917 	ldw	r2,-28(fp)
 8000c98:	00c20034 	movhi	r3,2048
 8000c9c:	18c7be04 	addi	r3,r3,7928
 8000ca0:	100490fa 	slli	r2,r2,3
 8000ca4:	10c7883a 	add	r3,r2,r3
 8000ca8:	e0bffd17 	ldw	r2,-12(fp)
 8000cac:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 8000cb0:	e0bff917 	ldw	r2,-28(fp)
 8000cb4:	00c20034 	movhi	r3,2048
 8000cb8:	18c7be04 	addi	r3,r3,7928
 8000cbc:	100490fa 	slli	r2,r2,3
 8000cc0:	10c5883a 	add	r2,r2,r3
 8000cc4:	10c00104 	addi	r3,r2,4
 8000cc8:	e0bffe17 	ldw	r2,-8(fp)
 8000ccc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8000cd0:	e0bffd17 	ldw	r2,-12(fp)
 8000cd4:	1005003a 	cmpeq	r2,r2,zero
 8000cd8:	1000051e 	bne	r2,zero,8000cf0 <alt_iic_isr_register+0xb8>
 8000cdc:	e17ff917 	ldw	r5,-28(fp)
 8000ce0:	e13ffb17 	ldw	r4,-20(fp)
 8000ce4:	8000ab40 	call	8000ab4 <alt_ic_irq_enable>
 8000ce8:	e0bfff15 	stw	r2,-4(fp)
 8000cec:	00000406 	br	8000d00 <alt_iic_isr_register+0xc8>
 8000cf0:	e17ff917 	ldw	r5,-28(fp)
 8000cf4:	e13ffb17 	ldw	r4,-20(fp)
 8000cf8:	8000b500 	call	8000b50 <alt_ic_irq_disable>
 8000cfc:	e0bfff15 	stw	r2,-4(fp)
 8000d00:	e0bfff17 	ldw	r2,-4(fp)
 8000d04:	e0bffa15 	stw	r2,-24(fp)
 8000d08:	e0bff817 	ldw	r2,-32(fp)
 8000d0c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000d10:	e0bff617 	ldw	r2,-40(fp)
 8000d14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8000d18:	e0bffa17 	ldw	r2,-24(fp)
}
 8000d1c:	e037883a 	mov	sp,fp
 8000d20:	dfc00117 	ldw	ra,4(sp)
 8000d24:	df000017 	ldw	fp,0(sp)
 8000d28:	dec00204 	addi	sp,sp,8
 8000d2c:	f800283a 	ret

08000d30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8000d30:	defff904 	addi	sp,sp,-28
 8000d34:	dfc00615 	stw	ra,24(sp)
 8000d38:	df000515 	stw	fp,20(sp)
 8000d3c:	df000504 	addi	fp,sp,20
 8000d40:	e13ffc15 	stw	r4,-16(fp)
 8000d44:	e17ffd15 	stw	r5,-12(fp)
 8000d48:	e1bffe15 	stw	r6,-8(fp)
 8000d4c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8000d50:	e13ffd17 	ldw	r4,-12(fp)
 8000d54:	e17ffe17 	ldw	r5,-8(fp)
 8000d58:	e1bfff17 	ldw	r6,-4(fp)
 8000d5c:	8000f480 	call	8000f48 <open>
 8000d60:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8000d64:	e0bffb17 	ldw	r2,-20(fp)
 8000d68:	1004803a 	cmplt	r2,r2,zero
 8000d6c:	10001c1e 	bne	r2,zero,8000de0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 8000d70:	e0bffb17 	ldw	r2,-20(fp)
 8000d74:	00c20034 	movhi	r3,2048
 8000d78:	18c65c04 	addi	r3,r3,6512
 8000d7c:	10800324 	muli	r2,r2,12
 8000d80:	10c5883a 	add	r2,r2,r3
 8000d84:	10c00017 	ldw	r3,0(r2)
 8000d88:	e0bffc17 	ldw	r2,-16(fp)
 8000d8c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8000d90:	e0bffb17 	ldw	r2,-20(fp)
 8000d94:	00c20034 	movhi	r3,2048
 8000d98:	18c65c04 	addi	r3,r3,6512
 8000d9c:	10800324 	muli	r2,r2,12
 8000da0:	10c5883a 	add	r2,r2,r3
 8000da4:	10800104 	addi	r2,r2,4
 8000da8:	10c00017 	ldw	r3,0(r2)
 8000dac:	e0bffc17 	ldw	r2,-16(fp)
 8000db0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8000db4:	e0bffb17 	ldw	r2,-20(fp)
 8000db8:	00c20034 	movhi	r3,2048
 8000dbc:	18c65c04 	addi	r3,r3,6512
 8000dc0:	10800324 	muli	r2,r2,12
 8000dc4:	10c5883a 	add	r2,r2,r3
 8000dc8:	10800204 	addi	r2,r2,8
 8000dcc:	10c00017 	ldw	r3,0(r2)
 8000dd0:	e0bffc17 	ldw	r2,-16(fp)
 8000dd4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8000dd8:	e13ffb17 	ldw	r4,-20(fp)
 8000ddc:	80011300 	call	8001130 <alt_release_fd>
  }
} 
 8000de0:	e037883a 	mov	sp,fp
 8000de4:	dfc00117 	ldw	ra,4(sp)
 8000de8:	df000017 	ldw	fp,0(sp)
 8000dec:	dec00204 	addi	sp,sp,8
 8000df0:	f800283a 	ret

08000df4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8000df4:	defffb04 	addi	sp,sp,-20
 8000df8:	dfc00415 	stw	ra,16(sp)
 8000dfc:	df000315 	stw	fp,12(sp)
 8000e00:	df000304 	addi	fp,sp,12
 8000e04:	e13ffd15 	stw	r4,-12(fp)
 8000e08:	e17ffe15 	stw	r5,-8(fp)
 8000e0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8000e10:	01020034 	movhi	r4,2048
 8000e14:	21065f04 	addi	r4,r4,6524
 8000e18:	e17ffd17 	ldw	r5,-12(fp)
 8000e1c:	01800044 	movi	r6,1
 8000e20:	01c07fc4 	movi	r7,511
 8000e24:	8000d300 	call	8000d30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8000e28:	01020034 	movhi	r4,2048
 8000e2c:	21065c04 	addi	r4,r4,6512
 8000e30:	e17ffe17 	ldw	r5,-8(fp)
 8000e34:	000d883a 	mov	r6,zero
 8000e38:	01c07fc4 	movi	r7,511
 8000e3c:	8000d300 	call	8000d30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8000e40:	01020034 	movhi	r4,2048
 8000e44:	21066204 	addi	r4,r4,6536
 8000e48:	e17fff17 	ldw	r5,-4(fp)
 8000e4c:	01800044 	movi	r6,1
 8000e50:	01c07fc4 	movi	r7,511
 8000e54:	8000d300 	call	8000d30 <alt_open_fd>
}  
 8000e58:	e037883a 	mov	sp,fp
 8000e5c:	dfc00117 	ldw	ra,4(sp)
 8000e60:	df000017 	ldw	fp,0(sp)
 8000e64:	dec00204 	addi	sp,sp,8
 8000e68:	f800283a 	ret

08000e6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8000e6c:	defffc04 	addi	sp,sp,-16
 8000e70:	df000315 	stw	fp,12(sp)
 8000e74:	df000304 	addi	fp,sp,12
 8000e78:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8000e7c:	e0bffe17 	ldw	r2,-8(fp)
 8000e80:	10800217 	ldw	r2,8(r2)
 8000e84:	10d00034 	orhi	r3,r2,16384
 8000e88:	e0bffe17 	ldw	r2,-8(fp)
 8000e8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8000e90:	e03ffd15 	stw	zero,-12(fp)
 8000e94:	00002006 	br	8000f18 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8000e98:	e0bffd17 	ldw	r2,-12(fp)
 8000e9c:	00c20034 	movhi	r3,2048
 8000ea0:	18c65c04 	addi	r3,r3,6512
 8000ea4:	10800324 	muli	r2,r2,12
 8000ea8:	10c5883a 	add	r2,r2,r3
 8000eac:	10c00017 	ldw	r3,0(r2)
 8000eb0:	e0bffe17 	ldw	r2,-8(fp)
 8000eb4:	10800017 	ldw	r2,0(r2)
 8000eb8:	1880141e 	bne	r3,r2,8000f0c <alt_file_locked+0xa0>
 8000ebc:	e0bffd17 	ldw	r2,-12(fp)
 8000ec0:	00c20034 	movhi	r3,2048
 8000ec4:	18c65c04 	addi	r3,r3,6512
 8000ec8:	10800324 	muli	r2,r2,12
 8000ecc:	10c5883a 	add	r2,r2,r3
 8000ed0:	10800204 	addi	r2,r2,8
 8000ed4:	10800017 	ldw	r2,0(r2)
 8000ed8:	1004403a 	cmpge	r2,r2,zero
 8000edc:	10000b1e 	bne	r2,zero,8000f0c <alt_file_locked+0xa0>
 8000ee0:	e0bffd17 	ldw	r2,-12(fp)
 8000ee4:	10800324 	muli	r2,r2,12
 8000ee8:	1007883a 	mov	r3,r2
 8000eec:	00820034 	movhi	r2,2048
 8000ef0:	10865c04 	addi	r2,r2,6512
 8000ef4:	1887883a 	add	r3,r3,r2
 8000ef8:	e0bffe17 	ldw	r2,-8(fp)
 8000efc:	18800326 	beq	r3,r2,8000f0c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8000f00:	00bffcc4 	movi	r2,-13
 8000f04:	e0bfff15 	stw	r2,-4(fp)
 8000f08:	00000a06 	br	8000f34 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8000f0c:	e0bffd17 	ldw	r2,-12(fp)
 8000f10:	10800044 	addi	r2,r2,1
 8000f14:	e0bffd15 	stw	r2,-12(fp)
 8000f18:	00820034 	movhi	r2,2048
 8000f1c:	1086f804 	addi	r2,r2,7136
 8000f20:	10800017 	ldw	r2,0(r2)
 8000f24:	1007883a 	mov	r3,r2
 8000f28:	e0bffd17 	ldw	r2,-12(fp)
 8000f2c:	18bfda2e 	bgeu	r3,r2,8000e98 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8000f30:	e03fff15 	stw	zero,-4(fp)
 8000f34:	e0bfff17 	ldw	r2,-4(fp)
}
 8000f38:	e037883a 	mov	sp,fp
 8000f3c:	df000017 	ldw	fp,0(sp)
 8000f40:	dec00104 	addi	sp,sp,4
 8000f44:	f800283a 	ret

08000f48 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8000f48:	defff404 	addi	sp,sp,-48
 8000f4c:	dfc00b15 	stw	ra,44(sp)
 8000f50:	df000a15 	stw	fp,40(sp)
 8000f54:	df000a04 	addi	fp,sp,40
 8000f58:	e13ffb15 	stw	r4,-20(fp)
 8000f5c:	e17ffc15 	stw	r5,-16(fp)
 8000f60:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8000f64:	00bfffc4 	movi	r2,-1
 8000f68:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 8000f6c:	00bffb44 	movi	r2,-19
 8000f70:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 8000f74:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8000f78:	e13ffb17 	ldw	r4,-20(fp)
 8000f7c:	01420034 	movhi	r5,2048
 8000f80:	2946f604 	addi	r5,r5,7128
 8000f84:	80013540 	call	8001354 <alt_find_dev>
 8000f88:	e0bffa15 	stw	r2,-24(fp)
 8000f8c:	e0bffa17 	ldw	r2,-24(fp)
 8000f90:	1004c03a 	cmpne	r2,r2,zero
 8000f94:	1000051e 	bne	r2,zero,8000fac <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8000f98:	e13ffb17 	ldw	r4,-20(fp)
 8000f9c:	80013e80 	call	80013e8 <alt_find_file>
 8000fa0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 8000fa4:	00800044 	movi	r2,1
 8000fa8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8000fac:	e0bffa17 	ldw	r2,-24(fp)
 8000fb0:	1005003a 	cmpeq	r2,r2,zero
 8000fb4:	1000301e 	bne	r2,zero,8001078 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8000fb8:	e13ffa17 	ldw	r4,-24(fp)
 8000fbc:	80015080 	call	8001508 <alt_get_fd>
 8000fc0:	e0bff815 	stw	r2,-32(fp)
 8000fc4:	e0bff817 	ldw	r2,-32(fp)
 8000fc8:	1004403a 	cmpge	r2,r2,zero
 8000fcc:	1000031e 	bne	r2,zero,8000fdc <open+0x94>
    {
      status = index;
 8000fd0:	e0bff817 	ldw	r2,-32(fp)
 8000fd4:	e0bff715 	stw	r2,-36(fp)
 8000fd8:	00002906 	br	8001080 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 8000fdc:	e0bff817 	ldw	r2,-32(fp)
 8000fe0:	10800324 	muli	r2,r2,12
 8000fe4:	1007883a 	mov	r3,r2
 8000fe8:	00820034 	movhi	r2,2048
 8000fec:	10865c04 	addi	r2,r2,6512
 8000ff0:	1885883a 	add	r2,r3,r2
 8000ff4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8000ff8:	e0fffc17 	ldw	r3,-16(fp)
 8000ffc:	00900034 	movhi	r2,16384
 8001000:	10bfffc4 	addi	r2,r2,-1
 8001004:	1886703a 	and	r3,r3,r2
 8001008:	e0bff917 	ldw	r2,-28(fp)
 800100c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8001010:	e0bff617 	ldw	r2,-40(fp)
 8001014:	1004c03a 	cmpne	r2,r2,zero
 8001018:	1000061e 	bne	r2,zero,8001034 <open+0xec>
 800101c:	e13ff917 	ldw	r4,-28(fp)
 8001020:	8000e6c0 	call	8000e6c <alt_file_locked>
 8001024:	e0bff715 	stw	r2,-36(fp)
 8001028:	e0bff717 	ldw	r2,-36(fp)
 800102c:	1004803a 	cmplt	r2,r2,zero
 8001030:	1000131e 	bne	r2,zero,8001080 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8001034:	e0bffa17 	ldw	r2,-24(fp)
 8001038:	10800317 	ldw	r2,12(r2)
 800103c:	1005003a 	cmpeq	r2,r2,zero
 8001040:	1000091e 	bne	r2,zero,8001068 <open+0x120>
 8001044:	e0bffa17 	ldw	r2,-24(fp)
 8001048:	10800317 	ldw	r2,12(r2)
 800104c:	e13ff917 	ldw	r4,-28(fp)
 8001050:	e17ffb17 	ldw	r5,-20(fp)
 8001054:	e1bffc17 	ldw	r6,-16(fp)
 8001058:	e1fffd17 	ldw	r7,-12(fp)
 800105c:	103ee83a 	callr	r2
 8001060:	e0bfff15 	stw	r2,-4(fp)
 8001064:	00000106 	br	800106c <open+0x124>
 8001068:	e03fff15 	stw	zero,-4(fp)
 800106c:	e0bfff17 	ldw	r2,-4(fp)
 8001070:	e0bff715 	stw	r2,-36(fp)
 8001074:	00000206 	br	8001080 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8001078:	00bffb44 	movi	r2,-19
 800107c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8001080:	e0bff717 	ldw	r2,-36(fp)
 8001084:	1004403a 	cmpge	r2,r2,zero
 8001088:	1000091e 	bne	r2,zero,80010b0 <open+0x168>
  {
    alt_release_fd (index);  
 800108c:	e13ff817 	ldw	r4,-32(fp)
 8001090:	80011300 	call	8001130 <alt_release_fd>
    ALT_ERRNO = -status;
 8001094:	80010d00 	call	80010d0 <alt_get_errno>
 8001098:	e0fff717 	ldw	r3,-36(fp)
 800109c:	00c7c83a 	sub	r3,zero,r3
 80010a0:	10c00015 	stw	r3,0(r2)
    return -1;
 80010a4:	00bfffc4 	movi	r2,-1
 80010a8:	e0bffe15 	stw	r2,-8(fp)
 80010ac:	00000206 	br	80010b8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 80010b0:	e0bff817 	ldw	r2,-32(fp)
 80010b4:	e0bffe15 	stw	r2,-8(fp)
 80010b8:	e0bffe17 	ldw	r2,-8(fp)
}
 80010bc:	e037883a 	mov	sp,fp
 80010c0:	dfc00117 	ldw	ra,4(sp)
 80010c4:	df000017 	ldw	fp,0(sp)
 80010c8:	dec00204 	addi	sp,sp,8
 80010cc:	f800283a 	ret

080010d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80010d0:	defffd04 	addi	sp,sp,-12
 80010d4:	dfc00215 	stw	ra,8(sp)
 80010d8:	df000115 	stw	fp,4(sp)
 80010dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 80010e0:	00820034 	movhi	r2,2048
 80010e4:	1086f904 	addi	r2,r2,7140
 80010e8:	10800017 	ldw	r2,0(r2)
 80010ec:	1005003a 	cmpeq	r2,r2,zero
 80010f0:	1000061e 	bne	r2,zero,800110c <alt_get_errno+0x3c>
 80010f4:	00820034 	movhi	r2,2048
 80010f8:	1086f904 	addi	r2,r2,7140
 80010fc:	10800017 	ldw	r2,0(r2)
 8001100:	103ee83a 	callr	r2
 8001104:	e0bfff15 	stw	r2,-4(fp)
 8001108:	00000306 	br	8001118 <alt_get_errno+0x48>
 800110c:	00820034 	movhi	r2,2048
 8001110:	1087bd04 	addi	r2,r2,7924
 8001114:	e0bfff15 	stw	r2,-4(fp)
 8001118:	e0bfff17 	ldw	r2,-4(fp)
}
 800111c:	e037883a 	mov	sp,fp
 8001120:	dfc00117 	ldw	ra,4(sp)
 8001124:	df000017 	ldw	fp,0(sp)
 8001128:	dec00204 	addi	sp,sp,8
 800112c:	f800283a 	ret

08001130 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8001130:	defffe04 	addi	sp,sp,-8
 8001134:	df000115 	stw	fp,4(sp)
 8001138:	df000104 	addi	fp,sp,4
 800113c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8001140:	e0bfff17 	ldw	r2,-4(fp)
 8001144:	108000d0 	cmplti	r2,r2,3
 8001148:	10000d1e 	bne	r2,zero,8001180 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800114c:	e0bfff17 	ldw	r2,-4(fp)
 8001150:	00c20034 	movhi	r3,2048
 8001154:	18c65c04 	addi	r3,r3,6512
 8001158:	10800324 	muli	r2,r2,12
 800115c:	10c5883a 	add	r2,r2,r3
 8001160:	10800204 	addi	r2,r2,8
 8001164:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8001168:	e0bfff17 	ldw	r2,-4(fp)
 800116c:	00c20034 	movhi	r3,2048
 8001170:	18c65c04 	addi	r3,r3,6512
 8001174:	10800324 	muli	r2,r2,12
 8001178:	10c5883a 	add	r2,r2,r3
 800117c:	10000015 	stw	zero,0(r2)
  }
}
 8001180:	e037883a 	mov	sp,fp
 8001184:	df000017 	ldw	fp,0(sp)
 8001188:	dec00104 	addi	sp,sp,4
 800118c:	f800283a 	ret

08001190 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8001190:	defffa04 	addi	sp,sp,-24
 8001194:	df000515 	stw	fp,20(sp)
 8001198:	df000504 	addi	fp,sp,20
 800119c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80011a0:	0005303a 	rdctl	r2,status
 80011a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80011a8:	e0fffd17 	ldw	r3,-12(fp)
 80011ac:	00bfff84 	movi	r2,-2
 80011b0:	1884703a 	and	r2,r3,r2
 80011b4:	1001703a 	wrctl	status,r2
  
  return context;
 80011b8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80011bc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 80011c0:	e0bfff17 	ldw	r2,-4(fp)
 80011c4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80011c8:	e0bffc17 	ldw	r2,-16(fp)
 80011cc:	10c00017 	ldw	r3,0(r2)
 80011d0:	e0bffc17 	ldw	r2,-16(fp)
 80011d4:	10800117 	ldw	r2,4(r2)
 80011d8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 80011dc:	e0bffc17 	ldw	r2,-16(fp)
 80011e0:	10c00117 	ldw	r3,4(r2)
 80011e4:	e0bffc17 	ldw	r2,-16(fp)
 80011e8:	10800017 	ldw	r2,0(r2)
 80011ec:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80011f0:	e0fffc17 	ldw	r3,-16(fp)
 80011f4:	e0bffc17 	ldw	r2,-16(fp)
 80011f8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 80011fc:	e0fffc17 	ldw	r3,-16(fp)
 8001200:	e0bffc17 	ldw	r2,-16(fp)
 8001204:	18800015 	stw	r2,0(r3)
 8001208:	e0bffe17 	ldw	r2,-8(fp)
 800120c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001210:	e0bffb17 	ldw	r2,-20(fp)
 8001214:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8001218:	e037883a 	mov	sp,fp
 800121c:	df000017 	ldw	fp,0(sp)
 8001220:	dec00104 	addi	sp,sp,4
 8001224:	f800283a 	ret

08001228 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8001228:	defffb04 	addi	sp,sp,-20
 800122c:	dfc00415 	stw	ra,16(sp)
 8001230:	df000315 	stw	fp,12(sp)
 8001234:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8001238:	d0a00717 	ldw	r2,-32740(gp)
 800123c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8001240:	d0a0c817 	ldw	r2,-31968(gp)
 8001244:	10800044 	addi	r2,r2,1
 8001248:	d0a0c815 	stw	r2,-31968(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800124c:	00003106 	br	8001314 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 8001250:	e0bffe17 	ldw	r2,-8(fp)
 8001254:	10800017 	ldw	r2,0(r2)
 8001258:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800125c:	e0bffe17 	ldw	r2,-8(fp)
 8001260:	10800403 	ldbu	r2,16(r2)
 8001264:	10803fcc 	andi	r2,r2,255
 8001268:	1005003a 	cmpeq	r2,r2,zero
 800126c:	1000051e 	bne	r2,zero,8001284 <alt_tick+0x5c>
 8001270:	d0a0c817 	ldw	r2,-31968(gp)
 8001274:	1004c03a 	cmpne	r2,r2,zero
 8001278:	1000021e 	bne	r2,zero,8001284 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 800127c:	e0bffe17 	ldw	r2,-8(fp)
 8001280:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8001284:	e0bffe17 	ldw	r2,-8(fp)
 8001288:	10c00217 	ldw	r3,8(r2)
 800128c:	d0a0c817 	ldw	r2,-31968(gp)
 8001290:	10c01e36 	bltu	r2,r3,800130c <alt_tick+0xe4>
 8001294:	e0bffe17 	ldw	r2,-8(fp)
 8001298:	10800403 	ldbu	r2,16(r2)
 800129c:	10803fcc 	andi	r2,r2,255
 80012a0:	1004c03a 	cmpne	r2,r2,zero
 80012a4:	1000191e 	bne	r2,zero,800130c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 80012a8:	e0bffe17 	ldw	r2,-8(fp)
 80012ac:	10c00317 	ldw	r3,12(r2)
 80012b0:	e0bffe17 	ldw	r2,-8(fp)
 80012b4:	11000517 	ldw	r4,20(r2)
 80012b8:	183ee83a 	callr	r3
 80012bc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80012c0:	e0bffd17 	ldw	r2,-12(fp)
 80012c4:	1004c03a 	cmpne	r2,r2,zero
 80012c8:	1000031e 	bne	r2,zero,80012d8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 80012cc:	e13ffe17 	ldw	r4,-8(fp)
 80012d0:	80011900 	call	8001190 <alt_alarm_stop>
 80012d4:	00000d06 	br	800130c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 80012d8:	e0bffe17 	ldw	r2,-8(fp)
 80012dc:	10c00217 	ldw	r3,8(r2)
 80012e0:	e0bffd17 	ldw	r2,-12(fp)
 80012e4:	1887883a 	add	r3,r3,r2
 80012e8:	e0bffe17 	ldw	r2,-8(fp)
 80012ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80012f0:	e0bffe17 	ldw	r2,-8(fp)
 80012f4:	10c00217 	ldw	r3,8(r2)
 80012f8:	d0a0c817 	ldw	r2,-31968(gp)
 80012fc:	1880032e 	bgeu	r3,r2,800130c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 8001300:	e0fffe17 	ldw	r3,-8(fp)
 8001304:	00800044 	movi	r2,1
 8001308:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 800130c:	e0bfff17 	ldw	r2,-4(fp)
 8001310:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8001314:	d0e00704 	addi	r3,gp,-32740
 8001318:	e0bffe17 	ldw	r2,-8(fp)
 800131c:	10ffcc1e 	bne	r2,r3,8001250 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 8001320:	e037883a 	mov	sp,fp
 8001324:	dfc00117 	ldw	ra,4(sp)
 8001328:	df000017 	ldw	fp,0(sp)
 800132c:	dec00204 	addi	sp,sp,8
 8001330:	f800283a 	ret

08001334 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8001334:	deffff04 	addi	sp,sp,-4
 8001338:	df000015 	stw	fp,0(sp)
 800133c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8001340:	000170fa 	wrctl	ienable,zero
}
 8001344:	e037883a 	mov	sp,fp
 8001348:	df000017 	ldw	fp,0(sp)
 800134c:	dec00104 	addi	sp,sp,4
 8001350:	f800283a 	ret

08001354 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8001354:	defff904 	addi	sp,sp,-28
 8001358:	dfc00615 	stw	ra,24(sp)
 800135c:	df000515 	stw	fp,20(sp)
 8001360:	df000504 	addi	fp,sp,20
 8001364:	e13ffd15 	stw	r4,-12(fp)
 8001368:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800136c:	e0bffe17 	ldw	r2,-8(fp)
 8001370:	10800017 	ldw	r2,0(r2)
 8001374:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8001378:	e13ffd17 	ldw	r4,-12(fp)
 800137c:	80016ac0 	call	80016ac <strlen>
 8001380:	10800044 	addi	r2,r2,1
 8001384:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8001388:	00000d06 	br	80013c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800138c:	e0bffc17 	ldw	r2,-16(fp)
 8001390:	11000217 	ldw	r4,8(r2)
 8001394:	e1bffb17 	ldw	r6,-20(fp)
 8001398:	e17ffd17 	ldw	r5,-12(fp)
 800139c:	80016700 	call	8001670 <memcmp>
 80013a0:	1004c03a 	cmpne	r2,r2,zero
 80013a4:	1000031e 	bne	r2,zero,80013b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80013a8:	e0bffc17 	ldw	r2,-16(fp)
 80013ac:	e0bfff15 	stw	r2,-4(fp)
 80013b0:	00000706 	br	80013d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80013b4:	e0bffc17 	ldw	r2,-16(fp)
 80013b8:	10800017 	ldw	r2,0(r2)
 80013bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80013c0:	e0fffe17 	ldw	r3,-8(fp)
 80013c4:	e0bffc17 	ldw	r2,-16(fp)
 80013c8:	10fff01e 	bne	r2,r3,800138c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80013cc:	e03fff15 	stw	zero,-4(fp)
 80013d0:	e0bfff17 	ldw	r2,-4(fp)
}
 80013d4:	e037883a 	mov	sp,fp
 80013d8:	dfc00117 	ldw	ra,4(sp)
 80013dc:	df000017 	ldw	fp,0(sp)
 80013e0:	dec00204 	addi	sp,sp,8
 80013e4:	f800283a 	ret

080013e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80013e8:	defffa04 	addi	sp,sp,-24
 80013ec:	dfc00515 	stw	ra,20(sp)
 80013f0:	df000415 	stw	fp,16(sp)
 80013f4:	df000404 	addi	fp,sp,16
 80013f8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80013fc:	00820034 	movhi	r2,2048
 8001400:	1086f404 	addi	r2,r2,7120
 8001404:	10800017 	ldw	r2,0(r2)
 8001408:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800140c:	00003306 	br	80014dc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 8001410:	e0bffd17 	ldw	r2,-12(fp)
 8001414:	11000217 	ldw	r4,8(r2)
 8001418:	80016ac0 	call	80016ac <strlen>
 800141c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 8001420:	e0bffd17 	ldw	r2,-12(fp)
 8001424:	10c00217 	ldw	r3,8(r2)
 8001428:	e0bffc17 	ldw	r2,-16(fp)
 800142c:	1885883a 	add	r2,r3,r2
 8001430:	10bfffc4 	addi	r2,r2,-1
 8001434:	10800003 	ldbu	r2,0(r2)
 8001438:	10803fcc 	andi	r2,r2,255
 800143c:	1080201c 	xori	r2,r2,128
 8001440:	10bfe004 	addi	r2,r2,-128
 8001444:	10800bd8 	cmpnei	r2,r2,47
 8001448:	1000031e 	bne	r2,zero,8001458 <alt_find_file+0x70>
    {
      len -= 1;
 800144c:	e0bffc17 	ldw	r2,-16(fp)
 8001450:	10bfffc4 	addi	r2,r2,-1
 8001454:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8001458:	e0bffc17 	ldw	r2,-16(fp)
 800145c:	1007883a 	mov	r3,r2
 8001460:	e0bffe17 	ldw	r2,-8(fp)
 8001464:	1885883a 	add	r2,r3,r2
 8001468:	10800003 	ldbu	r2,0(r2)
 800146c:	10803fcc 	andi	r2,r2,255
 8001470:	1080201c 	xori	r2,r2,128
 8001474:	10bfe004 	addi	r2,r2,-128
 8001478:	10800be0 	cmpeqi	r2,r2,47
 800147c:	10000a1e 	bne	r2,zero,80014a8 <alt_find_file+0xc0>
 8001480:	e0bffc17 	ldw	r2,-16(fp)
 8001484:	1007883a 	mov	r3,r2
 8001488:	e0bffe17 	ldw	r2,-8(fp)
 800148c:	1885883a 	add	r2,r3,r2
 8001490:	10800003 	ldbu	r2,0(r2)
 8001494:	10803fcc 	andi	r2,r2,255
 8001498:	1080201c 	xori	r2,r2,128
 800149c:	10bfe004 	addi	r2,r2,-128
 80014a0:	1004c03a 	cmpne	r2,r2,zero
 80014a4:	10000a1e 	bne	r2,zero,80014d0 <alt_find_file+0xe8>
 80014a8:	e0bffd17 	ldw	r2,-12(fp)
 80014ac:	11000217 	ldw	r4,8(r2)
 80014b0:	e1bffc17 	ldw	r6,-16(fp)
 80014b4:	e17ffe17 	ldw	r5,-8(fp)
 80014b8:	80016700 	call	8001670 <memcmp>
 80014bc:	1004c03a 	cmpne	r2,r2,zero
 80014c0:	1000031e 	bne	r2,zero,80014d0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80014c4:	e0bffd17 	ldw	r2,-12(fp)
 80014c8:	e0bfff15 	stw	r2,-4(fp)
 80014cc:	00000806 	br	80014f0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 80014d0:	e0bffd17 	ldw	r2,-12(fp)
 80014d4:	10800017 	ldw	r2,0(r2)
 80014d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80014dc:	00c20034 	movhi	r3,2048
 80014e0:	18c6f404 	addi	r3,r3,7120
 80014e4:	e0bffd17 	ldw	r2,-12(fp)
 80014e8:	10ffc91e 	bne	r2,r3,8001410 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80014ec:	e03fff15 	stw	zero,-4(fp)
 80014f0:	e0bfff17 	ldw	r2,-4(fp)
}
 80014f4:	e037883a 	mov	sp,fp
 80014f8:	dfc00117 	ldw	ra,4(sp)
 80014fc:	df000017 	ldw	fp,0(sp)
 8001500:	dec00204 	addi	sp,sp,8
 8001504:	f800283a 	ret

08001508 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8001508:	defffc04 	addi	sp,sp,-16
 800150c:	df000315 	stw	fp,12(sp)
 8001510:	df000304 	addi	fp,sp,12
 8001514:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8001518:	00bffa04 	movi	r2,-24
 800151c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8001520:	e03ffe15 	stw	zero,-8(fp)
 8001524:	00001e06 	br	80015a0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 8001528:	e0bffe17 	ldw	r2,-8(fp)
 800152c:	00c20034 	movhi	r3,2048
 8001530:	18c65c04 	addi	r3,r3,6512
 8001534:	10800324 	muli	r2,r2,12
 8001538:	10c5883a 	add	r2,r2,r3
 800153c:	10800017 	ldw	r2,0(r2)
 8001540:	1004c03a 	cmpne	r2,r2,zero
 8001544:	1000131e 	bne	r2,zero,8001594 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 8001548:	e0bffe17 	ldw	r2,-8(fp)
 800154c:	00c20034 	movhi	r3,2048
 8001550:	18c65c04 	addi	r3,r3,6512
 8001554:	10800324 	muli	r2,r2,12
 8001558:	10c7883a 	add	r3,r2,r3
 800155c:	e0bfff17 	ldw	r2,-4(fp)
 8001560:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 8001564:	00820034 	movhi	r2,2048
 8001568:	1086f804 	addi	r2,r2,7136
 800156c:	10c00017 	ldw	r3,0(r2)
 8001570:	e0bffe17 	ldw	r2,-8(fp)
 8001574:	1880040e 	bge	r3,r2,8001588 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 8001578:	00c20034 	movhi	r3,2048
 800157c:	18c6f804 	addi	r3,r3,7136
 8001580:	e0bffe17 	ldw	r2,-8(fp)
 8001584:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 8001588:	e0bffe17 	ldw	r2,-8(fp)
 800158c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8001590:	00000606 	br	80015ac <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8001594:	e0bffe17 	ldw	r2,-8(fp)
 8001598:	10800044 	addi	r2,r2,1
 800159c:	e0bffe15 	stw	r2,-8(fp)
 80015a0:	e0bffe17 	ldw	r2,-8(fp)
 80015a4:	10800810 	cmplti	r2,r2,32
 80015a8:	103fdf1e 	bne	r2,zero,8001528 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80015ac:	e0bffd17 	ldw	r2,-12(fp)
}
 80015b0:	e037883a 	mov	sp,fp
 80015b4:	df000017 	ldw	fp,0(sp)
 80015b8:	dec00104 	addi	sp,sp,4
 80015bc:	f800283a 	ret

080015c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80015c0:	defffb04 	addi	sp,sp,-20
 80015c4:	df000415 	stw	fp,16(sp)
 80015c8:	df000404 	addi	fp,sp,16
 80015cc:	e13ffe15 	stw	r4,-8(fp)
 80015d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80015d4:	e0bfff17 	ldw	r2,-4(fp)
 80015d8:	10820070 	cmpltui	r2,r2,2049
 80015dc:	1000021e 	bne	r2,zero,80015e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80015e0:	00820004 	movi	r2,2048
 80015e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80015e8:	e0fffe17 	ldw	r3,-8(fp)
 80015ec:	e0bfff17 	ldw	r2,-4(fp)
 80015f0:	1885883a 	add	r2,r3,r2
 80015f4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80015f8:	e0bffe17 	ldw	r2,-8(fp)
 80015fc:	e0bffd15 	stw	r2,-12(fp)
 8001600:	00000506 	br	8001618 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8001604:	e0bffd17 	ldw	r2,-12(fp)
 8001608:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800160c:	e0bffd17 	ldw	r2,-12(fp)
 8001610:	10800804 	addi	r2,r2,32
 8001614:	e0bffd15 	stw	r2,-12(fp)
 8001618:	e0fffd17 	ldw	r3,-12(fp)
 800161c:	e0bffc17 	ldw	r2,-16(fp)
 8001620:	18bff836 	bltu	r3,r2,8001604 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8001624:	e0bffe17 	ldw	r2,-8(fp)
 8001628:	108007cc 	andi	r2,r2,31
 800162c:	1005003a 	cmpeq	r2,r2,zero
 8001630:	1000021e 	bne	r2,zero,800163c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8001634:	e0bffd17 	ldw	r2,-12(fp)
 8001638:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800163c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8001640:	e037883a 	mov	sp,fp
 8001644:	df000017 	ldw	fp,0(sp)
 8001648:	dec00104 	addi	sp,sp,4
 800164c:	f800283a 	ret

08001650 <exit>:
 8001650:	defffe04 	addi	sp,sp,-8
 8001654:	dc400015 	stw	r17,0(sp)
 8001658:	000b883a 	mov	r5,zero
 800165c:	2023883a 	mov	r17,r4
 8001660:	dfc00115 	stw	ra,4(sp)
 8001664:	80016d00 	call	80016d0 <__call_exitprocs>
 8001668:	8809883a 	mov	r4,r17
 800166c:	80018cc0 	call	80018cc <_exit>

08001670 <memcmp>:
 8001670:	31ffffc4 	addi	r7,r6,-1
 8001674:	3000061e 	bne	r6,zero,8001690 <memcmp+0x20>
 8001678:	00000a06 	br	80016a4 <memcmp+0x34>
 800167c:	39ffffc4 	addi	r7,r7,-1
 8001680:	00bfffc4 	movi	r2,-1
 8001684:	21000044 	addi	r4,r4,1
 8001688:	29400044 	addi	r5,r5,1
 800168c:	38800526 	beq	r7,r2,80016a4 <memcmp+0x34>
 8001690:	20c00003 	ldbu	r3,0(r4)
 8001694:	28800003 	ldbu	r2,0(r5)
 8001698:	18bff826 	beq	r3,r2,800167c <memcmp+0xc>
 800169c:	1885c83a 	sub	r2,r3,r2
 80016a0:	f800283a 	ret
 80016a4:	0005883a 	mov	r2,zero
 80016a8:	f800283a 	ret

080016ac <strlen>:
 80016ac:	20800007 	ldb	r2,0(r4)
 80016b0:	10000526 	beq	r2,zero,80016c8 <strlen+0x1c>
 80016b4:	2007883a 	mov	r3,r4
 80016b8:	18c00044 	addi	r3,r3,1
 80016bc:	18800007 	ldb	r2,0(r3)
 80016c0:	103ffd1e 	bne	r2,zero,80016b8 <strlen+0xc>
 80016c4:	1905c83a 	sub	r2,r3,r4
 80016c8:	f800283a 	ret

080016cc <register_fini>:
 80016cc:	f800283a 	ret

080016d0 <__call_exitprocs>:
 80016d0:	defff304 	addi	sp,sp,-52
 80016d4:	00820034 	movhi	r2,2048
 80016d8:	1086fe04 	addi	r2,r2,7160
 80016dc:	df000b15 	stw	fp,44(sp)
 80016e0:	17000017 	ldw	fp,0(r2)
 80016e4:	00800034 	movhi	r2,0
 80016e8:	10800004 	addi	r2,r2,0
 80016ec:	1005003a 	cmpeq	r2,r2,zero
 80016f0:	d8800215 	stw	r2,8(sp)
 80016f4:	e0800c04 	addi	r2,fp,48
 80016f8:	dd800915 	stw	r22,36(sp)
 80016fc:	dd400815 	stw	r21,32(sp)
 8001700:	dfc00c15 	stw	ra,48(sp)
 8001704:	ddc00a15 	stw	r23,40(sp)
 8001708:	dd000715 	stw	r20,28(sp)
 800170c:	dcc00615 	stw	r19,24(sp)
 8001710:	dc800515 	stw	r18,20(sp)
 8001714:	dc400415 	stw	r17,16(sp)
 8001718:	dc000315 	stw	r16,12(sp)
 800171c:	282d883a 	mov	r22,r5
 8001720:	d9000115 	stw	r4,4(sp)
 8001724:	d8800015 	stw	r2,0(sp)
 8001728:	282b003a 	cmpeq	r21,r5,zero
 800172c:	e4400c17 	ldw	r17,48(fp)
 8001730:	88001226 	beq	r17,zero,800177c <__call_exitprocs+0xac>
 8001734:	ddc00017 	ldw	r23,0(sp)
 8001738:	88800117 	ldw	r2,4(r17)
 800173c:	8c802217 	ldw	r18,136(r17)
 8001740:	143fffc4 	addi	r16,r2,-1
 8001744:	80000b16 	blt	r16,zero,8001774 <__call_exitprocs+0xa4>
 8001748:	9027003a 	cmpeq	r19,r18,zero
 800174c:	a800171e 	bne	r21,zero,80017ac <__call_exitprocs+0xdc>
 8001750:	9800051e 	bne	r19,zero,8001768 <__call_exitprocs+0x98>
 8001754:	8409883a 	add	r4,r16,r16
 8001758:	2105883a 	add	r2,r4,r4
 800175c:	1485883a 	add	r2,r2,r18
 8001760:	10c02017 	ldw	r3,128(r2)
 8001764:	b0c01226 	beq	r22,r3,80017b0 <__call_exitprocs+0xe0>
 8001768:	843fffc4 	addi	r16,r16,-1
 800176c:	00bfffc4 	movi	r2,-1
 8001770:	80bff61e 	bne	r16,r2,800174c <__call_exitprocs+0x7c>
 8001774:	d8800217 	ldw	r2,8(sp)
 8001778:	10003226 	beq	r2,zero,8001844 <__call_exitprocs+0x174>
 800177c:	dfc00c17 	ldw	ra,48(sp)
 8001780:	df000b17 	ldw	fp,44(sp)
 8001784:	ddc00a17 	ldw	r23,40(sp)
 8001788:	dd800917 	ldw	r22,36(sp)
 800178c:	dd400817 	ldw	r21,32(sp)
 8001790:	dd000717 	ldw	r20,28(sp)
 8001794:	dcc00617 	ldw	r19,24(sp)
 8001798:	dc800517 	ldw	r18,20(sp)
 800179c:	dc400417 	ldw	r17,16(sp)
 80017a0:	dc000317 	ldw	r16,12(sp)
 80017a4:	dec00d04 	addi	sp,sp,52
 80017a8:	f800283a 	ret
 80017ac:	8409883a 	add	r4,r16,r16
 80017b0:	88c00117 	ldw	r3,4(r17)
 80017b4:	2105883a 	add	r2,r4,r4
 80017b8:	1445883a 	add	r2,r2,r17
 80017bc:	18ffffc4 	addi	r3,r3,-1
 80017c0:	11800217 	ldw	r6,8(r2)
 80017c4:	1c001826 	beq	r3,r16,8001828 <__call_exitprocs+0x158>
 80017c8:	10000215 	stw	zero,8(r2)
 80017cc:	303fe626 	beq	r6,zero,8001768 <__call_exitprocs+0x98>
 80017d0:	8d000117 	ldw	r20,4(r17)
 80017d4:	9800121e 	bne	r19,zero,8001820 <__call_exitprocs+0x150>
 80017d8:	00c00044 	movi	r3,1
 80017dc:	1c06983a 	sll	r3,r3,r16
 80017e0:	90804017 	ldw	r2,256(r18)
 80017e4:	1884703a 	and	r2,r3,r2
 80017e8:	10000d26 	beq	r2,zero,8001820 <__call_exitprocs+0x150>
 80017ec:	90804117 	ldw	r2,260(r18)
 80017f0:	1884703a 	and	r2,r3,r2
 80017f4:	10000e1e 	bne	r2,zero,8001830 <__call_exitprocs+0x160>
 80017f8:	2105883a 	add	r2,r4,r4
 80017fc:	1485883a 	add	r2,r2,r18
 8001800:	11400017 	ldw	r5,0(r2)
 8001804:	d9000117 	ldw	r4,4(sp)
 8001808:	303ee83a 	callr	r6
 800180c:	88800117 	ldw	r2,4(r17)
 8001810:	a0bfc61e 	bne	r20,r2,800172c <__call_exitprocs+0x5c>
 8001814:	b8800017 	ldw	r2,0(r23)
 8001818:	147fd326 	beq	r2,r17,8001768 <__call_exitprocs+0x98>
 800181c:	003fc306 	br	800172c <__call_exitprocs+0x5c>
 8001820:	303ee83a 	callr	r6
 8001824:	003ff906 	br	800180c <__call_exitprocs+0x13c>
 8001828:	8c000115 	stw	r16,4(r17)
 800182c:	003fe706 	br	80017cc <__call_exitprocs+0xfc>
 8001830:	2105883a 	add	r2,r4,r4
 8001834:	1485883a 	add	r2,r2,r18
 8001838:	11000017 	ldw	r4,0(r2)
 800183c:	303ee83a 	callr	r6
 8001840:	003ff206 	br	800180c <__call_exitprocs+0x13c>
 8001844:	88800117 	ldw	r2,4(r17)
 8001848:	10000b1e 	bne	r2,zero,8001878 <__call_exitprocs+0x1a8>
 800184c:	89000017 	ldw	r4,0(r17)
 8001850:	20000a26 	beq	r4,zero,800187c <__call_exitprocs+0x1ac>
 8001854:	b9000015 	stw	r4,0(r23)
 8001858:	90000226 	beq	r18,zero,8001864 <__call_exitprocs+0x194>
 800185c:	9009883a 	mov	r4,r18
 8001860:	00000000 	call	0 <__alt_mem_onchip_mem-0x80000>
 8001864:	8809883a 	mov	r4,r17
 8001868:	00000000 	call	0 <__alt_mem_onchip_mem-0x80000>
 800186c:	bc400017 	ldw	r17,0(r23)
 8001870:	883fb11e 	bne	r17,zero,8001738 <__call_exitprocs+0x68>
 8001874:	003fc106 	br	800177c <__call_exitprocs+0xac>
 8001878:	89000017 	ldw	r4,0(r17)
 800187c:	882f883a 	mov	r23,r17
 8001880:	2023883a 	mov	r17,r4
 8001884:	883fac1e 	bne	r17,zero,8001738 <__call_exitprocs+0x68>
 8001888:	003fbc06 	br	800177c <__call_exitprocs+0xac>

0800188c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 800188c:	defffd04 	addi	sp,sp,-12
 8001890:	df000215 	stw	fp,8(sp)
 8001894:	df000204 	addi	fp,sp,8
 8001898:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 800189c:	e0bfff17 	ldw	r2,-4(fp)
 80018a0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80018a4:	e0bffe17 	ldw	r2,-8(fp)
 80018a8:	1005003a 	cmpeq	r2,r2,zero
 80018ac:	1000021e 	bne	r2,zero,80018b8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 80018b0:	002af070 	cmpltui	zero,zero,43969
 80018b4:	00000106 	br	80018bc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 80018b8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 80018bc:	e037883a 	mov	sp,fp
 80018c0:	df000017 	ldw	fp,0(sp)
 80018c4:	dec00104 	addi	sp,sp,4
 80018c8:	f800283a 	ret

080018cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80018cc:	defffd04 	addi	sp,sp,-12
 80018d0:	dfc00215 	stw	ra,8(sp)
 80018d4:	df000115 	stw	fp,4(sp)
 80018d8:	df000104 	addi	fp,sp,4
 80018dc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 80018e0:	e13fff17 	ldw	r4,-4(fp)
 80018e4:	800188c0 	call	800188c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80018e8:	003fff06 	br	80018e8 <_exit+0x1c>
 80018ec:	080016cc 	andi	zero,at,91
