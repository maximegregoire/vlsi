
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001a1c memsz 0x00001a1c flags r-x
    LOAD off    0x00002a3c vaddr 0x00001a3c paddr 0x00001ce4 align 2**12
         filesz 0x000002a8 memsz 0x000002a8 flags rw-
    LOAD off    0x00002f8c vaddr 0x00001f8c paddr 0x00001f8c align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000192c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0000194c  0000194c  0000294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002a8  00001a3c  00001ce4  00002a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000018  00001f8c  00001f8c  00002f8c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000368  00000000  00000000  00002d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000004e2  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000781f  00000000  00000000  00003552  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a6e  00000000  00000000  0000ad71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004735  00000000  00000000  0000c7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006a0  00000000  00000000  00010f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000c5d  00000000  00000000  000115b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000142a  00000000  00000000  00012211  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  0001363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00013690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00014c5e  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00014c61  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00014c64  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00014c65  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  00014c66  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  00014c6a  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  00014c6e  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000012  00000000  00000000  00014c72  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001e  00000000  00000000  00014c84  2**0
                  CONTENTS, READONLY
 25 .jdi          00003c26  00000000  00000000  00014ca2  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00025068  00000000  00000000  000188c8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
0000194c l    d  .rodata	00000000 .rodata
00001a3c l    d  .rwdata	00000000 .rwdata
00001f8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 count_binary.c
0000005c l     F .text	00000020 lcd_init
0000007c l     F .text	00000054 initial_message
000000d0 l     F .text	0000002c count_led
00001f8c l     O .bss	00000001 count
000000fc l     F .text	0000001c count_sevenseg
00000118 l     F .text	00000028 count_lcd
00000140 l     F .text	0000004c count_all
0000018c l     F .text	00000160 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
000003f4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000006c0 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001a3c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0000102c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00001228 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001520 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000159c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00001728 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000018e8 l     F .text	00000040 alt_sim_halt
000005d8 g     F .text	0000001c putchar
00001098 g     F .text	00000040 alt_main
000005fc g     F .text	00000090 _puts_r
00001ce4 g       *ABS*	00000000 __flash_rwdata_start
00000540 g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00001f90 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001f94 g     O .bss	00000004 errno
00001f9c g     O .bss	00000004 alt_argv
00009cc4 g       *ABS*	00000000 _gp
000010d8 g     F .text	00000030 usleep
00001b44 g     O .rwdata	00000180 alt_fd_list
000005f4 g     F .text	00000008 _putchar_r
0000068c g     F .text	00000014 puts
00000594 g     F .text	00000044 _printf_r
00000530 g     F .text	00000008 __udivsi3
00001678 g     F .text	00000090 alt_icache_flush
00001cdc g     O .rwdata	00000004 alt_max_fd
00001cc8 g     O .rwdata	00000004 _global_impure_ptr
00001fa4 g       *ABS*	00000000 __bss_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
00001b1c g     O .rwdata	00000028 alt_dev_null
00001580 g     F .text	0000001c alt_dcache_flush_all
00001ce4 g       *ABS*	00000000 __ram_rwdata_end
00001cd4 g     O .rwdata	00000008 alt_dev_list
00001108 g     F .text	00000120 write
00000ec0 g     F .text	00000074 _putc_r
00001a3c g       *ABS*	00000000 __ram_rodata_end
00000538 g     F .text	00000008 __umodsi3
00001fa4 g       *ABS*	00000000 end
00005000 g       *ABS*	00000000 __alt_stack_pointer
00000740 g     F .text	00000630 ___vfprintf_internal_r
0000172c g     F .text	000001bc __call_exitprocs
00000020 g     F .text	0000003c _start
000012bc g     F .text	0000001c alt_sys_init
00001a3c g       *ABS*	00000000 __ram_rwdata_start
0000194c g       *ABS*	00000000 __ram_rodata_start
000012d8 g     F .text	0000014c alt_busy_sleep
00001fa4 g       *ABS*	00000000 __alt_stack_base
00000d94 g     F .text	000000bc __sfvwrite_small_dev
00001f8c g       *ABS*	00000000 __bss_start
000002ec g     F .text	00000108 main
00001fa0 g     O .bss	00000004 alt_envp
00001ce0 g     O .rwdata	00000004 alt_errno
00000e50 g     F .text	00000070 putc
00000470 g     F .text	00000060 __divsi3
0000194c g       *ABS*	00000000 __flash_rodata_start
00001288 g     F .text	00000034 alt_irq_init
000015f8 g     F .text	00000060 alt_release_fd
00000f34 g     F .text	00000078 _write_r
00001cc4 g     O .rwdata	00000004 _impure_ptr
00001f98 g     O .bss	00000004 alt_argc
00001ccc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001ce4 g       *ABS*	00000000 _edata
00001fa4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001658 g     F .text	00000020 altera_nios2_qsys_irq_init
00001708 g     F .text	00000020 exit
000004d0 g     F .text	00000060 __modsi3
00005000 g       *ABS*	00000000 __alt_data_end
00001928 g     F .text	00000020 _exit
000006a0 g     F .text	00000020 strlen
000015c8 g     F .text	00000030 alt_icache_flush_all
00000d70 g     F .text	00000024 __vfprintf_internal
00001424 g     F .text	000000fc close
00000fac g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08400814 	ori	at,at,32
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a73114 	ori	gp,gp,40132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	1087e314 	ori	r2,r2,8076

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18c7e914 	ori	r3,r3,8100

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0000fac0 	call	fac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00010980 	call	1098 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
      5c:	defffe04 	addi	sp,sp,-8
      60:	df000115 	stw	fp,4(sp)
      64:	df000104 	addi	fp,sp,4
      68:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
      6c:	e037883a 	mov	sp,fp
      70:	df000017 	ldw	fp,0(sp)
      74:	dec00104 	addi	sp,sp,4
      78:	f800283a 	ret

0000007c <initial_message>:

static void initial_message()
{
      7c:	defffe04 	addi	sp,sp,-8
      80:	dfc00115 	stw	ra,4(sp)
      84:	df000015 	stw	fp,0(sp)
      88:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
      8c:	01000034 	movhi	r4,0
      90:	21065304 	addi	r4,r4,6476
      94:	000068c0 	call	68c <puts>
    printf("* Hello from Nios II!    *\n");
      98:	01000034 	movhi	r4,0
      9c:	21065b04 	addi	r4,r4,6508
      a0:	000068c0 	call	68c <puts>
    printf("* Counting from 00 to ff *\n");
      a4:	01000034 	movhi	r4,0
      a8:	21066204 	addi	r4,r4,6536
      ac:	000068c0 	call	68c <puts>
    printf("**************************\n");
      b0:	01000034 	movhi	r4,0
      b4:	21066904 	addi	r4,r4,6564
      b8:	000068c0 	call	68c <puts>
}
      bc:	e037883a 	mov	sp,fp
      c0:	dfc00117 	ldw	ra,4(sp)
      c4:	df000017 	ldw	fp,0(sp)
      c8:	dec00204 	addi	sp,sp,8
      cc:	f800283a 	ret

000000d0 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
      d0:	deffff04 	addi	sp,sp,-4
      d4:	df000015 	stw	fp,0(sp)
      d8:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
      dc:	d0a0b203 	ldbu	r2,-32056(gp)
      e0:	10c03fcc 	andi	r3,r2,255
      e4:	00800074 	movhi	r2,1
      e8:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
      ec:	e037883a 	mov	sp,fp
      f0:	df000017 	ldw	fp,0(sp)
      f4:	dec00104 	addi	sp,sp,4
      f8:	f800283a 	ret

000000fc <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
      fc:	deffff04 	addi	sp,sp,-4
     100:	df000015 	stw	fp,0(sp)
     104:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
     108:	e037883a 	mov	sp,fp
     10c:	df000017 	ldw	fp,0(sp)
     110:	dec00104 	addi	sp,sp,4
     114:	f800283a 	ret

00000118 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
     118:	defffd04 	addi	sp,sp,-12
     11c:	df000215 	stw	fp,8(sp)
     120:	df000204 	addi	fp,sp,8
     124:	e13fff15 	stw	r4,-4(fp)
    FILE *lcd = (FILE*) arg;
     128:	e0bfff17 	ldw	r2,-4(fp)
     12c:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
     130:	e037883a 	mov	sp,fp
     134:	df000017 	ldw	fp,0(sp)
     138:	dec00104 	addi	sp,sp,4
     13c:	f800283a 	ret

00000140 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
     140:	defffd04 	addi	sp,sp,-12
     144:	dfc00215 	stw	ra,8(sp)
     148:	df000115 	stw	fp,4(sp)
     14c:	df000104 	addi	fp,sp,4
     150:	e13fff15 	stw	r4,-4(fp)
    count_led();
     154:	00000d00 	call	d0 <count_led>
    count_sevenseg();
     158:	00000fc0 	call	fc <count_sevenseg>
    count_lcd( arg );
     15c:	e13fff17 	ldw	r4,-4(fp)
     160:	00001180 	call	118 <count_lcd>
    printf("%02x,  ", count);
     164:	d0a0b203 	ldbu	r2,-32056(gp)
     168:	11403fcc 	andi	r5,r2,255
     16c:	01000034 	movhi	r4,0
     170:	21067004 	addi	r4,r4,6592
     174:	00005400 	call	540 <printf>
}
     178:	e037883a 	mov	sp,fp
     17c:	dfc00117 	ldw	ra,4(sp)
     180:	df000017 	ldw	fp,0(sp)
     184:	dec00204 	addi	sp,sp,8
     188:	f800283a 	ret

0000018c <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
     18c:	defffa04 	addi	sp,sp,-24
     190:	dfc00515 	stw	ra,20(sp)
     194:	df000415 	stw	fp,16(sp)
     198:	df000404 	addi	fp,sp,16
     19c:	e17ffd15 	stw	r5,-12(fp)
     1a0:	e13ffc05 	stb	r4,-16(fp)
    /* Button press actions while counting. */
    if (type == 'c')
     1a4:	e0bffc03 	ldbu	r2,-16(fp)
     1a8:	108018d8 	cmpnei	r2,r2,99
     1ac:	1000201e 	bne	r2,zero,230 <handle_button_press+0xa4>
    {
        switch (edge_capture) 
     1b0:	d0a0b317 	ldw	r2,-32052(gp)
     1b4:	e0bfff15 	stw	r2,-4(fp)
     1b8:	e0ffff17 	ldw	r3,-4(fp)
     1bc:	188000a0 	cmpeqi	r2,r3,2
     1c0:	1000101e 	bne	r2,zero,204 <handle_button_press+0x78>
     1c4:	e0ffff17 	ldw	r3,-4(fp)
     1c8:	188000c8 	cmpgei	r2,r3,3
     1cc:	1000041e 	bne	r2,zero,1e0 <handle_button_press+0x54>
     1d0:	e0ffff17 	ldw	r3,-4(fp)
     1d4:	18800060 	cmpeqi	r2,r3,1
     1d8:	1000081e 	bne	r2,zero,1fc <handle_button_press+0x70>
     1dc:	00001106 	br	224 <handle_button_press+0x98>
     1e0:	e0ffff17 	ldw	r3,-4(fp)
     1e4:	18800120 	cmpeqi	r2,r3,4
     1e8:	1000081e 	bne	r2,zero,20c <handle_button_press+0x80>
     1ec:	e0ffff17 	ldw	r3,-4(fp)
     1f0:	18800220 	cmpeqi	r2,r3,8
     1f4:	1000081e 	bne	r2,zero,218 <handle_button_press+0x8c>
     1f8:	00000a06 	br	224 <handle_button_press+0x98>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
     1fc:	00000d00 	call	d0 <count_led>
            break;
     200:	00003506 	br	2d8 <handle_button_press+0x14c>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
     204:	00000fc0 	call	fc <count_sevenseg>
            break;
     208:	00003306 	br	2d8 <handle_button_press+0x14c>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
     20c:	e13ffd17 	ldw	r4,-12(fp)
     210:	00001180 	call	118 <count_lcd>
            break;
     214:	00003006 	br	2d8 <handle_button_press+0x14c>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
     218:	e13ffd17 	ldw	r4,-12(fp)
     21c:	00001400 	call	140 <count_all>
            break;
     220:	00002d06 	br	2d8 <handle_button_press+0x14c>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
     224:	e13ffd17 	ldw	r4,-12(fp)
     228:	00001400 	call	140 <count_all>
     22c:	00002a06 	br	2d8 <handle_button_press+0x14c>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
     230:	d0a0b317 	ldw	r2,-32052(gp)
     234:	e0bffe15 	stw	r2,-8(fp)
     238:	e0fffe17 	ldw	r3,-8(fp)
     23c:	188000a0 	cmpeqi	r2,r3,2
     240:	1000131e 	bne	r2,zero,290 <handle_button_press+0x104>
     244:	e0fffe17 	ldw	r3,-8(fp)
     248:	188000c8 	cmpgei	r2,r3,3
     24c:	1000041e 	bne	r2,zero,260 <handle_button_press+0xd4>
     250:	e0fffe17 	ldw	r3,-8(fp)
     254:	18800060 	cmpeqi	r2,r3,1
     258:	1000081e 	bne	r2,zero,27c <handle_button_press+0xf0>
     25c:	00001b06 	br	2cc <handle_button_press+0x140>
     260:	e0fffe17 	ldw	r3,-8(fp)
     264:	18800120 	cmpeqi	r2,r3,4
     268:	10000e1e 	bne	r2,zero,2a4 <handle_button_press+0x118>
     26c:	e0fffe17 	ldw	r3,-8(fp)
     270:	18800220 	cmpeqi	r2,r3,8
     274:	1000101e 	bne	r2,zero,2b8 <handle_button_press+0x12c>
     278:	00001406 	br	2cc <handle_button_press+0x140>
        {
        case 0x1:
            printf( "Button 1\n");
     27c:	01000034 	movhi	r4,0
     280:	21067204 	addi	r4,r4,6600
     284:	000068c0 	call	68c <puts>
            edge_capture = 0;
     288:	d020b315 	stw	zero,-32052(gp)
            break;
     28c:	00001206 	br	2d8 <handle_button_press+0x14c>
        case 0x2:
            printf( "Button 2\n");
     290:	01000034 	movhi	r4,0
     294:	21067504 	addi	r4,r4,6612
     298:	000068c0 	call	68c <puts>
            edge_capture = 0;
     29c:	d020b315 	stw	zero,-32052(gp)
            break;
     2a0:	00000d06 	br	2d8 <handle_button_press+0x14c>
        case 0x4:
            printf( "Button 3\n");
     2a4:	01000034 	movhi	r4,0
     2a8:	21067804 	addi	r4,r4,6624
     2ac:	000068c0 	call	68c <puts>
            edge_capture = 0;
     2b0:	d020b315 	stw	zero,-32052(gp)
            break;
     2b4:	00000806 	br	2d8 <handle_button_press+0x14c>
        case 0x8:
            printf( "Button 4\n");
     2b8:	01000034 	movhi	r4,0
     2bc:	21067b04 	addi	r4,r4,6636
     2c0:	000068c0 	call	68c <puts>
            edge_capture = 0;
     2c4:	d020b315 	stw	zero,-32052(gp)
            break;
     2c8:	00000306 	br	2d8 <handle_button_press+0x14c>
        default:
            printf( "Button press UNKNOWN!!\n");
     2cc:	01000034 	movhi	r4,0
     2d0:	21067e04 	addi	r4,r4,6648
     2d4:	000068c0 	call	68c <puts>
        }
    }
}
     2d8:	e037883a 	mov	sp,fp
     2dc:	dfc00117 	ldw	ra,4(sp)
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00204 	addi	sp,sp,8
     2e8:	f800283a 	ret

000002ec <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
     2ec:	defffb04 	addi	sp,sp,-20
     2f0:	dfc00415 	stw	ra,16(sp)
     2f4:	df000315 	stw	fp,12(sp)
     2f8:	df000304 	addi	fp,sp,12
    int i;
    int wait_time;
    FILE * lcd;

    count = 0;
     2fc:	d020b205 	stb	zero,-32056(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
     300:	e03ffd15 	stw	zero,-12(fp)
    if(lcd != NULL) {lcd_init( lcd );}
     304:	e0bffd17 	ldw	r2,-12(fp)
     308:	1005003a 	cmpeq	r2,r2,zero
     30c:	1000021e 	bne	r2,zero,318 <main+0x2c>
     310:	e13ffd17 	ldw	r4,-12(fp)
     314:	000005c0 	call	5c <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
     318:	000007c0 	call	7c <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
     31c:	010000b4 	movhi	r4,2
     320:	2121a804 	addi	r4,r4,-31072
     324:	00010d80 	call	10d8 <usleep>
        if (edge_capture != 0)
     328:	d0a0b317 	ldw	r2,-32052(gp)
     32c:	1005003a 	cmpeq	r2,r2,zero
     330:	1000041e 	bne	r2,zero,344 <main+0x58>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
     334:	010018c4 	movi	r4,99
     338:	e17ffd17 	ldw	r5,-12(fp)
     33c:	000018c0 	call	18c <handle_button_press>
     340:	00000206 	br	34c <main+0x60>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
     344:	e13ffd17 	ldw	r4,-12(fp)
     348:	00001400 	call	140 <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
     34c:	d0a0b203 	ldbu	r2,-32056(gp)
     350:	10803fcc 	andi	r2,r2,255
     354:	10803fd8 	cmpnei	r2,r2,255
     358:	1000221e 	bne	r2,zero,3e4 <main+0xf8>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
     35c:	01000034 	movhi	r4,0
     360:	21068404 	addi	r4,r4,6672
     364:	00005400 	call	540 <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
     368:	d020b315 	stw	zero,-32052(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
     36c:	e03ffe15 	stw	zero,-8(fp)
            for (i = 0; i<70; ++i)
     370:	e03fff15 	stw	zero,-4(fp)
     374:	00001506 	br	3cc <main+0xe0>
            {
                printf(".");
     378:	01000b84 	movi	r4,46
     37c:	00005d80 	call	5d8 <putchar>
                wait_time = i/10;
     380:	e13fff17 	ldw	r4,-4(fp)
     384:	01400284 	movi	r5,10
     388:	00004700 	call	470 <__divsi3>
     38c:	e0bffe15 	stw	r2,-8(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
     390:	d0a0b317 	ldw	r2,-32052(gp)
     394:	1005003a 	cmpeq	r2,r2,zero
     398:	1000061e 	bne	r2,zero,3b4 <main+0xc8>
                {
                    printf( "\nYou pushed:  " );
     39c:	01000034 	movhi	r4,0
     3a0:	21068704 	addi	r4,r4,6684
     3a4:	00005400 	call	540 <printf>
                    handle_button_press('w', lcd);
     3a8:	01001dc4 	movi	r4,119
     3ac:	e17ffd17 	ldw	r5,-12(fp)
     3b0:	000018c0 	call	18c <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
     3b4:	010000b4 	movhi	r4,2
     3b8:	2121a804 	addi	r4,r4,-31072
     3bc:	00010d80 	call	10d8 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
     3c0:	e0bfff17 	ldw	r2,-4(fp)
     3c4:	10800044 	addi	r2,r2,1
     3c8:	e0bfff15 	stw	r2,-4(fp)
     3cc:	e0bfff17 	ldw	r2,-4(fp)
     3d0:	10801190 	cmplti	r2,r2,70
     3d4:	103fe81e 	bne	r2,zero,378 <main+0x8c>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
     3d8:	000007c0 	call	7c <initial_message>
            lcd_init( lcd );
     3dc:	e13ffd17 	ldw	r4,-12(fp)
     3e0:	000005c0 	call	5c <lcd_init>
        }
        count++;
     3e4:	d0a0b203 	ldbu	r2,-32056(gp)
     3e8:	10800044 	addi	r2,r2,1
     3ec:	d0a0b205 	stb	r2,-32056(gp)
    }
     3f0:	003fca06 	br	31c <main+0x30>

000003f4 <udivmodsi4>:
     3f4:	29001b2e 	bgeu	r5,r4,464 <udivmodsi4+0x70>
     3f8:	28001a16 	blt	r5,zero,464 <udivmodsi4+0x70>
     3fc:	00800044 	movi	r2,1
     400:	0007883a 	mov	r3,zero
     404:	01c007c4 	movi	r7,31
     408:	00000306 	br	418 <udivmodsi4+0x24>
     40c:	19c01326 	beq	r3,r7,45c <udivmodsi4+0x68>
     410:	18c00044 	addi	r3,r3,1
     414:	28000416 	blt	r5,zero,428 <udivmodsi4+0x34>
     418:	294b883a 	add	r5,r5,r5
     41c:	1085883a 	add	r2,r2,r2
     420:	293ffa36 	bltu	r5,r4,40c <udivmodsi4+0x18>
     424:	10000d26 	beq	r2,zero,45c <udivmodsi4+0x68>
     428:	0007883a 	mov	r3,zero
     42c:	21400236 	bltu	r4,r5,438 <udivmodsi4+0x44>
     430:	2149c83a 	sub	r4,r4,r5
     434:	1886b03a 	or	r3,r3,r2
     438:	1004d07a 	srli	r2,r2,1
     43c:	280ad07a 	srli	r5,r5,1
     440:	103ffa1e 	bne	r2,zero,42c <udivmodsi4+0x38>
     444:	30000226 	beq	r6,zero,450 <udivmodsi4+0x5c>
     448:	2005883a 	mov	r2,r4
     44c:	f800283a 	ret
     450:	1809883a 	mov	r4,r3
     454:	2005883a 	mov	r2,r4
     458:	f800283a 	ret
     45c:	0007883a 	mov	r3,zero
     460:	003ff806 	br	444 <udivmodsi4+0x50>
     464:	00800044 	movi	r2,1
     468:	0007883a 	mov	r3,zero
     46c:	003fef06 	br	42c <udivmodsi4+0x38>

00000470 <__divsi3>:
     470:	defffe04 	addi	sp,sp,-8
     474:	dc000015 	stw	r16,0(sp)
     478:	dfc00115 	stw	ra,4(sp)
     47c:	0021883a 	mov	r16,zero
     480:	20000c16 	blt	r4,zero,4b4 <__divsi3+0x44>
     484:	000d883a 	mov	r6,zero
     488:	28000e16 	blt	r5,zero,4c4 <__divsi3+0x54>
     48c:	00003f40 	call	3f4 <udivmodsi4>
     490:	1007883a 	mov	r3,r2
     494:	8005003a 	cmpeq	r2,r16,zero
     498:	1000011e 	bne	r2,zero,4a0 <__divsi3+0x30>
     49c:	00c7c83a 	sub	r3,zero,r3
     4a0:	1805883a 	mov	r2,r3
     4a4:	dfc00117 	ldw	ra,4(sp)
     4a8:	dc000017 	ldw	r16,0(sp)
     4ac:	dec00204 	addi	sp,sp,8
     4b0:	f800283a 	ret
     4b4:	0109c83a 	sub	r4,zero,r4
     4b8:	04000044 	movi	r16,1
     4bc:	000d883a 	mov	r6,zero
     4c0:	283ff20e 	bge	r5,zero,48c <__divsi3+0x1c>
     4c4:	014bc83a 	sub	r5,zero,r5
     4c8:	8021003a 	cmpeq	r16,r16,zero
     4cc:	003fef06 	br	48c <__divsi3+0x1c>

000004d0 <__modsi3>:
     4d0:	deffff04 	addi	sp,sp,-4
     4d4:	dfc00015 	stw	ra,0(sp)
     4d8:	01800044 	movi	r6,1
     4dc:	2807883a 	mov	r3,r5
     4e0:	20000416 	blt	r4,zero,4f4 <__modsi3+0x24>
     4e4:	28000c16 	blt	r5,zero,518 <__modsi3+0x48>
     4e8:	dfc00017 	ldw	ra,0(sp)
     4ec:	dec00104 	addi	sp,sp,4
     4f0:	00003f41 	jmpi	3f4 <udivmodsi4>
     4f4:	0109c83a 	sub	r4,zero,r4
     4f8:	28000b16 	blt	r5,zero,528 <__modsi3+0x58>
     4fc:	180b883a 	mov	r5,r3
     500:	01800044 	movi	r6,1
     504:	00003f40 	call	3f4 <udivmodsi4>
     508:	0085c83a 	sub	r2,zero,r2
     50c:	dfc00017 	ldw	ra,0(sp)
     510:	dec00104 	addi	sp,sp,4
     514:	f800283a 	ret
     518:	014bc83a 	sub	r5,zero,r5
     51c:	dfc00017 	ldw	ra,0(sp)
     520:	dec00104 	addi	sp,sp,4
     524:	00003f41 	jmpi	3f4 <udivmodsi4>
     528:	0147c83a 	sub	r3,zero,r5
     52c:	003ff306 	br	4fc <__modsi3+0x2c>

00000530 <__udivsi3>:
     530:	000d883a 	mov	r6,zero
     534:	00003f41 	jmpi	3f4 <udivmodsi4>

00000538 <__umodsi3>:
     538:	01800044 	movi	r6,1
     53c:	00003f41 	jmpi	3f4 <udivmodsi4>

00000540 <printf>:
     540:	defffb04 	addi	sp,sp,-20
     544:	dfc00115 	stw	ra,4(sp)
     548:	d9400215 	stw	r5,8(sp)
     54c:	d9800315 	stw	r6,12(sp)
     550:	d9c00415 	stw	r7,16(sp)
     554:	00800034 	movhi	r2,0
     558:	10873104 	addi	r2,r2,7364
     55c:	11400017 	ldw	r5,0(r2)
     560:	d8800204 	addi	r2,sp,8
     564:	d8800015 	stw	r2,0(sp)
     568:	29c00217 	ldw	r7,8(r5)
     56c:	100d883a 	mov	r6,r2
     570:	00800034 	movhi	r2,0
     574:	10836504 	addi	r2,r2,3476
     578:	200b883a 	mov	r5,r4
     57c:	38800115 	stw	r2,4(r7)
     580:	3809883a 	mov	r4,r7
     584:	0000d700 	call	d70 <__vfprintf_internal>
     588:	dfc00117 	ldw	ra,4(sp)
     58c:	dec00504 	addi	sp,sp,20
     590:	f800283a 	ret

00000594 <_printf_r>:
     594:	defffc04 	addi	sp,sp,-16
     598:	dfc00115 	stw	ra,4(sp)
     59c:	d9800215 	stw	r6,8(sp)
     5a0:	d9c00315 	stw	r7,12(sp)
     5a4:	22000217 	ldw	r8,8(r4)
     5a8:	d8800204 	addi	r2,sp,8
     5ac:	d8800015 	stw	r2,0(sp)
     5b0:	100f883a 	mov	r7,r2
     5b4:	00800034 	movhi	r2,0
     5b8:	10836504 	addi	r2,r2,3476
     5bc:	280d883a 	mov	r6,r5
     5c0:	40800115 	stw	r2,4(r8)
     5c4:	400b883a 	mov	r5,r8
     5c8:	00007400 	call	740 <___vfprintf_internal_r>
     5cc:	dfc00117 	ldw	ra,4(sp)
     5d0:	dec00404 	addi	sp,sp,16
     5d4:	f800283a 	ret

000005d8 <putchar>:
     5d8:	00800034 	movhi	r2,0
     5dc:	10873104 	addi	r2,r2,7364
     5e0:	11800017 	ldw	r6,0(r2)
     5e4:	200b883a 	mov	r5,r4
     5e8:	3009883a 	mov	r4,r6
     5ec:	31800217 	ldw	r6,8(r6)
     5f0:	0000ec01 	jmpi	ec0 <_putc_r>

000005f4 <_putchar_r>:
     5f4:	21800217 	ldw	r6,8(r4)
     5f8:	0000ec01 	jmpi	ec0 <_putc_r>

000005fc <_puts_r>:
     5fc:	defffd04 	addi	sp,sp,-12
     600:	dc000015 	stw	r16,0(sp)
     604:	2021883a 	mov	r16,r4
     608:	2809883a 	mov	r4,r5
     60c:	dfc00215 	stw	ra,8(sp)
     610:	dc400115 	stw	r17,4(sp)
     614:	2823883a 	mov	r17,r5
     618:	00006a00 	call	6a0 <strlen>
     61c:	80c00217 	ldw	r3,8(r16)
     620:	02000034 	movhi	r8,0
     624:	42036504 	addi	r8,r8,3476
     628:	880d883a 	mov	r6,r17
     62c:	100f883a 	mov	r7,r2
     630:	8009883a 	mov	r4,r16
     634:	180b883a 	mov	r5,r3
     638:	1a000115 	stw	r8,4(r3)
     63c:	403ee83a 	callr	r8
     640:	047fffc4 	movi	r17,-1
     644:	8009883a 	mov	r4,r16
     648:	01800034 	movhi	r6,0
     64c:	31868b04 	addi	r6,r6,6700
     650:	01c00044 	movi	r7,1
     654:	1440071e 	bne	r2,r17,674 <_puts_r+0x78>
     658:	00ffffc4 	movi	r3,-1
     65c:	1805883a 	mov	r2,r3
     660:	dfc00217 	ldw	ra,8(sp)
     664:	dc400117 	ldw	r17,4(sp)
     668:	dc000017 	ldw	r16,0(sp)
     66c:	dec00304 	addi	sp,sp,12
     670:	f800283a 	ret
     674:	81400217 	ldw	r5,8(r16)
     678:	28c00117 	ldw	r3,4(r5)
     67c:	183ee83a 	callr	r3
     680:	0007883a 	mov	r3,zero
     684:	147ff51e 	bne	r2,r17,65c <_puts_r+0x60>
     688:	003ff306 	br	658 <_puts_r+0x5c>

0000068c <puts>:
     68c:	00800034 	movhi	r2,0
     690:	10873104 	addi	r2,r2,7364
     694:	200b883a 	mov	r5,r4
     698:	11000017 	ldw	r4,0(r2)
     69c:	00005fc1 	jmpi	5fc <_puts_r>

000006a0 <strlen>:
     6a0:	20800007 	ldb	r2,0(r4)
     6a4:	10000526 	beq	r2,zero,6bc <strlen+0x1c>
     6a8:	2007883a 	mov	r3,r4
     6ac:	18c00044 	addi	r3,r3,1
     6b0:	18800007 	ldb	r2,0(r3)
     6b4:	103ffd1e 	bne	r2,zero,6ac <strlen+0xc>
     6b8:	1905c83a 	sub	r2,r3,r4
     6bc:	f800283a 	ret

000006c0 <print_repeat>:
     6c0:	defffb04 	addi	sp,sp,-20
     6c4:	dc800315 	stw	r18,12(sp)
     6c8:	dc400215 	stw	r17,8(sp)
     6cc:	dc000115 	stw	r16,4(sp)
     6d0:	dfc00415 	stw	ra,16(sp)
     6d4:	2025883a 	mov	r18,r4
     6d8:	2823883a 	mov	r17,r5
     6dc:	3821883a 	mov	r16,r7
     6e0:	d9800005 	stb	r6,0(sp)
     6e4:	9009883a 	mov	r4,r18
     6e8:	880b883a 	mov	r5,r17
     6ec:	d80d883a 	mov	r6,sp
     6f0:	01c00044 	movi	r7,1
     6f4:	04000b0e 	bge	zero,r16,724 <print_repeat+0x64>
     6f8:	88c00117 	ldw	r3,4(r17)
     6fc:	843fffc4 	addi	r16,r16,-1
     700:	183ee83a 	callr	r3
     704:	103ff726 	beq	r2,zero,6e4 <print_repeat+0x24>
     708:	00bfffc4 	movi	r2,-1
     70c:	dfc00417 	ldw	ra,16(sp)
     710:	dc800317 	ldw	r18,12(sp)
     714:	dc400217 	ldw	r17,8(sp)
     718:	dc000117 	ldw	r16,4(sp)
     71c:	dec00504 	addi	sp,sp,20
     720:	f800283a 	ret
     724:	0005883a 	mov	r2,zero
     728:	dfc00417 	ldw	ra,16(sp)
     72c:	dc800317 	ldw	r18,12(sp)
     730:	dc400217 	ldw	r17,8(sp)
     734:	dc000117 	ldw	r16,4(sp)
     738:	dec00504 	addi	sp,sp,20
     73c:	f800283a 	ret

00000740 <___vfprintf_internal_r>:
     740:	deffe404 	addi	sp,sp,-112
     744:	ddc01915 	stw	r23,100(sp)
     748:	dd801815 	stw	r22,96(sp)
     74c:	dcc01515 	stw	r19,84(sp)
     750:	dc401315 	stw	r17,76(sp)
     754:	dc001215 	stw	r16,72(sp)
     758:	dfc01b15 	stw	ra,108(sp)
     75c:	df001a15 	stw	fp,104(sp)
     760:	dd401715 	stw	r21,92(sp)
     764:	dd001615 	stw	r20,88(sp)
     768:	dc801415 	stw	r18,80(sp)
     76c:	d9001015 	stw	r4,64(sp)
     770:	2827883a 	mov	r19,r5
     774:	d9c01115 	stw	r7,68(sp)
     778:	3023883a 	mov	r17,r6
     77c:	0021883a 	mov	r16,zero
     780:	d8000f15 	stw	zero,60(sp)
     784:	d8000e15 	stw	zero,56(sp)
     788:	002f883a 	mov	r23,zero
     78c:	d8000915 	stw	zero,36(sp)
     790:	d8000d15 	stw	zero,52(sp)
     794:	d8000c15 	stw	zero,48(sp)
     798:	d8000b15 	stw	zero,44(sp)
     79c:	002d883a 	mov	r22,zero
     7a0:	89400003 	ldbu	r5,0(r17)
     7a4:	01c00044 	movi	r7,1
     7a8:	8c400044 	addi	r17,r17,1
     7ac:	29003fcc 	andi	r4,r5,255
     7b0:	2100201c 	xori	r4,r4,128
     7b4:	213fe004 	addi	r4,r4,-128
     7b8:	20001526 	beq	r4,zero,810 <___vfprintf_internal_r+0xd0>
     7bc:	81c03326 	beq	r16,r7,88c <___vfprintf_internal_r+0x14c>
     7c0:	3c002016 	blt	r7,r16,844 <___vfprintf_internal_r+0x104>
     7c4:	803ff61e 	bne	r16,zero,7a0 <___vfprintf_internal_r+0x60>
     7c8:	00800944 	movi	r2,37
     7cc:	2081311e 	bne	r4,r2,c94 <___vfprintf_internal_r+0x554>
     7d0:	05ffffc4 	movi	r23,-1
     7d4:	00800284 	movi	r2,10
     7d8:	d9c00c15 	stw	r7,48(sp)
     7dc:	d8000f15 	stw	zero,60(sp)
     7e0:	d8000e15 	stw	zero,56(sp)
     7e4:	ddc00915 	stw	r23,36(sp)
     7e8:	d8800d15 	stw	r2,52(sp)
     7ec:	d8000b15 	stw	zero,44(sp)
     7f0:	89400003 	ldbu	r5,0(r17)
     7f4:	3821883a 	mov	r16,r7
     7f8:	8c400044 	addi	r17,r17,1
     7fc:	29003fcc 	andi	r4,r5,255
     800:	2100201c 	xori	r4,r4,128
     804:	213fe004 	addi	r4,r4,-128
     808:	01c00044 	movi	r7,1
     80c:	203feb1e 	bne	r4,zero,7bc <___vfprintf_internal_r+0x7c>
     810:	b005883a 	mov	r2,r22
     814:	dfc01b17 	ldw	ra,108(sp)
     818:	df001a17 	ldw	fp,104(sp)
     81c:	ddc01917 	ldw	r23,100(sp)
     820:	dd801817 	ldw	r22,96(sp)
     824:	dd401717 	ldw	r21,92(sp)
     828:	dd001617 	ldw	r20,88(sp)
     82c:	dcc01517 	ldw	r19,84(sp)
     830:	dc801417 	ldw	r18,80(sp)
     834:	dc401317 	ldw	r17,76(sp)
     838:	dc001217 	ldw	r16,72(sp)
     83c:	dec01c04 	addi	sp,sp,112
     840:	f800283a 	ret
     844:	00800084 	movi	r2,2
     848:	80801526 	beq	r16,r2,8a0 <___vfprintf_internal_r+0x160>
     84c:	008000c4 	movi	r2,3
     850:	80bfd31e 	bne	r16,r2,7a0 <___vfprintf_internal_r+0x60>
     854:	29bff404 	addi	r6,r5,-48
     858:	30c03fcc 	andi	r3,r6,255
     85c:	00800244 	movi	r2,9
     860:	10c01c36 	bltu	r2,r3,8d4 <___vfprintf_internal_r+0x194>
     864:	d8c00917 	ldw	r3,36(sp)
     868:	18010816 	blt	r3,zero,c8c <___vfprintf_internal_r+0x54c>
     86c:	d9000917 	ldw	r4,36(sp)
     870:	20c002a4 	muli	r3,r4,10
     874:	30803fcc 	andi	r2,r6,255
     878:	1080201c 	xori	r2,r2,128
     87c:	10bfe004 	addi	r2,r2,-128
     880:	1887883a 	add	r3,r3,r2
     884:	d8c00915 	stw	r3,36(sp)
     888:	003fc506 	br	7a0 <___vfprintf_internal_r+0x60>
     88c:	00800c04 	movi	r2,48
     890:	20809526 	beq	r4,r2,ae8 <___vfprintf_internal_r+0x3a8>
     894:	00800944 	movi	r2,37
     898:	20810e26 	beq	r4,r2,cd4 <___vfprintf_internal_r+0x594>
     89c:	04000084 	movi	r16,2
     8a0:	29bff404 	addi	r6,r5,-48
     8a4:	30c03fcc 	andi	r3,r6,255
     8a8:	00800244 	movi	r2,9
     8ac:	10c00736 	bltu	r2,r3,8cc <___vfprintf_internal_r+0x18c>
     8b0:	b8009816 	blt	r23,zero,b14 <___vfprintf_internal_r+0x3d4>
     8b4:	b9c002a4 	muli	r7,r23,10
     8b8:	30803fcc 	andi	r2,r6,255
     8bc:	1080201c 	xori	r2,r2,128
     8c0:	10bfe004 	addi	r2,r2,-128
     8c4:	38af883a 	add	r23,r7,r2
     8c8:	003fb506 	br	7a0 <___vfprintf_internal_r+0x60>
     8cc:	00800b84 	movi	r2,46
     8d0:	20808a26 	beq	r4,r2,afc <___vfprintf_internal_r+0x3bc>
     8d4:	00801b04 	movi	r2,108
     8d8:	20808a26 	beq	r4,r2,b04 <___vfprintf_internal_r+0x3c4>
     8dc:	d8c00917 	ldw	r3,36(sp)
     8e0:	18008e16 	blt	r3,zero,b1c <___vfprintf_internal_r+0x3dc>
     8e4:	d8000f15 	stw	zero,60(sp)
     8e8:	28bfea04 	addi	r2,r5,-88
     8ec:	10803fcc 	andi	r2,r2,255
     8f0:	00c00804 	movi	r3,32
     8f4:	18802836 	bltu	r3,r2,998 <___vfprintf_internal_r+0x258>
     8f8:	1085883a 	add	r2,r2,r2
     8fc:	1085883a 	add	r2,r2,r2
     900:	00c00034 	movhi	r3,0
     904:	18c24504 	addi	r3,r3,2324
     908:	10c5883a 	add	r2,r2,r3
     90c:	11000017 	ldw	r4,0(r2)
     910:	2000683a 	jmp	r4
     914:	00000b90 	cmplti	zero,zero,46
     918:	00000998 	cmpnei	zero,zero,38
     91c:	00000998 	cmpnei	zero,zero,38
     920:	00000998 	cmpnei	zero,zero,38
     924:	00000998 	cmpnei	zero,zero,38
     928:	00000998 	cmpnei	zero,zero,38
     92c:	00000998 	cmpnei	zero,zero,38
     930:	00000998 	cmpnei	zero,zero,38
     934:	00000998 	cmpnei	zero,zero,38
     938:	00000998 	cmpnei	zero,zero,38
     93c:	00000998 	cmpnei	zero,zero,38
     940:	00000ba8 	cmpgeui	zero,zero,46
     944:	000009ac 	andhi	zero,zero,38
     948:	00000998 	cmpnei	zero,zero,38
     94c:	00000998 	cmpnei	zero,zero,38
     950:	00000998 	cmpnei	zero,zero,38
     954:	00000998 	cmpnei	zero,zero,38
     958:	000009ac 	andhi	zero,zero,38
     95c:	00000998 	cmpnei	zero,zero,38
     960:	00000998 	cmpnei	zero,zero,38
     964:	00000998 	cmpnei	zero,zero,38
     968:	00000998 	cmpnei	zero,zero,38
     96c:	00000998 	cmpnei	zero,zero,38
     970:	00000c10 	cmplti	zero,zero,48
     974:	00000998 	cmpnei	zero,zero,38
     978:	00000998 	cmpnei	zero,zero,38
     97c:	00000998 	cmpnei	zero,zero,38
     980:	00000c20 	cmpeqi	zero,zero,48
     984:	00000998 	cmpnei	zero,zero,38
     988:	000009a8 	cmpgeui	zero,zero,38
     98c:	00000998 	cmpnei	zero,zero,38
     990:	00000998 	cmpnei	zero,zero,38
     994:	000009a0 	cmpeqi	zero,zero,38
     998:	0021883a 	mov	r16,zero
     99c:	003f8006 	br	7a0 <___vfprintf_internal_r+0x60>
     9a0:	00800404 	movi	r2,16
     9a4:	d8800d15 	stw	r2,52(sp)
     9a8:	d8000c15 	stw	zero,48(sp)
     9ac:	d8800c17 	ldw	r2,48(sp)
     9b0:	10006c1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x424>
     9b4:	d9001117 	ldw	r4,68(sp)
     9b8:	21c00104 	addi	r7,r4,4
     9bc:	24000017 	ldw	r16,0(r4)
     9c0:	d9c01115 	stw	r7,68(sp)
     9c4:	d8000a15 	stw	zero,40(sp)
     9c8:	80006d26 	beq	r16,zero,b80 <___vfprintf_internal_r+0x440>
     9cc:	d8c00b17 	ldw	r3,44(sp)
     9d0:	dc800104 	addi	r18,sp,4
     9d4:	9039883a 	mov	fp,r18
     9d8:	05400244 	movi	r21,9
     9dc:	1829003a 	cmpeq	r20,r3,zero
     9e0:	00000506 	br	9f8 <___vfprintf_internal_r+0x2b8>
     9e4:	21000c04 	addi	r4,r4,48
     9e8:	91000005 	stb	r4,0(r18)
     9ec:	94800044 	addi	r18,r18,1
     9f0:	18000e26 	beq	r3,zero,a2c <___vfprintf_internal_r+0x2ec>
     9f4:	1821883a 	mov	r16,r3
     9f8:	d9400d17 	ldw	r5,52(sp)
     9fc:	8009883a 	mov	r4,r16
     a00:	00005300 	call	530 <__udivsi3>
     a04:	d9000d17 	ldw	r4,52(sp)
     a08:	1007883a 	mov	r3,r2
     a0c:	2085383a 	mul	r2,r4,r2
     a10:	8089c83a 	sub	r4,r16,r2
     a14:	a93ff30e 	bge	r21,r4,9e4 <___vfprintf_internal_r+0x2a4>
     a18:	a000361e 	bne	r20,zero,af4 <___vfprintf_internal_r+0x3b4>
     a1c:	21000dc4 	addi	r4,r4,55
     a20:	91000005 	stb	r4,0(r18)
     a24:	94800044 	addi	r18,r18,1
     a28:	183ff21e 	bne	r3,zero,9f4 <___vfprintf_internal_r+0x2b4>
     a2c:	9729c83a 	sub	r20,r18,fp
     a30:	d8800917 	ldw	r2,36(sp)
     a34:	150bc83a 	sub	r5,r2,r20
     a38:	0140100e 	bge	zero,r5,a7c <___vfprintf_internal_r+0x33c>
     a3c:	e0800804 	addi	r2,fp,32
     a40:	90800e2e 	bgeu	r18,r2,a7c <___vfprintf_internal_r+0x33c>
     a44:	00800c04 	movi	r2,48
     a48:	28ffffc4 	addi	r3,r5,-1
     a4c:	90800005 	stb	r2,0(r18)
     a50:	91000044 	addi	r4,r18,1
     a54:	00c0070e 	bge	zero,r3,a74 <___vfprintf_internal_r+0x334>
     a58:	e0800804 	addi	r2,fp,32
     a5c:	2080052e 	bgeu	r4,r2,a74 <___vfprintf_internal_r+0x334>
     a60:	00800c04 	movi	r2,48
     a64:	20800005 	stb	r2,0(r4)
     a68:	21000044 	addi	r4,r4,1
     a6c:	9145883a 	add	r2,r18,r5
     a70:	20bff91e 	bne	r4,r2,a58 <___vfprintf_internal_r+0x318>
     a74:	2729c83a 	sub	r20,r4,fp
     a78:	2025883a 	mov	r18,r4
     a7c:	d8c00a17 	ldw	r3,40(sp)
     a80:	d9000f17 	ldw	r4,60(sp)
     a84:	1d05883a 	add	r2,r3,r20
     a88:	b8a1c83a 	sub	r16,r23,r2
     a8c:	20002626 	beq	r4,zero,b28 <___vfprintf_internal_r+0x3e8>
     a90:	1805003a 	cmpeq	r2,r3,zero
     a94:	1000a226 	beq	r2,zero,d20 <___vfprintf_internal_r+0x5e0>
     a98:	04009916 	blt	zero,r16,d00 <___vfprintf_internal_r+0x5c0>
     a9c:	b005883a 	mov	r2,r22
     aa0:	0500890e 	bge	zero,r20,cc8 <___vfprintf_internal_r+0x588>
     aa4:	102d883a 	mov	r22,r2
     aa8:	1521883a 	add	r16,r2,r20
     aac:	00000206 	br	ab8 <___vfprintf_internal_r+0x378>
     ab0:	b5800044 	addi	r22,r22,1
     ab4:	85bfb826 	beq	r16,r22,998 <___vfprintf_internal_r+0x258>
     ab8:	94bfffc4 	addi	r18,r18,-1
     abc:	90800003 	ldbu	r2,0(r18)
     ac0:	98c00117 	ldw	r3,4(r19)
     ac4:	d9001017 	ldw	r4,64(sp)
     ac8:	d8800005 	stb	r2,0(sp)
     acc:	980b883a 	mov	r5,r19
     ad0:	d80d883a 	mov	r6,sp
     ad4:	01c00044 	movi	r7,1
     ad8:	183ee83a 	callr	r3
     adc:	103ff426 	beq	r2,zero,ab0 <___vfprintf_internal_r+0x370>
     ae0:	05bfffc4 	movi	r22,-1
     ae4:	003f4a06 	br	810 <___vfprintf_internal_r+0xd0>
     ae8:	04000084 	movi	r16,2
     aec:	d9c00f15 	stw	r7,60(sp)
     af0:	003f2b06 	br	7a0 <___vfprintf_internal_r+0x60>
     af4:	210015c4 	addi	r4,r4,87
     af8:	003fbb06 	br	9e8 <___vfprintf_internal_r+0x2a8>
     afc:	040000c4 	movi	r16,3
     b00:	003f2706 	br	7a0 <___vfprintf_internal_r+0x60>
     b04:	00800044 	movi	r2,1
     b08:	040000c4 	movi	r16,3
     b0c:	d8800e15 	stw	r2,56(sp)
     b10:	003f2306 	br	7a0 <___vfprintf_internal_r+0x60>
     b14:	000f883a 	mov	r7,zero
     b18:	003f6706 	br	8b8 <___vfprintf_internal_r+0x178>
     b1c:	01000044 	movi	r4,1
     b20:	d9000915 	stw	r4,36(sp)
     b24:	003f7006 	br	8e8 <___vfprintf_internal_r+0x1a8>
     b28:	04008916 	blt	zero,r16,d50 <___vfprintf_internal_r+0x610>
     b2c:	d8c00a17 	ldw	r3,40(sp)
     b30:	1805003a 	cmpeq	r2,r3,zero
     b34:	103fd91e 	bne	r2,zero,a9c <___vfprintf_internal_r+0x35c>
     b38:	98c00117 	ldw	r3,4(r19)
     b3c:	d9001017 	ldw	r4,64(sp)
     b40:	00800b44 	movi	r2,45
     b44:	d8800005 	stb	r2,0(sp)
     b48:	980b883a 	mov	r5,r19
     b4c:	d80d883a 	mov	r6,sp
     b50:	01c00044 	movi	r7,1
     b54:	183ee83a 	callr	r3
     b58:	103fe11e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     b5c:	b0800044 	addi	r2,r22,1
     b60:	003fcf06 	br	aa0 <___vfprintf_internal_r+0x360>
     b64:	d8c01117 	ldw	r3,68(sp)
     b68:	1c000017 	ldw	r16,0(r3)
     b6c:	18c00104 	addi	r3,r3,4
     b70:	d8c01115 	stw	r3,68(sp)
     b74:	80005016 	blt	r16,zero,cb8 <___vfprintf_internal_r+0x578>
     b78:	d8000a15 	stw	zero,40(sp)
     b7c:	803f931e 	bne	r16,zero,9cc <___vfprintf_internal_r+0x28c>
     b80:	dc800104 	addi	r18,sp,4
     b84:	9039883a 	mov	fp,r18
     b88:	0029883a 	mov	r20,zero
     b8c:	003fa806 	br	a30 <___vfprintf_internal_r+0x2f0>
     b90:	00800404 	movi	r2,16
     b94:	00c00044 	movi	r3,1
     b98:	d8800d15 	stw	r2,52(sp)
     b9c:	d8000c15 	stw	zero,48(sp)
     ba0:	d8c00b15 	stw	r3,44(sp)
     ba4:	003f8106 	br	9ac <___vfprintf_internal_r+0x26c>
     ba8:	04000044 	movi	r16,1
     bac:	85c0080e 	bge	r16,r23,bd0 <___vfprintf_internal_r+0x490>
     bb0:	d9001017 	ldw	r4,64(sp)
     bb4:	980b883a 	mov	r5,r19
     bb8:	01800804 	movi	r6,32
     bbc:	b9ffffc4 	addi	r7,r23,-1
     bc0:	00006c00 	call	6c0 <print_repeat>
     bc4:	103fc61e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     bc8:	bd85883a 	add	r2,r23,r22
     bcc:	15bfffc4 	addi	r22,r2,-1
     bd0:	d8c01117 	ldw	r3,68(sp)
     bd4:	d9001017 	ldw	r4,64(sp)
     bd8:	800f883a 	mov	r7,r16
     bdc:	18800017 	ldw	r2,0(r3)
     be0:	98c00117 	ldw	r3,4(r19)
     be4:	980b883a 	mov	r5,r19
     be8:	d8800005 	stb	r2,0(sp)
     bec:	d80d883a 	mov	r6,sp
     bf0:	183ee83a 	callr	r3
     bf4:	103fba1e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     bf8:	d9001117 	ldw	r4,68(sp)
     bfc:	b5800044 	addi	r22,r22,1
     c00:	0021883a 	mov	r16,zero
     c04:	21000104 	addi	r4,r4,4
     c08:	d9001115 	stw	r4,68(sp)
     c0c:	003ee406 	br	7a0 <___vfprintf_internal_r+0x60>
     c10:	01000204 	movi	r4,8
     c14:	d9000d15 	stw	r4,52(sp)
     c18:	d8000c15 	stw	zero,48(sp)
     c1c:	003f6306 	br	9ac <___vfprintf_internal_r+0x26c>
     c20:	d8801117 	ldw	r2,68(sp)
     c24:	15000017 	ldw	r20,0(r2)
     c28:	a009883a 	mov	r4,r20
     c2c:	00006a00 	call	6a0 <strlen>
     c30:	b8a1c83a 	sub	r16,r23,r2
     c34:	1025883a 	mov	r18,r2
     c38:	0400070e 	bge	zero,r16,c58 <___vfprintf_internal_r+0x518>
     c3c:	d9001017 	ldw	r4,64(sp)
     c40:	980b883a 	mov	r5,r19
     c44:	01800804 	movi	r6,32
     c48:	800f883a 	mov	r7,r16
     c4c:	00006c00 	call	6c0 <print_repeat>
     c50:	103fa31e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     c54:	b42d883a 	add	r22,r22,r16
     c58:	98c00117 	ldw	r3,4(r19)
     c5c:	d9001017 	ldw	r4,64(sp)
     c60:	a00d883a 	mov	r6,r20
     c64:	980b883a 	mov	r5,r19
     c68:	900f883a 	mov	r7,r18
     c6c:	183ee83a 	callr	r3
     c70:	103f9b1e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     c74:	d8c01117 	ldw	r3,68(sp)
     c78:	b4ad883a 	add	r22,r22,r18
     c7c:	0021883a 	mov	r16,zero
     c80:	18c00104 	addi	r3,r3,4
     c84:	d8c01115 	stw	r3,68(sp)
     c88:	003ec506 	br	7a0 <___vfprintf_internal_r+0x60>
     c8c:	0007883a 	mov	r3,zero
     c90:	003ef806 	br	874 <___vfprintf_internal_r+0x134>
     c94:	98c00117 	ldw	r3,4(r19)
     c98:	d9001017 	ldw	r4,64(sp)
     c9c:	d9400005 	stb	r5,0(sp)
     ca0:	d80d883a 	mov	r6,sp
     ca4:	980b883a 	mov	r5,r19
     ca8:	183ee83a 	callr	r3
     cac:	103f8c1e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     cb0:	b5800044 	addi	r22,r22,1
     cb4:	003eba06 	br	7a0 <___vfprintf_internal_r+0x60>
     cb8:	00800044 	movi	r2,1
     cbc:	0421c83a 	sub	r16,zero,r16
     cc0:	d8800a15 	stw	r2,40(sp)
     cc4:	003f4006 	br	9c8 <___vfprintf_internal_r+0x288>
     cc8:	102d883a 	mov	r22,r2
     ccc:	0021883a 	mov	r16,zero
     cd0:	003eb306 	br	7a0 <___vfprintf_internal_r+0x60>
     cd4:	98c00117 	ldw	r3,4(r19)
     cd8:	d9000005 	stb	r4,0(sp)
     cdc:	d9001017 	ldw	r4,64(sp)
     ce0:	980b883a 	mov	r5,r19
     ce4:	d80d883a 	mov	r6,sp
     ce8:	800f883a 	mov	r7,r16
     cec:	183ee83a 	callr	r3
     cf0:	103f7b1e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     cf4:	b42d883a 	add	r22,r22,r16
     cf8:	0021883a 	mov	r16,zero
     cfc:	003ea806 	br	7a0 <___vfprintf_internal_r+0x60>
     d00:	d9001017 	ldw	r4,64(sp)
     d04:	980b883a 	mov	r5,r19
     d08:	01800c04 	movi	r6,48
     d0c:	800f883a 	mov	r7,r16
     d10:	00006c00 	call	6c0 <print_repeat>
     d14:	103f721e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     d18:	b405883a 	add	r2,r22,r16
     d1c:	003f6006 	br	aa0 <___vfprintf_internal_r+0x360>
     d20:	98c00117 	ldw	r3,4(r19)
     d24:	d9001017 	ldw	r4,64(sp)
     d28:	00800b44 	movi	r2,45
     d2c:	d8800005 	stb	r2,0(sp)
     d30:	980b883a 	mov	r5,r19
     d34:	d80d883a 	mov	r6,sp
     d38:	01c00044 	movi	r7,1
     d3c:	183ee83a 	callr	r3
     d40:	103f671e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     d44:	b5800044 	addi	r22,r22,1
     d48:	043f540e 	bge	zero,r16,a9c <___vfprintf_internal_r+0x35c>
     d4c:	003fec06 	br	d00 <___vfprintf_internal_r+0x5c0>
     d50:	d9001017 	ldw	r4,64(sp)
     d54:	980b883a 	mov	r5,r19
     d58:	01800804 	movi	r6,32
     d5c:	800f883a 	mov	r7,r16
     d60:	00006c00 	call	6c0 <print_repeat>
     d64:	103f5e1e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x3a0>
     d68:	b42d883a 	add	r22,r22,r16
     d6c:	003f6f06 	br	b2c <___vfprintf_internal_r+0x3ec>

00000d70 <__vfprintf_internal>:
     d70:	00800034 	movhi	r2,0
     d74:	10873104 	addi	r2,r2,7364
     d78:	2013883a 	mov	r9,r4
     d7c:	11000017 	ldw	r4,0(r2)
     d80:	2805883a 	mov	r2,r5
     d84:	300f883a 	mov	r7,r6
     d88:	480b883a 	mov	r5,r9
     d8c:	100d883a 	mov	r6,r2
     d90:	00007401 	jmpi	740 <___vfprintf_internal_r>

00000d94 <__sfvwrite_small_dev>:
     d94:	2880000b 	ldhu	r2,0(r5)
     d98:	defffa04 	addi	sp,sp,-24
     d9c:	dcc00315 	stw	r19,12(sp)
     da0:	1080020c 	andi	r2,r2,8
     da4:	dc800215 	stw	r18,8(sp)
     da8:	dc400115 	stw	r17,4(sp)
     dac:	dfc00515 	stw	ra,20(sp)
     db0:	dd000415 	stw	r20,16(sp)
     db4:	dc000015 	stw	r16,0(sp)
     db8:	2825883a 	mov	r18,r5
     dbc:	2027883a 	mov	r19,r4
     dc0:	3023883a 	mov	r17,r6
     dc4:	10002026 	beq	r2,zero,e48 <__sfvwrite_small_dev+0xb4>
     dc8:	2940008f 	ldh	r5,2(r5)
     dcc:	28000f16 	blt	r5,zero,e0c <__sfvwrite_small_dev+0x78>
     dd0:	01c01b0e 	bge	zero,r7,e40 <__sfvwrite_small_dev+0xac>
     dd4:	3821883a 	mov	r16,r7
     dd8:	05010004 	movi	r20,1024
     ddc:	00000206 	br	de8 <__sfvwrite_small_dev+0x54>
     de0:	0400170e 	bge	zero,r16,e40 <__sfvwrite_small_dev+0xac>
     de4:	9140008f 	ldh	r5,2(r18)
     de8:	880d883a 	mov	r6,r17
     dec:	9809883a 	mov	r4,r19
     df0:	800f883a 	mov	r7,r16
     df4:	a400010e 	bge	r20,r16,dfc <__sfvwrite_small_dev+0x68>
     df8:	01c10004 	movi	r7,1024
     dfc:	0000f340 	call	f34 <_write_r>
     e00:	88a3883a 	add	r17,r17,r2
     e04:	80a1c83a 	sub	r16,r16,r2
     e08:	00bff516 	blt	zero,r2,de0 <__sfvwrite_small_dev+0x4c>
     e0c:	9080000b 	ldhu	r2,0(r18)
     e10:	00ffffc4 	movi	r3,-1
     e14:	10801014 	ori	r2,r2,64
     e18:	9080000d 	sth	r2,0(r18)
     e1c:	1805883a 	mov	r2,r3
     e20:	dfc00517 	ldw	ra,20(sp)
     e24:	dd000417 	ldw	r20,16(sp)
     e28:	dcc00317 	ldw	r19,12(sp)
     e2c:	dc800217 	ldw	r18,8(sp)
     e30:	dc400117 	ldw	r17,4(sp)
     e34:	dc000017 	ldw	r16,0(sp)
     e38:	dec00604 	addi	sp,sp,24
     e3c:	f800283a 	ret
     e40:	0007883a 	mov	r3,zero
     e44:	003ff506 	br	e1c <__sfvwrite_small_dev+0x88>
     e48:	00ffffc4 	movi	r3,-1
     e4c:	003ff306 	br	e1c <__sfvwrite_small_dev+0x88>

00000e50 <putc>:
     e50:	defffd04 	addi	sp,sp,-12
     e54:	00800034 	movhi	r2,0
     e58:	10873104 	addi	r2,r2,7364
     e5c:	dc000115 	stw	r16,4(sp)
     e60:	2021883a 	mov	r16,r4
     e64:	11000017 	ldw	r4,0(r2)
     e68:	dc000005 	stb	r16,0(sp)
     e6c:	00800034 	movhi	r2,0
     e70:	10836504 	addi	r2,r2,3476
     e74:	dfc00215 	stw	ra,8(sp)
     e78:	28800115 	stw	r2,4(r5)
     e7c:	d80d883a 	mov	r6,sp
     e80:	01c00044 	movi	r7,1
     e84:	103ee83a 	callr	r2
     e88:	1007883a 	mov	r3,r2
     e8c:	00bfffc4 	movi	r2,-1
     e90:	18800526 	beq	r3,r2,ea8 <putc+0x58>
     e94:	8005883a 	mov	r2,r16
     e98:	dfc00217 	ldw	ra,8(sp)
     e9c:	dc000117 	ldw	r16,4(sp)
     ea0:	dec00304 	addi	sp,sp,12
     ea4:	f800283a 	ret
     ea8:	1821883a 	mov	r16,r3
     eac:	8005883a 	mov	r2,r16
     eb0:	dfc00217 	ldw	ra,8(sp)
     eb4:	dc000117 	ldw	r16,4(sp)
     eb8:	dec00304 	addi	sp,sp,12
     ebc:	f800283a 	ret

00000ec0 <_putc_r>:
     ec0:	00800034 	movhi	r2,0
     ec4:	10873104 	addi	r2,r2,7364
     ec8:	defffd04 	addi	sp,sp,-12
     ecc:	11000017 	ldw	r4,0(r2)
     ed0:	00800034 	movhi	r2,0
     ed4:	10836504 	addi	r2,r2,3476
     ed8:	30800115 	stw	r2,4(r6)
     edc:	dc000115 	stw	r16,4(sp)
     ee0:	2821883a 	mov	r16,r5
     ee4:	dfc00215 	stw	ra,8(sp)
     ee8:	300b883a 	mov	r5,r6
     eec:	01c00044 	movi	r7,1
     ef0:	d80d883a 	mov	r6,sp
     ef4:	dc000005 	stb	r16,0(sp)
     ef8:	103ee83a 	callr	r2
     efc:	1007883a 	mov	r3,r2
     f00:	00bfffc4 	movi	r2,-1
     f04:	18800526 	beq	r3,r2,f1c <_putc_r+0x5c>
     f08:	8005883a 	mov	r2,r16
     f0c:	dfc00217 	ldw	ra,8(sp)
     f10:	dc000117 	ldw	r16,4(sp)
     f14:	dec00304 	addi	sp,sp,12
     f18:	f800283a 	ret
     f1c:	1821883a 	mov	r16,r3
     f20:	8005883a 	mov	r2,r16
     f24:	dfc00217 	ldw	ra,8(sp)
     f28:	dc000117 	ldw	r16,4(sp)
     f2c:	dec00304 	addi	sp,sp,12
     f30:	f800283a 	ret

00000f34 <_write_r>:
     f34:	defffd04 	addi	sp,sp,-12
     f38:	dc000015 	stw	r16,0(sp)
     f3c:	04000034 	movhi	r16,0
     f40:	8407e504 	addi	r16,r16,8084
     f44:	dc400115 	stw	r17,4(sp)
     f48:	80000015 	stw	zero,0(r16)
     f4c:	2023883a 	mov	r17,r4
     f50:	2809883a 	mov	r4,r5
     f54:	300b883a 	mov	r5,r6
     f58:	380d883a 	mov	r6,r7
     f5c:	dfc00215 	stw	ra,8(sp)
     f60:	00011080 	call	1108 <write>
     f64:	1007883a 	mov	r3,r2
     f68:	00bfffc4 	movi	r2,-1
     f6c:	18800626 	beq	r3,r2,f88 <_write_r+0x54>
     f70:	1805883a 	mov	r2,r3
     f74:	dfc00217 	ldw	ra,8(sp)
     f78:	dc400117 	ldw	r17,4(sp)
     f7c:	dc000017 	ldw	r16,0(sp)
     f80:	dec00304 	addi	sp,sp,12
     f84:	f800283a 	ret
     f88:	80800017 	ldw	r2,0(r16)
     f8c:	103ff826 	beq	r2,zero,f70 <_write_r+0x3c>
     f90:	88800015 	stw	r2,0(r17)
     f94:	1805883a 	mov	r2,r3
     f98:	dfc00217 	ldw	ra,8(sp)
     f9c:	dc400117 	ldw	r17,4(sp)
     fa0:	dc000017 	ldw	r16,0(sp)
     fa4:	dec00304 	addi	sp,sp,12
     fa8:	f800283a 	ret

00000fac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     fac:	defffe04 	addi	sp,sp,-8
     fb0:	dfc00115 	stw	ra,4(sp)
     fb4:	df000015 	stw	fp,0(sp)
     fb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     fbc:	01000034 	movhi	r4,0
     fc0:	21073904 	addi	r4,r4,7396
     fc4:	01400034 	movhi	r5,0
     fc8:	29468f04 	addi	r5,r5,6716
     fcc:	01800034 	movhi	r6,0
     fd0:	31873904 	addi	r6,r6,7396
     fd4:	000102c0 	call	102c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     fd8:	01000034 	movhi	r4,0
     fdc:	21000804 	addi	r4,r4,32
     fe0:	01400034 	movhi	r5,0
     fe4:	29400804 	addi	r5,r5,32
     fe8:	01800034 	movhi	r6,0
     fec:	31800804 	addi	r6,r6,32
     ff0:	000102c0 	call	102c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     ff4:	01000034 	movhi	r4,0
     ff8:	21065304 	addi	r4,r4,6476
     ffc:	01400034 	movhi	r5,0
    1000:	29465304 	addi	r5,r5,6476
    1004:	01800034 	movhi	r6,0
    1008:	31868f04 	addi	r6,r6,6716
    100c:	000102c0 	call	102c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1010:	00015800 	call	1580 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1014:	00015c80 	call	15c8 <alt_icache_flush_all>
}
    1018:	e037883a 	mov	sp,fp
    101c:	dfc00117 	ldw	ra,4(sp)
    1020:	df000017 	ldw	fp,0(sp)
    1024:	dec00204 	addi	sp,sp,8
    1028:	f800283a 	ret

0000102c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    102c:	defffc04 	addi	sp,sp,-16
    1030:	df000315 	stw	fp,12(sp)
    1034:	df000304 	addi	fp,sp,12
    1038:	e13ffd15 	stw	r4,-12(fp)
    103c:	e17ffe15 	stw	r5,-8(fp)
    1040:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1044:	e0fffe17 	ldw	r3,-8(fp)
    1048:	e0bffd17 	ldw	r2,-12(fp)
    104c:	18800e26 	beq	r3,r2,1088 <alt_load_section+0x5c>
  {
    while( to != end )
    1050:	00000a06 	br	107c <alt_load_section+0x50>
    {
      *to++ = *from++;
    1054:	e0bffd17 	ldw	r2,-12(fp)
    1058:	10c00017 	ldw	r3,0(r2)
    105c:	e0bffe17 	ldw	r2,-8(fp)
    1060:	10c00015 	stw	r3,0(r2)
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	10800104 	addi	r2,r2,4
    106c:	e0bffe15 	stw	r2,-8(fp)
    1070:	e0bffd17 	ldw	r2,-12(fp)
    1074:	10800104 	addi	r2,r2,4
    1078:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    107c:	e0fffe17 	ldw	r3,-8(fp)
    1080:	e0bfff17 	ldw	r2,-4(fp)
    1084:	18bff31e 	bne	r3,r2,1054 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1088:	e037883a 	mov	sp,fp
    108c:	df000017 	ldw	fp,0(sp)
    1090:	dec00104 	addi	sp,sp,4
    1094:	f800283a 	ret

00001098 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1098:	defffd04 	addi	sp,sp,-12
    109c:	dfc00215 	stw	ra,8(sp)
    10a0:	df000115 	stw	fp,4(sp)
    10a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    10a8:	0009883a 	mov	r4,zero
    10ac:	00012880 	call	1288 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    10b0:	00012bc0 	call	12bc <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    10b4:	d120b517 	ldw	r4,-32044(gp)
    10b8:	d160b617 	ldw	r5,-32040(gp)
    10bc:	d1a0b717 	ldw	r6,-32036(gp)
    10c0:	00002ec0 	call	2ec <main>
    10c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    10c8:	01000044 	movi	r4,1
    10cc:	00014240 	call	1424 <close>
  exit (result);
    10d0:	e13fff17 	ldw	r4,-4(fp)
    10d4:	00017080 	call	1708 <exit>

000010d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    10d8:	defffd04 	addi	sp,sp,-12
    10dc:	dfc00215 	stw	ra,8(sp)
    10e0:	df000115 	stw	fp,4(sp)
    10e4:	df000104 	addi	fp,sp,4
    10e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    10ec:	e13fff17 	ldw	r4,-4(fp)
    10f0:	00012d80 	call	12d8 <alt_busy_sleep>
}
    10f4:	e037883a 	mov	sp,fp
    10f8:	dfc00117 	ldw	ra,4(sp)
    10fc:	df000017 	ldw	fp,0(sp)
    1100:	dec00204 	addi	sp,sp,8
    1104:	f800283a 	ret

00001108 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1108:	defff704 	addi	sp,sp,-36
    110c:	dfc00815 	stw	ra,32(sp)
    1110:	df000715 	stw	fp,28(sp)
    1114:	df000704 	addi	fp,sp,28
    1118:	e13ffb15 	stw	r4,-20(fp)
    111c:	e17ffc15 	stw	r5,-16(fp)
    1120:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    1124:	e0bffb17 	ldw	r2,-20(fp)
    1128:	1004803a 	cmplt	r2,r2,zero
    112c:	1000081e 	bne	r2,zero,1150 <write+0x48>
    1130:	e0bffb17 	ldw	r2,-20(fp)
    1134:	10800324 	muli	r2,r2,12
    1138:	1007883a 	mov	r3,r2
    113c:	00800034 	movhi	r2,0
    1140:	1086d104 	addi	r2,r2,6980
    1144:	1887883a 	add	r3,r3,r2
    1148:	e0ffff15 	stw	r3,-4(fp)
    114c:	00000106 	br	1154 <write+0x4c>
    1150:	e03fff15 	stw	zero,-4(fp)
    1154:	e0bfff17 	ldw	r2,-4(fp)
    1158:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    115c:	e0bffa17 	ldw	r2,-24(fp)
    1160:	1005003a 	cmpeq	r2,r2,zero
    1164:	1000241e 	bne	r2,zero,11f8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1168:	e0bffa17 	ldw	r2,-24(fp)
    116c:	10800217 	ldw	r2,8(r2)
    1170:	108000cc 	andi	r2,r2,3
    1174:	1005003a 	cmpeq	r2,r2,zero
    1178:	10001a1e 	bne	r2,zero,11e4 <write+0xdc>
    117c:	e0bffa17 	ldw	r2,-24(fp)
    1180:	10800017 	ldw	r2,0(r2)
    1184:	10800617 	ldw	r2,24(r2)
    1188:	1005003a 	cmpeq	r2,r2,zero
    118c:	1000151e 	bne	r2,zero,11e4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    1190:	e0bffa17 	ldw	r2,-24(fp)
    1194:	10800017 	ldw	r2,0(r2)
    1198:	10800617 	ldw	r2,24(r2)
    119c:	e17ffc17 	ldw	r5,-16(fp)
    11a0:	e1bffd17 	ldw	r6,-12(fp)
    11a4:	e13ffa17 	ldw	r4,-24(fp)
    11a8:	103ee83a 	callr	r2
    11ac:	e0bff915 	stw	r2,-28(fp)
    11b0:	e0bff917 	ldw	r2,-28(fp)
    11b4:	1004403a 	cmpge	r2,r2,zero
    11b8:	1000071e 	bne	r2,zero,11d8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    11bc:	00012280 	call	1228 <alt_get_errno>
    11c0:	e0fff917 	ldw	r3,-28(fp)
    11c4:	00c7c83a 	sub	r3,zero,r3
    11c8:	10c00015 	stw	r3,0(r2)
        return -1;
    11cc:	00bfffc4 	movi	r2,-1
    11d0:	e0bffe15 	stw	r2,-8(fp)
    11d4:	00000e06 	br	1210 <write+0x108>
      }
      return rval;
    11d8:	e0bff917 	ldw	r2,-28(fp)
    11dc:	e0bffe15 	stw	r2,-8(fp)
    11e0:	00000b06 	br	1210 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    11e4:	00012280 	call	1228 <alt_get_errno>
    11e8:	1007883a 	mov	r3,r2
    11ec:	00800344 	movi	r2,13
    11f0:	18800015 	stw	r2,0(r3)
    11f4:	00000406 	br	1208 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    11f8:	00012280 	call	1228 <alt_get_errno>
    11fc:	1007883a 	mov	r3,r2
    1200:	00801444 	movi	r2,81
    1204:	18800015 	stw	r2,0(r3)
  }
  return -1;
    1208:	00bfffc4 	movi	r2,-1
    120c:	e0bffe15 	stw	r2,-8(fp)
    1210:	e0bffe17 	ldw	r2,-8(fp)
}
    1214:	e037883a 	mov	sp,fp
    1218:	dfc00117 	ldw	ra,4(sp)
    121c:	df000017 	ldw	fp,0(sp)
    1220:	dec00204 	addi	sp,sp,8
    1224:	f800283a 	ret

00001228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1228:	defffd04 	addi	sp,sp,-12
    122c:	dfc00215 	stw	ra,8(sp)
    1230:	df000115 	stw	fp,4(sp)
    1234:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1238:	00800034 	movhi	r2,0
    123c:	10873804 	addi	r2,r2,7392
    1240:	10800017 	ldw	r2,0(r2)
    1244:	1005003a 	cmpeq	r2,r2,zero
    1248:	1000061e 	bne	r2,zero,1264 <alt_get_errno+0x3c>
    124c:	00800034 	movhi	r2,0
    1250:	10873804 	addi	r2,r2,7392
    1254:	10800017 	ldw	r2,0(r2)
    1258:	103ee83a 	callr	r2
    125c:	e0bfff15 	stw	r2,-4(fp)
    1260:	00000306 	br	1270 <alt_get_errno+0x48>
    1264:	00800034 	movhi	r2,0
    1268:	1087e504 	addi	r2,r2,8084
    126c:	e0bfff15 	stw	r2,-4(fp)
    1270:	e0bfff17 	ldw	r2,-4(fp)
}
    1274:	e037883a 	mov	sp,fp
    1278:	dfc00117 	ldw	ra,4(sp)
    127c:	df000017 	ldw	fp,0(sp)
    1280:	dec00204 	addi	sp,sp,8
    1284:	f800283a 	ret

00001288 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1288:	defffd04 	addi	sp,sp,-12
    128c:	dfc00215 	stw	ra,8(sp)
    1290:	df000115 	stw	fp,4(sp)
    1294:	df000104 	addi	fp,sp,4
    1298:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    129c:	00016580 	call	1658 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    12a0:	00800044 	movi	r2,1
    12a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    12a8:	e037883a 	mov	sp,fp
    12ac:	dfc00117 	ldw	ra,4(sp)
    12b0:	df000017 	ldw	fp,0(sp)
    12b4:	dec00204 	addi	sp,sp,8
    12b8:	f800283a 	ret

000012bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    12bc:	deffff04 	addi	sp,sp,-4
    12c0:	df000015 	stw	fp,0(sp)
    12c4:	d839883a 	mov	fp,sp
}
    12c8:	e037883a 	mov	sp,fp
    12cc:	df000017 	ldw	fp,0(sp)
    12d0:	dec00104 	addi	sp,sp,4
    12d4:	f800283a 	ret

000012d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    12d8:	defffa04 	addi	sp,sp,-24
    12dc:	dfc00515 	stw	ra,20(sp)
    12e0:	df000415 	stw	fp,16(sp)
    12e4:	df000404 	addi	fp,sp,16
    12e8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    12ec:	008000c4 	movi	r2,3
    12f0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    12f4:	e0fffc17 	ldw	r3,-16(fp)
    12f8:	008003f4 	movhi	r2,15
    12fc:	10909004 	addi	r2,r2,16960
    1300:	188b383a 	mul	r5,r3,r2
    1304:	0100bef4 	movhi	r4,763
    1308:	213c2004 	addi	r4,r4,-3968
    130c:	00005300 	call	530 <__udivsi3>
    1310:	100b883a 	mov	r5,r2
    1314:	01200034 	movhi	r4,32768
    1318:	213fffc4 	addi	r4,r4,-1
    131c:	00005300 	call	530 <__udivsi3>
    1320:	100b883a 	mov	r5,r2
    1324:	e13fff17 	ldw	r4,-4(fp)
    1328:	00005300 	call	530 <__udivsi3>
    132c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1330:	e0bffd17 	ldw	r2,-12(fp)
    1334:	1005003a 	cmpeq	r2,r2,zero
    1338:	1000281e 	bne	r2,zero,13dc <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
    133c:	e03ffe15 	stw	zero,-8(fp)
    1340:	00001606 	br	139c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1344:	00a00034 	movhi	r2,32768
    1348:	10bfffc4 	addi	r2,r2,-1
    134c:	10bfffc4 	addi	r2,r2,-1
    1350:	103ffe1e 	bne	r2,zero,134c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1354:	e0fffc17 	ldw	r3,-16(fp)
    1358:	008003f4 	movhi	r2,15
    135c:	10909004 	addi	r2,r2,16960
    1360:	188b383a 	mul	r5,r3,r2
    1364:	0100bef4 	movhi	r4,763
    1368:	213c2004 	addi	r4,r4,-3968
    136c:	00005300 	call	530 <__udivsi3>
    1370:	100b883a 	mov	r5,r2
    1374:	01200034 	movhi	r4,32768
    1378:	213fffc4 	addi	r4,r4,-1
    137c:	00005300 	call	530 <__udivsi3>
    1380:	1007883a 	mov	r3,r2
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	10c5c83a 	sub	r2,r2,r3
    138c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1390:	e0bffe17 	ldw	r2,-8(fp)
    1394:	10800044 	addi	r2,r2,1
    1398:	e0bffe15 	stw	r2,-8(fp)
    139c:	e0fffe17 	ldw	r3,-8(fp)
    13a0:	e0bffd17 	ldw	r2,-12(fp)
    13a4:	18bfe716 	blt	r3,r2,1344 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    13a8:	e0fffc17 	ldw	r3,-16(fp)
    13ac:	008003f4 	movhi	r2,15
    13b0:	10909004 	addi	r2,r2,16960
    13b4:	188b383a 	mul	r5,r3,r2
    13b8:	0100bef4 	movhi	r4,763
    13bc:	213c2004 	addi	r4,r4,-3968
    13c0:	00005300 	call	530 <__udivsi3>
    13c4:	1007883a 	mov	r3,r2
    13c8:	e0bfff17 	ldw	r2,-4(fp)
    13cc:	1885383a 	mul	r2,r3,r2
    13d0:	10bfffc4 	addi	r2,r2,-1
    13d4:	103ffe1e 	bne	r2,zero,13d0 <alt_busy_sleep+0xf8>
    13d8:	00000c06 	br	140c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    13dc:	e0fffc17 	ldw	r3,-16(fp)
    13e0:	008003f4 	movhi	r2,15
    13e4:	10909004 	addi	r2,r2,16960
    13e8:	188b383a 	mul	r5,r3,r2
    13ec:	0100bef4 	movhi	r4,763
    13f0:	213c2004 	addi	r4,r4,-3968
    13f4:	00005300 	call	530 <__udivsi3>
    13f8:	1007883a 	mov	r3,r2
    13fc:	e0bfff17 	ldw	r2,-4(fp)
    1400:	1885383a 	mul	r2,r3,r2
    1404:	10bfffc4 	addi	r2,r2,-1
    1408:	00bffe16 	blt	zero,r2,1404 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    140c:	0005883a 	mov	r2,zero
}
    1410:	e037883a 	mov	sp,fp
    1414:	dfc00117 	ldw	ra,4(sp)
    1418:	df000017 	ldw	fp,0(sp)
    141c:	dec00204 	addi	sp,sp,8
    1420:	f800283a 	ret

00001424 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1424:	defff804 	addi	sp,sp,-32
    1428:	dfc00715 	stw	ra,28(sp)
    142c:	df000615 	stw	fp,24(sp)
    1430:	df000604 	addi	fp,sp,24
    1434:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1438:	e0bffc17 	ldw	r2,-16(fp)
    143c:	1004803a 	cmplt	r2,r2,zero
    1440:	1000081e 	bne	r2,zero,1464 <close+0x40>
    1444:	e0bffc17 	ldw	r2,-16(fp)
    1448:	10800324 	muli	r2,r2,12
    144c:	1007883a 	mov	r3,r2
    1450:	00800034 	movhi	r2,0
    1454:	1086d104 	addi	r2,r2,6980
    1458:	1887883a 	add	r3,r3,r2
    145c:	e0ffff15 	stw	r3,-4(fp)
    1460:	00000106 	br	1468 <close+0x44>
    1464:	e03fff15 	stw	zero,-4(fp)
    1468:	e0bfff17 	ldw	r2,-4(fp)
    146c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    1470:	e0bffb17 	ldw	r2,-20(fp)
    1474:	1005003a 	cmpeq	r2,r2,zero
    1478:	10001d1e 	bne	r2,zero,14f0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    147c:	e0bffb17 	ldw	r2,-20(fp)
    1480:	10800017 	ldw	r2,0(r2)
    1484:	10800417 	ldw	r2,16(r2)
    1488:	1005003a 	cmpeq	r2,r2,zero
    148c:	1000071e 	bne	r2,zero,14ac <close+0x88>
    1490:	e0bffb17 	ldw	r2,-20(fp)
    1494:	10800017 	ldw	r2,0(r2)
    1498:	10800417 	ldw	r2,16(r2)
    149c:	e13ffb17 	ldw	r4,-20(fp)
    14a0:	103ee83a 	callr	r2
    14a4:	e0bffe15 	stw	r2,-8(fp)
    14a8:	00000106 	br	14b0 <close+0x8c>
    14ac:	e03ffe15 	stw	zero,-8(fp)
    14b0:	e0bffe17 	ldw	r2,-8(fp)
    14b4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    14b8:	e13ffc17 	ldw	r4,-16(fp)
    14bc:	00015f80 	call	15f8 <alt_release_fd>
    if (rval < 0)
    14c0:	e0bffa17 	ldw	r2,-24(fp)
    14c4:	1004403a 	cmpge	r2,r2,zero
    14c8:	1000071e 	bne	r2,zero,14e8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    14cc:	00015200 	call	1520 <alt_get_errno>
    14d0:	e0fffa17 	ldw	r3,-24(fp)
    14d4:	00c7c83a 	sub	r3,zero,r3
    14d8:	10c00015 	stw	r3,0(r2)
      return -1;
    14dc:	00bfffc4 	movi	r2,-1
    14e0:	e0bffd15 	stw	r2,-12(fp)
    14e4:	00000806 	br	1508 <close+0xe4>
    }
    return 0;
    14e8:	e03ffd15 	stw	zero,-12(fp)
    14ec:	00000606 	br	1508 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    14f0:	00015200 	call	1520 <alt_get_errno>
    14f4:	1007883a 	mov	r3,r2
    14f8:	00801444 	movi	r2,81
    14fc:	18800015 	stw	r2,0(r3)
    return -1;
    1500:	00bfffc4 	movi	r2,-1
    1504:	e0bffd15 	stw	r2,-12(fp)
    1508:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    150c:	e037883a 	mov	sp,fp
    1510:	dfc00117 	ldw	ra,4(sp)
    1514:	df000017 	ldw	fp,0(sp)
    1518:	dec00204 	addi	sp,sp,8
    151c:	f800283a 	ret

00001520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1520:	defffd04 	addi	sp,sp,-12
    1524:	dfc00215 	stw	ra,8(sp)
    1528:	df000115 	stw	fp,4(sp)
    152c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1530:	00800034 	movhi	r2,0
    1534:	10873804 	addi	r2,r2,7392
    1538:	10800017 	ldw	r2,0(r2)
    153c:	1005003a 	cmpeq	r2,r2,zero
    1540:	1000061e 	bne	r2,zero,155c <alt_get_errno+0x3c>
    1544:	00800034 	movhi	r2,0
    1548:	10873804 	addi	r2,r2,7392
    154c:	10800017 	ldw	r2,0(r2)
    1550:	103ee83a 	callr	r2
    1554:	e0bfff15 	stw	r2,-4(fp)
    1558:	00000306 	br	1568 <alt_get_errno+0x48>
    155c:	00800034 	movhi	r2,0
    1560:	1087e504 	addi	r2,r2,8084
    1564:	e0bfff15 	stw	r2,-4(fp)
    1568:	e0bfff17 	ldw	r2,-4(fp)
}
    156c:	e037883a 	mov	sp,fp
    1570:	dfc00117 	ldw	ra,4(sp)
    1574:	df000017 	ldw	fp,0(sp)
    1578:	dec00204 	addi	sp,sp,8
    157c:	f800283a 	ret

00001580 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1580:	deffff04 	addi	sp,sp,-4
    1584:	df000015 	stw	fp,0(sp)
    1588:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    158c:	e037883a 	mov	sp,fp
    1590:	df000017 	ldw	fp,0(sp)
    1594:	dec00104 	addi	sp,sp,4
    1598:	f800283a 	ret

0000159c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    159c:	defffc04 	addi	sp,sp,-16
    15a0:	df000315 	stw	fp,12(sp)
    15a4:	df000304 	addi	fp,sp,12
    15a8:	e13ffd15 	stw	r4,-12(fp)
    15ac:	e17ffe15 	stw	r5,-8(fp)
    15b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    15b4:	e0bfff17 	ldw	r2,-4(fp)
}
    15b8:	e037883a 	mov	sp,fp
    15bc:	df000017 	ldw	fp,0(sp)
    15c0:	dec00104 	addi	sp,sp,4
    15c4:	f800283a 	ret

000015c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    15c8:	defffe04 	addi	sp,sp,-8
    15cc:	dfc00115 	stw	ra,4(sp)
    15d0:	df000015 	stw	fp,0(sp)
    15d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    15d8:	0009883a 	mov	r4,zero
    15dc:	01420004 	movi	r5,2048
    15e0:	00016780 	call	1678 <alt_icache_flush>
#endif
}
    15e4:	e037883a 	mov	sp,fp
    15e8:	dfc00117 	ldw	ra,4(sp)
    15ec:	df000017 	ldw	fp,0(sp)
    15f0:	dec00204 	addi	sp,sp,8
    15f4:	f800283a 	ret

000015f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    15f8:	defffe04 	addi	sp,sp,-8
    15fc:	df000115 	stw	fp,4(sp)
    1600:	df000104 	addi	fp,sp,4
    1604:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    1608:	e0bfff17 	ldw	r2,-4(fp)
    160c:	108000d0 	cmplti	r2,r2,3
    1610:	10000d1e 	bne	r2,zero,1648 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    1614:	e0bfff17 	ldw	r2,-4(fp)
    1618:	00c00034 	movhi	r3,0
    161c:	18c6d104 	addi	r3,r3,6980
    1620:	10800324 	muli	r2,r2,12
    1624:	10c5883a 	add	r2,r2,r3
    1628:	10800204 	addi	r2,r2,8
    162c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    1630:	e0bfff17 	ldw	r2,-4(fp)
    1634:	00c00034 	movhi	r3,0
    1638:	18c6d104 	addi	r3,r3,6980
    163c:	10800324 	muli	r2,r2,12
    1640:	10c5883a 	add	r2,r2,r3
    1644:	10000015 	stw	zero,0(r2)
  }
}
    1648:	e037883a 	mov	sp,fp
    164c:	df000017 	ldw	fp,0(sp)
    1650:	dec00104 	addi	sp,sp,4
    1654:	f800283a 	ret

00001658 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    1658:	deffff04 	addi	sp,sp,-4
    165c:	df000015 	stw	fp,0(sp)
    1660:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    1664:	000170fa 	wrctl	ienable,zero
}
    1668:	e037883a 	mov	sp,fp
    166c:	df000017 	ldw	fp,0(sp)
    1670:	dec00104 	addi	sp,sp,4
    1674:	f800283a 	ret

00001678 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    1678:	defffb04 	addi	sp,sp,-20
    167c:	df000415 	stw	fp,16(sp)
    1680:	df000404 	addi	fp,sp,16
    1684:	e13ffe15 	stw	r4,-8(fp)
    1688:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    168c:	e0bfff17 	ldw	r2,-4(fp)
    1690:	10820070 	cmpltui	r2,r2,2049
    1694:	1000021e 	bne	r2,zero,16a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    1698:	00820004 	movi	r2,2048
    169c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    16a0:	e0fffe17 	ldw	r3,-8(fp)
    16a4:	e0bfff17 	ldw	r2,-4(fp)
    16a8:	1885883a 	add	r2,r3,r2
    16ac:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	e0bffd15 	stw	r2,-12(fp)
    16b8:	00000506 	br	16d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    16bc:	e0bffd17 	ldw	r2,-12(fp)
    16c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    16c4:	e0bffd17 	ldw	r2,-12(fp)
    16c8:	10800804 	addi	r2,r2,32
    16cc:	e0bffd15 	stw	r2,-12(fp)
    16d0:	e0fffd17 	ldw	r3,-12(fp)
    16d4:	e0bffc17 	ldw	r2,-16(fp)
    16d8:	18bff836 	bltu	r3,r2,16bc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    16dc:	e0bffe17 	ldw	r2,-8(fp)
    16e0:	108007cc 	andi	r2,r2,31
    16e4:	1005003a 	cmpeq	r2,r2,zero
    16e8:	1000021e 	bne	r2,zero,16f4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    16ec:	e0bffd17 	ldw	r2,-12(fp)
    16f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    16f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    16f8:	e037883a 	mov	sp,fp
    16fc:	df000017 	ldw	fp,0(sp)
    1700:	dec00104 	addi	sp,sp,4
    1704:	f800283a 	ret

00001708 <exit>:
    1708:	defffe04 	addi	sp,sp,-8
    170c:	dc400015 	stw	r17,0(sp)
    1710:	000b883a 	mov	r5,zero
    1714:	2023883a 	mov	r17,r4
    1718:	dfc00115 	stw	ra,4(sp)
    171c:	000172c0 	call	172c <__call_exitprocs>
    1720:	8809883a 	mov	r4,r17
    1724:	00019280 	call	1928 <_exit>

00001728 <register_fini>:
    1728:	f800283a 	ret

0000172c <__call_exitprocs>:
    172c:	defff304 	addi	sp,sp,-52
    1730:	00800034 	movhi	r2,0
    1734:	10873204 	addi	r2,r2,7368
    1738:	df000b15 	stw	fp,44(sp)
    173c:	17000017 	ldw	fp,0(r2)
    1740:	00800034 	movhi	r2,0
    1744:	10800004 	addi	r2,r2,0
    1748:	1005003a 	cmpeq	r2,r2,zero
    174c:	d8800215 	stw	r2,8(sp)
    1750:	e0800c04 	addi	r2,fp,48
    1754:	dd800915 	stw	r22,36(sp)
    1758:	dd400815 	stw	r21,32(sp)
    175c:	dfc00c15 	stw	ra,48(sp)
    1760:	ddc00a15 	stw	r23,40(sp)
    1764:	dd000715 	stw	r20,28(sp)
    1768:	dcc00615 	stw	r19,24(sp)
    176c:	dc800515 	stw	r18,20(sp)
    1770:	dc400415 	stw	r17,16(sp)
    1774:	dc000315 	stw	r16,12(sp)
    1778:	282d883a 	mov	r22,r5
    177c:	d9000115 	stw	r4,4(sp)
    1780:	d8800015 	stw	r2,0(sp)
    1784:	282b003a 	cmpeq	r21,r5,zero
    1788:	e4400c17 	ldw	r17,48(fp)
    178c:	88001226 	beq	r17,zero,17d8 <__call_exitprocs+0xac>
    1790:	ddc00017 	ldw	r23,0(sp)
    1794:	88800117 	ldw	r2,4(r17)
    1798:	8c802217 	ldw	r18,136(r17)
    179c:	143fffc4 	addi	r16,r2,-1
    17a0:	80000b16 	blt	r16,zero,17d0 <__call_exitprocs+0xa4>
    17a4:	9027003a 	cmpeq	r19,r18,zero
    17a8:	a800171e 	bne	r21,zero,1808 <__call_exitprocs+0xdc>
    17ac:	9800051e 	bne	r19,zero,17c4 <__call_exitprocs+0x98>
    17b0:	8409883a 	add	r4,r16,r16
    17b4:	2105883a 	add	r2,r4,r4
    17b8:	1485883a 	add	r2,r2,r18
    17bc:	10c02017 	ldw	r3,128(r2)
    17c0:	b0c01226 	beq	r22,r3,180c <__call_exitprocs+0xe0>
    17c4:	843fffc4 	addi	r16,r16,-1
    17c8:	00bfffc4 	movi	r2,-1
    17cc:	80bff61e 	bne	r16,r2,17a8 <__call_exitprocs+0x7c>
    17d0:	d8800217 	ldw	r2,8(sp)
    17d4:	10003226 	beq	r2,zero,18a0 <__call_exitprocs+0x174>
    17d8:	dfc00c17 	ldw	ra,48(sp)
    17dc:	df000b17 	ldw	fp,44(sp)
    17e0:	ddc00a17 	ldw	r23,40(sp)
    17e4:	dd800917 	ldw	r22,36(sp)
    17e8:	dd400817 	ldw	r21,32(sp)
    17ec:	dd000717 	ldw	r20,28(sp)
    17f0:	dcc00617 	ldw	r19,24(sp)
    17f4:	dc800517 	ldw	r18,20(sp)
    17f8:	dc400417 	ldw	r17,16(sp)
    17fc:	dc000317 	ldw	r16,12(sp)
    1800:	dec00d04 	addi	sp,sp,52
    1804:	f800283a 	ret
    1808:	8409883a 	add	r4,r16,r16
    180c:	88c00117 	ldw	r3,4(r17)
    1810:	2105883a 	add	r2,r4,r4
    1814:	1445883a 	add	r2,r2,r17
    1818:	18ffffc4 	addi	r3,r3,-1
    181c:	11800217 	ldw	r6,8(r2)
    1820:	1c001826 	beq	r3,r16,1884 <__call_exitprocs+0x158>
    1824:	10000215 	stw	zero,8(r2)
    1828:	303fe626 	beq	r6,zero,17c4 <__call_exitprocs+0x98>
    182c:	8d000117 	ldw	r20,4(r17)
    1830:	9800121e 	bne	r19,zero,187c <__call_exitprocs+0x150>
    1834:	00c00044 	movi	r3,1
    1838:	1c06983a 	sll	r3,r3,r16
    183c:	90804017 	ldw	r2,256(r18)
    1840:	1884703a 	and	r2,r3,r2
    1844:	10000d26 	beq	r2,zero,187c <__call_exitprocs+0x150>
    1848:	90804117 	ldw	r2,260(r18)
    184c:	1884703a 	and	r2,r3,r2
    1850:	10000e1e 	bne	r2,zero,188c <__call_exitprocs+0x160>
    1854:	2105883a 	add	r2,r4,r4
    1858:	1485883a 	add	r2,r2,r18
    185c:	11400017 	ldw	r5,0(r2)
    1860:	d9000117 	ldw	r4,4(sp)
    1864:	303ee83a 	callr	r6
    1868:	88800117 	ldw	r2,4(r17)
    186c:	a0bfc61e 	bne	r20,r2,1788 <__call_exitprocs+0x5c>
    1870:	b8800017 	ldw	r2,0(r23)
    1874:	147fd326 	beq	r2,r17,17c4 <__call_exitprocs+0x98>
    1878:	003fc306 	br	1788 <__call_exitprocs+0x5c>
    187c:	303ee83a 	callr	r6
    1880:	003ff906 	br	1868 <__call_exitprocs+0x13c>
    1884:	8c000115 	stw	r16,4(r17)
    1888:	003fe706 	br	1828 <__call_exitprocs+0xfc>
    188c:	2105883a 	add	r2,r4,r4
    1890:	1485883a 	add	r2,r2,r18
    1894:	11000017 	ldw	r4,0(r2)
    1898:	303ee83a 	callr	r6
    189c:	003ff206 	br	1868 <__call_exitprocs+0x13c>
    18a0:	88800117 	ldw	r2,4(r17)
    18a4:	10000b1e 	bne	r2,zero,18d4 <__call_exitprocs+0x1a8>
    18a8:	89000017 	ldw	r4,0(r17)
    18ac:	20000a26 	beq	r4,zero,18d8 <__call_exitprocs+0x1ac>
    18b0:	b9000015 	stw	r4,0(r23)
    18b4:	90000226 	beq	r18,zero,18c0 <__call_exitprocs+0x194>
    18b8:	9009883a 	mov	r4,r18
    18bc:	00000000 	call	0 <__reset>
    18c0:	8809883a 	mov	r4,r17
    18c4:	00000000 	call	0 <__reset>
    18c8:	bc400017 	ldw	r17,0(r23)
    18cc:	883fb11e 	bne	r17,zero,1794 <__call_exitprocs+0x68>
    18d0:	003fc106 	br	17d8 <__call_exitprocs+0xac>
    18d4:	89000017 	ldw	r4,0(r17)
    18d8:	882f883a 	mov	r23,r17
    18dc:	2023883a 	mov	r17,r4
    18e0:	883fac1e 	bne	r17,zero,1794 <__call_exitprocs+0x68>
    18e4:	003fbc06 	br	17d8 <__call_exitprocs+0xac>

000018e8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    18e8:	defffd04 	addi	sp,sp,-12
    18ec:	df000215 	stw	fp,8(sp)
    18f0:	df000204 	addi	fp,sp,8
    18f4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    18f8:	e0bfff17 	ldw	r2,-4(fp)
    18fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1900:	e0bffe17 	ldw	r2,-8(fp)
    1904:	1005003a 	cmpeq	r2,r2,zero
    1908:	1000021e 	bne	r2,zero,1914 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    190c:	002af070 	cmpltui	zero,zero,43969
    1910:	00000106 	br	1918 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    1914:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    1918:	e037883a 	mov	sp,fp
    191c:	df000017 	ldw	fp,0(sp)
    1920:	dec00104 	addi	sp,sp,4
    1924:	f800283a 	ret

00001928 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    1928:	defffd04 	addi	sp,sp,-12
    192c:	dfc00215 	stw	ra,8(sp)
    1930:	df000115 	stw	fp,4(sp)
    1934:	df000104 	addi	fp,sp,4
    1938:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    193c:	e13fff17 	ldw	r4,-4(fp)
    1940:	00018e80 	call	18e8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    1944:	003fff06 	br	1944 <_exit+0x1c>
    1948:	00001728 	cmpgeui	zero,zero,92
