
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001a1c memsz 0x00001a1c flags r-x
    LOAD off    0x00002a3c vaddr 0x00011a3c paddr 0x00011ce4 align 2**12
         filesz 0x000002a8 memsz 0x000002a8 flags rw-
    LOAD off    0x00002f8c vaddr 0x00011f8c paddr 0x00011f8c align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000192c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0001194c  0001194c  0000294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002a8  00011a3c  00011ce4  00002a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000018  00011f8c  00011f8c  00002f8c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000368  00000000  00000000  00002d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000004e2  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000077db  00000000  00000000  00003552  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a6e  00000000  00000000  0000ad2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004735  00000000  00000000  0000c79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006a0  00000000  00000000  00010ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000c5d  00000000  00000000  00011570  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000142a  00000000  00000000  000121cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  000135f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00013648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00014c16  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00014c19  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00014c1c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00014c1d  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  00014c1e  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  00014c22  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  00014c26  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000012  00000000  00000000  00014c2a  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001a  00000000  00000000  00014c3c  2**0
                  CONTENTS, READONLY
 25 .jdi          00003c26  00000000  00000000  00014c56  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002a618  00000000  00000000  0001887c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
0001194c l    d  .rodata	00000000 .rodata
00011a3c l    d  .rwdata	00000000 .rwdata
00011f8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 count_binary.c
0001005c l     F .text	00000020 lcd_init
0001007c l     F .text	00000054 initial_message
000100d0 l     F .text	0000002c count_led
00011f8c l     O .bss	00000001 count
000100fc l     F .text	0000001c count_sevenseg
00010118 l     F .text	00000028 count_lcd
00010140 l     F .text	0000004c count_all
0001018c l     F .text	00000160 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
000103f4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000106c0 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011a3c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0001102c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00011228 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00011520 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001159c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011728 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000118e8 l     F .text	00000040 alt_sim_halt
000105d8 g     F .text	0000001c putchar
00011098 g     F .text	00000040 alt_main
000105fc g     F .text	00000090 _puts_r
00011ce4 g       *ABS*	00000000 __flash_rwdata_start
00010540 g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00011f90 g     O .bss	00000004 edge_capture
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011f94 g     O .bss	00000004 errno
00011f9c g     O .bss	00000004 alt_argv
00019cc4 g       *ABS*	00000000 _gp
000110d8 g     F .text	00000030 usleep
00011b44 g     O .rwdata	00000180 alt_fd_list
000105f4 g     F .text	00000008 _putchar_r
0001068c g     F .text	00000014 puts
00010594 g     F .text	00000044 _printf_r
00010530 g     F .text	00000008 __udivsi3
00011678 g     F .text	00000090 alt_icache_flush
00011cdc g     O .rwdata	00000004 alt_max_fd
00011cc8 g     O .rwdata	00000004 _global_impure_ptr
00011fa4 g       *ABS*	00000000 __bss_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
00011b1c g     O .rwdata	00000028 alt_dev_null
00011580 g     F .text	0000001c alt_dcache_flush_all
00011ce4 g       *ABS*	00000000 __ram_rwdata_end
00011cd4 g     O .rwdata	00000008 alt_dev_list
00011108 g     F .text	00000120 write
00010ec0 g     F .text	00000074 _putc_r
00011a3c g       *ABS*	00000000 __ram_rodata_end
00010538 g     F .text	00000008 __umodsi3
00011fa4 g       *ABS*	00000000 end
00015000 g       *ABS*	00000000 __alt_stack_pointer
00010740 g     F .text	00000630 ___vfprintf_internal_r
0001172c g     F .text	000001bc __call_exitprocs
00010020 g     F .text	0000003c _start
000112bc g     F .text	0000001c alt_sys_init
00011a3c g       *ABS*	00000000 __ram_rwdata_start
0001194c g       *ABS*	00000000 __ram_rodata_start
000112d8 g     F .text	0000014c alt_busy_sleep
00011fa4 g       *ABS*	00000000 __alt_stack_base
00010d94 g     F .text	000000bc __sfvwrite_small_dev
00011f8c g       *ABS*	00000000 __bss_start
000102ec g     F .text	00000108 main
00011fa0 g     O .bss	00000004 alt_envp
00011ce0 g     O .rwdata	00000004 alt_errno
00010e50 g     F .text	00000070 putc
00010470 g     F .text	00000060 __divsi3
0001194c g       *ABS*	00000000 __flash_rodata_start
00011288 g     F .text	00000034 alt_irq_init
000115f8 g     F .text	00000060 alt_release_fd
00010f34 g     F .text	00000078 _write_r
00011cc4 g     O .rwdata	00000004 _impure_ptr
00011f98 g     O .bss	00000004 alt_argc
00011ccc g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011ce4 g       *ABS*	00000000 _edata
00011fa4 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00011658 g     F .text	00000020 altera_nios2_qsys_irq_init
00011708 g     F .text	00000020 exit
000104d0 g     F .text	00000060 __modsi3
00015000 g       *ABS*	00000000 __alt_data_end
00011928 g     F .text	00000020 _exit
000106a0 g     F .text	00000020 strlen
000115c8 g     F .text	00000030 alt_icache_flush_all
00010d70 g     F .text	00000024 __vfprintf_internal
00011424 g     F .text	000000fc close
00010fac g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a73114 	ori	gp,gp,40132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1087e314 	ori	r2,r2,8076

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c7e914 	ori	r3,r3,8100

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010fac0 	call	10fac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00110980 	call	11098 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
   1005c:	defffe04 	addi	sp,sp,-8
   10060:	df000115 	stw	fp,4(sp)
   10064:	df000104 	addi	fp,sp,4
   10068:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
   1006c:	e037883a 	mov	sp,fp
   10070:	df000017 	ldw	fp,0(sp)
   10074:	dec00104 	addi	sp,sp,4
   10078:	f800283a 	ret

0001007c <initial_message>:

static void initial_message()
{
   1007c:	defffe04 	addi	sp,sp,-8
   10080:	dfc00115 	stw	ra,4(sp)
   10084:	df000015 	stw	fp,0(sp)
   10088:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
   1008c:	01000074 	movhi	r4,1
   10090:	21065304 	addi	r4,r4,6476
   10094:	001068c0 	call	1068c <puts>
    printf("* Hello from Nios II!    *\n");
   10098:	01000074 	movhi	r4,1
   1009c:	21065b04 	addi	r4,r4,6508
   100a0:	001068c0 	call	1068c <puts>
    printf("* Counting from 00 to ff *\n");
   100a4:	01000074 	movhi	r4,1
   100a8:	21066204 	addi	r4,r4,6536
   100ac:	001068c0 	call	1068c <puts>
    printf("**************************\n");
   100b0:	01000074 	movhi	r4,1
   100b4:	21066904 	addi	r4,r4,6564
   100b8:	001068c0 	call	1068c <puts>
}
   100bc:	e037883a 	mov	sp,fp
   100c0:	dfc00117 	ldw	ra,4(sp)
   100c4:	df000017 	ldw	fp,0(sp)
   100c8:	dec00204 	addi	sp,sp,8
   100cc:	f800283a 	ret

000100d0 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
   100d0:	deffff04 	addi	sp,sp,-4
   100d4:	df000015 	stw	fp,0(sp)
   100d8:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
   100dc:	d0a0b203 	ldbu	r2,-32056(gp)
   100e0:	10c03fcc 	andi	r3,r2,255
   100e4:	00801004 	movi	r2,64
   100e8:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
   100ec:	e037883a 	mov	sp,fp
   100f0:	df000017 	ldw	fp,0(sp)
   100f4:	dec00104 	addi	sp,sp,4
   100f8:	f800283a 	ret

000100fc <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
   100fc:	deffff04 	addi	sp,sp,-4
   10100:	df000015 	stw	fp,0(sp)
   10104:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
   10108:	e037883a 	mov	sp,fp
   1010c:	df000017 	ldw	fp,0(sp)
   10110:	dec00104 	addi	sp,sp,4
   10114:	f800283a 	ret

00010118 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
   10118:	defffd04 	addi	sp,sp,-12
   1011c:	df000215 	stw	fp,8(sp)
   10120:	df000204 	addi	fp,sp,8
   10124:	e13fff15 	stw	r4,-4(fp)
    FILE *lcd = (FILE*) arg;
   10128:	e0bfff17 	ldw	r2,-4(fp)
   1012c:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
   10130:	e037883a 	mov	sp,fp
   10134:	df000017 	ldw	fp,0(sp)
   10138:	dec00104 	addi	sp,sp,4
   1013c:	f800283a 	ret

00010140 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
   10140:	defffd04 	addi	sp,sp,-12
   10144:	dfc00215 	stw	ra,8(sp)
   10148:	df000115 	stw	fp,4(sp)
   1014c:	df000104 	addi	fp,sp,4
   10150:	e13fff15 	stw	r4,-4(fp)
    count_led();
   10154:	00100d00 	call	100d0 <count_led>
    count_sevenseg();
   10158:	00100fc0 	call	100fc <count_sevenseg>
    count_lcd( arg );
   1015c:	e13fff17 	ldw	r4,-4(fp)
   10160:	00101180 	call	10118 <count_lcd>
    printf("%02x,  ", count);
   10164:	d0a0b203 	ldbu	r2,-32056(gp)
   10168:	11403fcc 	andi	r5,r2,255
   1016c:	01000074 	movhi	r4,1
   10170:	21067004 	addi	r4,r4,6592
   10174:	00105400 	call	10540 <printf>
}
   10178:	e037883a 	mov	sp,fp
   1017c:	dfc00117 	ldw	ra,4(sp)
   10180:	df000017 	ldw	fp,0(sp)
   10184:	dec00204 	addi	sp,sp,8
   10188:	f800283a 	ret

0001018c <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
   1018c:	defffa04 	addi	sp,sp,-24
   10190:	dfc00515 	stw	ra,20(sp)
   10194:	df000415 	stw	fp,16(sp)
   10198:	df000404 	addi	fp,sp,16
   1019c:	e17ffd15 	stw	r5,-12(fp)
   101a0:	e13ffc05 	stb	r4,-16(fp)
    /* Button press actions while counting. */
    if (type == 'c')
   101a4:	e0bffc03 	ldbu	r2,-16(fp)
   101a8:	108018d8 	cmpnei	r2,r2,99
   101ac:	1000201e 	bne	r2,zero,10230 <handle_button_press+0xa4>
    {
        switch (edge_capture) 
   101b0:	d0a0b317 	ldw	r2,-32052(gp)
   101b4:	e0bfff15 	stw	r2,-4(fp)
   101b8:	e0ffff17 	ldw	r3,-4(fp)
   101bc:	188000a0 	cmpeqi	r2,r3,2
   101c0:	1000101e 	bne	r2,zero,10204 <handle_button_press+0x78>
   101c4:	e0ffff17 	ldw	r3,-4(fp)
   101c8:	188000c8 	cmpgei	r2,r3,3
   101cc:	1000041e 	bne	r2,zero,101e0 <handle_button_press+0x54>
   101d0:	e0ffff17 	ldw	r3,-4(fp)
   101d4:	18800060 	cmpeqi	r2,r3,1
   101d8:	1000081e 	bne	r2,zero,101fc <handle_button_press+0x70>
   101dc:	00001106 	br	10224 <handle_button_press+0x98>
   101e0:	e0ffff17 	ldw	r3,-4(fp)
   101e4:	18800120 	cmpeqi	r2,r3,4
   101e8:	1000081e 	bne	r2,zero,1020c <handle_button_press+0x80>
   101ec:	e0ffff17 	ldw	r3,-4(fp)
   101f0:	18800220 	cmpeqi	r2,r3,8
   101f4:	1000081e 	bne	r2,zero,10218 <handle_button_press+0x8c>
   101f8:	00000a06 	br	10224 <handle_button_press+0x98>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
   101fc:	00100d00 	call	100d0 <count_led>
            break;
   10200:	00003506 	br	102d8 <handle_button_press+0x14c>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
   10204:	00100fc0 	call	100fc <count_sevenseg>
            break;
   10208:	00003306 	br	102d8 <handle_button_press+0x14c>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
   1020c:	e13ffd17 	ldw	r4,-12(fp)
   10210:	00101180 	call	10118 <count_lcd>
            break;
   10214:	00003006 	br	102d8 <handle_button_press+0x14c>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
   10218:	e13ffd17 	ldw	r4,-12(fp)
   1021c:	00101400 	call	10140 <count_all>
            break;
   10220:	00002d06 	br	102d8 <handle_button_press+0x14c>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
   10224:	e13ffd17 	ldw	r4,-12(fp)
   10228:	00101400 	call	10140 <count_all>
   1022c:	00002a06 	br	102d8 <handle_button_press+0x14c>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
   10230:	d0a0b317 	ldw	r2,-32052(gp)
   10234:	e0bffe15 	stw	r2,-8(fp)
   10238:	e0fffe17 	ldw	r3,-8(fp)
   1023c:	188000a0 	cmpeqi	r2,r3,2
   10240:	1000131e 	bne	r2,zero,10290 <handle_button_press+0x104>
   10244:	e0fffe17 	ldw	r3,-8(fp)
   10248:	188000c8 	cmpgei	r2,r3,3
   1024c:	1000041e 	bne	r2,zero,10260 <handle_button_press+0xd4>
   10250:	e0fffe17 	ldw	r3,-8(fp)
   10254:	18800060 	cmpeqi	r2,r3,1
   10258:	1000081e 	bne	r2,zero,1027c <handle_button_press+0xf0>
   1025c:	00001b06 	br	102cc <handle_button_press+0x140>
   10260:	e0fffe17 	ldw	r3,-8(fp)
   10264:	18800120 	cmpeqi	r2,r3,4
   10268:	10000e1e 	bne	r2,zero,102a4 <handle_button_press+0x118>
   1026c:	e0fffe17 	ldw	r3,-8(fp)
   10270:	18800220 	cmpeqi	r2,r3,8
   10274:	1000101e 	bne	r2,zero,102b8 <handle_button_press+0x12c>
   10278:	00001406 	br	102cc <handle_button_press+0x140>
        {
        case 0x1:
            printf( "Button 1\n");
   1027c:	01000074 	movhi	r4,1
   10280:	21067204 	addi	r4,r4,6600
   10284:	001068c0 	call	1068c <puts>
            edge_capture = 0;
   10288:	d020b315 	stw	zero,-32052(gp)
            break;
   1028c:	00001206 	br	102d8 <handle_button_press+0x14c>
        case 0x2:
            printf( "Button 2\n");
   10290:	01000074 	movhi	r4,1
   10294:	21067504 	addi	r4,r4,6612
   10298:	001068c0 	call	1068c <puts>
            edge_capture = 0;
   1029c:	d020b315 	stw	zero,-32052(gp)
            break;
   102a0:	00000d06 	br	102d8 <handle_button_press+0x14c>
        case 0x4:
            printf( "Button 3\n");
   102a4:	01000074 	movhi	r4,1
   102a8:	21067804 	addi	r4,r4,6624
   102ac:	001068c0 	call	1068c <puts>
            edge_capture = 0;
   102b0:	d020b315 	stw	zero,-32052(gp)
            break;
   102b4:	00000806 	br	102d8 <handle_button_press+0x14c>
        case 0x8:
            printf( "Button 4\n");
   102b8:	01000074 	movhi	r4,1
   102bc:	21067b04 	addi	r4,r4,6636
   102c0:	001068c0 	call	1068c <puts>
            edge_capture = 0;
   102c4:	d020b315 	stw	zero,-32052(gp)
            break;
   102c8:	00000306 	br	102d8 <handle_button_press+0x14c>
        default:
            printf( "Button press UNKNOWN!!\n");
   102cc:	01000074 	movhi	r4,1
   102d0:	21067e04 	addi	r4,r4,6648
   102d4:	001068c0 	call	1068c <puts>
        }
    }
}
   102d8:	e037883a 	mov	sp,fp
   102dc:	dfc00117 	ldw	ra,4(sp)
   102e0:	df000017 	ldw	fp,0(sp)
   102e4:	dec00204 	addi	sp,sp,8
   102e8:	f800283a 	ret

000102ec <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
   102ec:	defffb04 	addi	sp,sp,-20
   102f0:	dfc00415 	stw	ra,16(sp)
   102f4:	df000315 	stw	fp,12(sp)
   102f8:	df000304 	addi	fp,sp,12
    int i;
    int wait_time;
    FILE * lcd;

    count = 0;
   102fc:	d020b205 	stb	zero,-32056(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
   10300:	e03ffd15 	stw	zero,-12(fp)
    if(lcd != NULL) {lcd_init( lcd );}
   10304:	e0bffd17 	ldw	r2,-12(fp)
   10308:	1005003a 	cmpeq	r2,r2,zero
   1030c:	1000021e 	bne	r2,zero,10318 <main+0x2c>
   10310:	e13ffd17 	ldw	r4,-12(fp)
   10314:	001005c0 	call	1005c <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
   10318:	001007c0 	call	1007c <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
   1031c:	010000b4 	movhi	r4,2
   10320:	2121a804 	addi	r4,r4,-31072
   10324:	00110d80 	call	110d8 <usleep>
        if (edge_capture != 0)
   10328:	d0a0b317 	ldw	r2,-32052(gp)
   1032c:	1005003a 	cmpeq	r2,r2,zero
   10330:	1000041e 	bne	r2,zero,10344 <main+0x58>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
   10334:	010018c4 	movi	r4,99
   10338:	e17ffd17 	ldw	r5,-12(fp)
   1033c:	001018c0 	call	1018c <handle_button_press>
   10340:	00000206 	br	1034c <main+0x60>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
   10344:	e13ffd17 	ldw	r4,-12(fp)
   10348:	00101400 	call	10140 <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
   1034c:	d0a0b203 	ldbu	r2,-32056(gp)
   10350:	10803fcc 	andi	r2,r2,255
   10354:	10803fd8 	cmpnei	r2,r2,255
   10358:	1000221e 	bne	r2,zero,103e4 <main+0xf8>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
   1035c:	01000074 	movhi	r4,1
   10360:	21068404 	addi	r4,r4,6672
   10364:	00105400 	call	10540 <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
   10368:	d020b315 	stw	zero,-32052(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
   1036c:	e03ffe15 	stw	zero,-8(fp)
            for (i = 0; i<70; ++i)
   10370:	e03fff15 	stw	zero,-4(fp)
   10374:	00001506 	br	103cc <main+0xe0>
            {
                printf(".");
   10378:	01000b84 	movi	r4,46
   1037c:	00105d80 	call	105d8 <putchar>
                wait_time = i/10;
   10380:	e13fff17 	ldw	r4,-4(fp)
   10384:	01400284 	movi	r5,10
   10388:	00104700 	call	10470 <__divsi3>
   1038c:	e0bffe15 	stw	r2,-8(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
   10390:	d0a0b317 	ldw	r2,-32052(gp)
   10394:	1005003a 	cmpeq	r2,r2,zero
   10398:	1000061e 	bne	r2,zero,103b4 <main+0xc8>
                {
                    printf( "\nYou pushed:  " );
   1039c:	01000074 	movhi	r4,1
   103a0:	21068704 	addi	r4,r4,6684
   103a4:	00105400 	call	10540 <printf>
                    handle_button_press('w', lcd);
   103a8:	01001dc4 	movi	r4,119
   103ac:	e17ffd17 	ldw	r5,-12(fp)
   103b0:	001018c0 	call	1018c <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
   103b4:	010000b4 	movhi	r4,2
   103b8:	2121a804 	addi	r4,r4,-31072
   103bc:	00110d80 	call	110d8 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
   103c0:	e0bfff17 	ldw	r2,-4(fp)
   103c4:	10800044 	addi	r2,r2,1
   103c8:	e0bfff15 	stw	r2,-4(fp)
   103cc:	e0bfff17 	ldw	r2,-4(fp)
   103d0:	10801190 	cmplti	r2,r2,70
   103d4:	103fe81e 	bne	r2,zero,10378 <main+0x8c>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
   103d8:	001007c0 	call	1007c <initial_message>
            lcd_init( lcd );
   103dc:	e13ffd17 	ldw	r4,-12(fp)
   103e0:	001005c0 	call	1005c <lcd_init>
        }
        count++;
   103e4:	d0a0b203 	ldbu	r2,-32056(gp)
   103e8:	10800044 	addi	r2,r2,1
   103ec:	d0a0b205 	stb	r2,-32056(gp)
    }
   103f0:	003fca06 	br	1031c <main+0x30>

000103f4 <udivmodsi4>:
   103f4:	29001b2e 	bgeu	r5,r4,10464 <udivmodsi4+0x70>
   103f8:	28001a16 	blt	r5,zero,10464 <udivmodsi4+0x70>
   103fc:	00800044 	movi	r2,1
   10400:	0007883a 	mov	r3,zero
   10404:	01c007c4 	movi	r7,31
   10408:	00000306 	br	10418 <udivmodsi4+0x24>
   1040c:	19c01326 	beq	r3,r7,1045c <udivmodsi4+0x68>
   10410:	18c00044 	addi	r3,r3,1
   10414:	28000416 	blt	r5,zero,10428 <udivmodsi4+0x34>
   10418:	294b883a 	add	r5,r5,r5
   1041c:	1085883a 	add	r2,r2,r2
   10420:	293ffa36 	bltu	r5,r4,1040c <udivmodsi4+0x18>
   10424:	10000d26 	beq	r2,zero,1045c <udivmodsi4+0x68>
   10428:	0007883a 	mov	r3,zero
   1042c:	21400236 	bltu	r4,r5,10438 <udivmodsi4+0x44>
   10430:	2149c83a 	sub	r4,r4,r5
   10434:	1886b03a 	or	r3,r3,r2
   10438:	1004d07a 	srli	r2,r2,1
   1043c:	280ad07a 	srli	r5,r5,1
   10440:	103ffa1e 	bne	r2,zero,1042c <udivmodsi4+0x38>
   10444:	30000226 	beq	r6,zero,10450 <udivmodsi4+0x5c>
   10448:	2005883a 	mov	r2,r4
   1044c:	f800283a 	ret
   10450:	1809883a 	mov	r4,r3
   10454:	2005883a 	mov	r2,r4
   10458:	f800283a 	ret
   1045c:	0007883a 	mov	r3,zero
   10460:	003ff806 	br	10444 <udivmodsi4+0x50>
   10464:	00800044 	movi	r2,1
   10468:	0007883a 	mov	r3,zero
   1046c:	003fef06 	br	1042c <udivmodsi4+0x38>

00010470 <__divsi3>:
   10470:	defffe04 	addi	sp,sp,-8
   10474:	dc000015 	stw	r16,0(sp)
   10478:	dfc00115 	stw	ra,4(sp)
   1047c:	0021883a 	mov	r16,zero
   10480:	20000c16 	blt	r4,zero,104b4 <__divsi3+0x44>
   10484:	000d883a 	mov	r6,zero
   10488:	28000e16 	blt	r5,zero,104c4 <__divsi3+0x54>
   1048c:	00103f40 	call	103f4 <udivmodsi4>
   10490:	1007883a 	mov	r3,r2
   10494:	8005003a 	cmpeq	r2,r16,zero
   10498:	1000011e 	bne	r2,zero,104a0 <__divsi3+0x30>
   1049c:	00c7c83a 	sub	r3,zero,r3
   104a0:	1805883a 	mov	r2,r3
   104a4:	dfc00117 	ldw	ra,4(sp)
   104a8:	dc000017 	ldw	r16,0(sp)
   104ac:	dec00204 	addi	sp,sp,8
   104b0:	f800283a 	ret
   104b4:	0109c83a 	sub	r4,zero,r4
   104b8:	04000044 	movi	r16,1
   104bc:	000d883a 	mov	r6,zero
   104c0:	283ff20e 	bge	r5,zero,1048c <__divsi3+0x1c>
   104c4:	014bc83a 	sub	r5,zero,r5
   104c8:	8021003a 	cmpeq	r16,r16,zero
   104cc:	003fef06 	br	1048c <__divsi3+0x1c>

000104d0 <__modsi3>:
   104d0:	deffff04 	addi	sp,sp,-4
   104d4:	dfc00015 	stw	ra,0(sp)
   104d8:	01800044 	movi	r6,1
   104dc:	2807883a 	mov	r3,r5
   104e0:	20000416 	blt	r4,zero,104f4 <__modsi3+0x24>
   104e4:	28000c16 	blt	r5,zero,10518 <__modsi3+0x48>
   104e8:	dfc00017 	ldw	ra,0(sp)
   104ec:	dec00104 	addi	sp,sp,4
   104f0:	00103f41 	jmpi	103f4 <udivmodsi4>
   104f4:	0109c83a 	sub	r4,zero,r4
   104f8:	28000b16 	blt	r5,zero,10528 <__modsi3+0x58>
   104fc:	180b883a 	mov	r5,r3
   10500:	01800044 	movi	r6,1
   10504:	00103f40 	call	103f4 <udivmodsi4>
   10508:	0085c83a 	sub	r2,zero,r2
   1050c:	dfc00017 	ldw	ra,0(sp)
   10510:	dec00104 	addi	sp,sp,4
   10514:	f800283a 	ret
   10518:	014bc83a 	sub	r5,zero,r5
   1051c:	dfc00017 	ldw	ra,0(sp)
   10520:	dec00104 	addi	sp,sp,4
   10524:	00103f41 	jmpi	103f4 <udivmodsi4>
   10528:	0147c83a 	sub	r3,zero,r5
   1052c:	003ff306 	br	104fc <__modsi3+0x2c>

00010530 <__udivsi3>:
   10530:	000d883a 	mov	r6,zero
   10534:	00103f41 	jmpi	103f4 <udivmodsi4>

00010538 <__umodsi3>:
   10538:	01800044 	movi	r6,1
   1053c:	00103f41 	jmpi	103f4 <udivmodsi4>

00010540 <printf>:
   10540:	defffb04 	addi	sp,sp,-20
   10544:	dfc00115 	stw	ra,4(sp)
   10548:	d9400215 	stw	r5,8(sp)
   1054c:	d9800315 	stw	r6,12(sp)
   10550:	d9c00415 	stw	r7,16(sp)
   10554:	00800074 	movhi	r2,1
   10558:	10873104 	addi	r2,r2,7364
   1055c:	11400017 	ldw	r5,0(r2)
   10560:	d8800204 	addi	r2,sp,8
   10564:	d8800015 	stw	r2,0(sp)
   10568:	29c00217 	ldw	r7,8(r5)
   1056c:	100d883a 	mov	r6,r2
   10570:	00800074 	movhi	r2,1
   10574:	10836504 	addi	r2,r2,3476
   10578:	200b883a 	mov	r5,r4
   1057c:	38800115 	stw	r2,4(r7)
   10580:	3809883a 	mov	r4,r7
   10584:	0010d700 	call	10d70 <__vfprintf_internal>
   10588:	dfc00117 	ldw	ra,4(sp)
   1058c:	dec00504 	addi	sp,sp,20
   10590:	f800283a 	ret

00010594 <_printf_r>:
   10594:	defffc04 	addi	sp,sp,-16
   10598:	dfc00115 	stw	ra,4(sp)
   1059c:	d9800215 	stw	r6,8(sp)
   105a0:	d9c00315 	stw	r7,12(sp)
   105a4:	22000217 	ldw	r8,8(r4)
   105a8:	d8800204 	addi	r2,sp,8
   105ac:	d8800015 	stw	r2,0(sp)
   105b0:	100f883a 	mov	r7,r2
   105b4:	00800074 	movhi	r2,1
   105b8:	10836504 	addi	r2,r2,3476
   105bc:	280d883a 	mov	r6,r5
   105c0:	40800115 	stw	r2,4(r8)
   105c4:	400b883a 	mov	r5,r8
   105c8:	00107400 	call	10740 <___vfprintf_internal_r>
   105cc:	dfc00117 	ldw	ra,4(sp)
   105d0:	dec00404 	addi	sp,sp,16
   105d4:	f800283a 	ret

000105d8 <putchar>:
   105d8:	00800074 	movhi	r2,1
   105dc:	10873104 	addi	r2,r2,7364
   105e0:	11800017 	ldw	r6,0(r2)
   105e4:	200b883a 	mov	r5,r4
   105e8:	3009883a 	mov	r4,r6
   105ec:	31800217 	ldw	r6,8(r6)
   105f0:	0010ec01 	jmpi	10ec0 <_putc_r>

000105f4 <_putchar_r>:
   105f4:	21800217 	ldw	r6,8(r4)
   105f8:	0010ec01 	jmpi	10ec0 <_putc_r>

000105fc <_puts_r>:
   105fc:	defffd04 	addi	sp,sp,-12
   10600:	dc000015 	stw	r16,0(sp)
   10604:	2021883a 	mov	r16,r4
   10608:	2809883a 	mov	r4,r5
   1060c:	dfc00215 	stw	ra,8(sp)
   10610:	dc400115 	stw	r17,4(sp)
   10614:	2823883a 	mov	r17,r5
   10618:	00106a00 	call	106a0 <strlen>
   1061c:	80c00217 	ldw	r3,8(r16)
   10620:	02000074 	movhi	r8,1
   10624:	42036504 	addi	r8,r8,3476
   10628:	880d883a 	mov	r6,r17
   1062c:	100f883a 	mov	r7,r2
   10630:	8009883a 	mov	r4,r16
   10634:	180b883a 	mov	r5,r3
   10638:	1a000115 	stw	r8,4(r3)
   1063c:	403ee83a 	callr	r8
   10640:	047fffc4 	movi	r17,-1
   10644:	8009883a 	mov	r4,r16
   10648:	01800074 	movhi	r6,1
   1064c:	31868b04 	addi	r6,r6,6700
   10650:	01c00044 	movi	r7,1
   10654:	1440071e 	bne	r2,r17,10674 <_puts_r+0x78>
   10658:	00ffffc4 	movi	r3,-1
   1065c:	1805883a 	mov	r2,r3
   10660:	dfc00217 	ldw	ra,8(sp)
   10664:	dc400117 	ldw	r17,4(sp)
   10668:	dc000017 	ldw	r16,0(sp)
   1066c:	dec00304 	addi	sp,sp,12
   10670:	f800283a 	ret
   10674:	81400217 	ldw	r5,8(r16)
   10678:	28c00117 	ldw	r3,4(r5)
   1067c:	183ee83a 	callr	r3
   10680:	0007883a 	mov	r3,zero
   10684:	147ff51e 	bne	r2,r17,1065c <_puts_r+0x60>
   10688:	003ff306 	br	10658 <_puts_r+0x5c>

0001068c <puts>:
   1068c:	00800074 	movhi	r2,1
   10690:	10873104 	addi	r2,r2,7364
   10694:	200b883a 	mov	r5,r4
   10698:	11000017 	ldw	r4,0(r2)
   1069c:	00105fc1 	jmpi	105fc <_puts_r>

000106a0 <strlen>:
   106a0:	20800007 	ldb	r2,0(r4)
   106a4:	10000526 	beq	r2,zero,106bc <strlen+0x1c>
   106a8:	2007883a 	mov	r3,r4
   106ac:	18c00044 	addi	r3,r3,1
   106b0:	18800007 	ldb	r2,0(r3)
   106b4:	103ffd1e 	bne	r2,zero,106ac <strlen+0xc>
   106b8:	1905c83a 	sub	r2,r3,r4
   106bc:	f800283a 	ret

000106c0 <print_repeat>:
   106c0:	defffb04 	addi	sp,sp,-20
   106c4:	dc800315 	stw	r18,12(sp)
   106c8:	dc400215 	stw	r17,8(sp)
   106cc:	dc000115 	stw	r16,4(sp)
   106d0:	dfc00415 	stw	ra,16(sp)
   106d4:	2025883a 	mov	r18,r4
   106d8:	2823883a 	mov	r17,r5
   106dc:	3821883a 	mov	r16,r7
   106e0:	d9800005 	stb	r6,0(sp)
   106e4:	9009883a 	mov	r4,r18
   106e8:	880b883a 	mov	r5,r17
   106ec:	d80d883a 	mov	r6,sp
   106f0:	01c00044 	movi	r7,1
   106f4:	04000b0e 	bge	zero,r16,10724 <print_repeat+0x64>
   106f8:	88c00117 	ldw	r3,4(r17)
   106fc:	843fffc4 	addi	r16,r16,-1
   10700:	183ee83a 	callr	r3
   10704:	103ff726 	beq	r2,zero,106e4 <print_repeat+0x24>
   10708:	00bfffc4 	movi	r2,-1
   1070c:	dfc00417 	ldw	ra,16(sp)
   10710:	dc800317 	ldw	r18,12(sp)
   10714:	dc400217 	ldw	r17,8(sp)
   10718:	dc000117 	ldw	r16,4(sp)
   1071c:	dec00504 	addi	sp,sp,20
   10720:	f800283a 	ret
   10724:	0005883a 	mov	r2,zero
   10728:	dfc00417 	ldw	ra,16(sp)
   1072c:	dc800317 	ldw	r18,12(sp)
   10730:	dc400217 	ldw	r17,8(sp)
   10734:	dc000117 	ldw	r16,4(sp)
   10738:	dec00504 	addi	sp,sp,20
   1073c:	f800283a 	ret

00010740 <___vfprintf_internal_r>:
   10740:	deffe404 	addi	sp,sp,-112
   10744:	ddc01915 	stw	r23,100(sp)
   10748:	dd801815 	stw	r22,96(sp)
   1074c:	dcc01515 	stw	r19,84(sp)
   10750:	dc401315 	stw	r17,76(sp)
   10754:	dc001215 	stw	r16,72(sp)
   10758:	dfc01b15 	stw	ra,108(sp)
   1075c:	df001a15 	stw	fp,104(sp)
   10760:	dd401715 	stw	r21,92(sp)
   10764:	dd001615 	stw	r20,88(sp)
   10768:	dc801415 	stw	r18,80(sp)
   1076c:	d9001015 	stw	r4,64(sp)
   10770:	2827883a 	mov	r19,r5
   10774:	d9c01115 	stw	r7,68(sp)
   10778:	3023883a 	mov	r17,r6
   1077c:	0021883a 	mov	r16,zero
   10780:	d8000f15 	stw	zero,60(sp)
   10784:	d8000e15 	stw	zero,56(sp)
   10788:	002f883a 	mov	r23,zero
   1078c:	d8000915 	stw	zero,36(sp)
   10790:	d8000d15 	stw	zero,52(sp)
   10794:	d8000c15 	stw	zero,48(sp)
   10798:	d8000b15 	stw	zero,44(sp)
   1079c:	002d883a 	mov	r22,zero
   107a0:	89400003 	ldbu	r5,0(r17)
   107a4:	01c00044 	movi	r7,1
   107a8:	8c400044 	addi	r17,r17,1
   107ac:	29003fcc 	andi	r4,r5,255
   107b0:	2100201c 	xori	r4,r4,128
   107b4:	213fe004 	addi	r4,r4,-128
   107b8:	20001526 	beq	r4,zero,10810 <___vfprintf_internal_r+0xd0>
   107bc:	81c03326 	beq	r16,r7,1088c <___vfprintf_internal_r+0x14c>
   107c0:	3c002016 	blt	r7,r16,10844 <___vfprintf_internal_r+0x104>
   107c4:	803ff61e 	bne	r16,zero,107a0 <___vfprintf_internal_r+0x60>
   107c8:	00800944 	movi	r2,37
   107cc:	2081311e 	bne	r4,r2,10c94 <___vfprintf_internal_r+0x554>
   107d0:	05ffffc4 	movi	r23,-1
   107d4:	00800284 	movi	r2,10
   107d8:	d9c00c15 	stw	r7,48(sp)
   107dc:	d8000f15 	stw	zero,60(sp)
   107e0:	d8000e15 	stw	zero,56(sp)
   107e4:	ddc00915 	stw	r23,36(sp)
   107e8:	d8800d15 	stw	r2,52(sp)
   107ec:	d8000b15 	stw	zero,44(sp)
   107f0:	89400003 	ldbu	r5,0(r17)
   107f4:	3821883a 	mov	r16,r7
   107f8:	8c400044 	addi	r17,r17,1
   107fc:	29003fcc 	andi	r4,r5,255
   10800:	2100201c 	xori	r4,r4,128
   10804:	213fe004 	addi	r4,r4,-128
   10808:	01c00044 	movi	r7,1
   1080c:	203feb1e 	bne	r4,zero,107bc <___vfprintf_internal_r+0x7c>
   10810:	b005883a 	mov	r2,r22
   10814:	dfc01b17 	ldw	ra,108(sp)
   10818:	df001a17 	ldw	fp,104(sp)
   1081c:	ddc01917 	ldw	r23,100(sp)
   10820:	dd801817 	ldw	r22,96(sp)
   10824:	dd401717 	ldw	r21,92(sp)
   10828:	dd001617 	ldw	r20,88(sp)
   1082c:	dcc01517 	ldw	r19,84(sp)
   10830:	dc801417 	ldw	r18,80(sp)
   10834:	dc401317 	ldw	r17,76(sp)
   10838:	dc001217 	ldw	r16,72(sp)
   1083c:	dec01c04 	addi	sp,sp,112
   10840:	f800283a 	ret
   10844:	00800084 	movi	r2,2
   10848:	80801526 	beq	r16,r2,108a0 <___vfprintf_internal_r+0x160>
   1084c:	008000c4 	movi	r2,3
   10850:	80bfd31e 	bne	r16,r2,107a0 <___vfprintf_internal_r+0x60>
   10854:	29bff404 	addi	r6,r5,-48
   10858:	30c03fcc 	andi	r3,r6,255
   1085c:	00800244 	movi	r2,9
   10860:	10c01c36 	bltu	r2,r3,108d4 <___vfprintf_internal_r+0x194>
   10864:	d8c00917 	ldw	r3,36(sp)
   10868:	18010816 	blt	r3,zero,10c8c <___vfprintf_internal_r+0x54c>
   1086c:	d9000917 	ldw	r4,36(sp)
   10870:	20c002a4 	muli	r3,r4,10
   10874:	30803fcc 	andi	r2,r6,255
   10878:	1080201c 	xori	r2,r2,128
   1087c:	10bfe004 	addi	r2,r2,-128
   10880:	1887883a 	add	r3,r3,r2
   10884:	d8c00915 	stw	r3,36(sp)
   10888:	003fc506 	br	107a0 <___vfprintf_internal_r+0x60>
   1088c:	00800c04 	movi	r2,48
   10890:	20809526 	beq	r4,r2,10ae8 <___vfprintf_internal_r+0x3a8>
   10894:	00800944 	movi	r2,37
   10898:	20810e26 	beq	r4,r2,10cd4 <___vfprintf_internal_r+0x594>
   1089c:	04000084 	movi	r16,2
   108a0:	29bff404 	addi	r6,r5,-48
   108a4:	30c03fcc 	andi	r3,r6,255
   108a8:	00800244 	movi	r2,9
   108ac:	10c00736 	bltu	r2,r3,108cc <___vfprintf_internal_r+0x18c>
   108b0:	b8009816 	blt	r23,zero,10b14 <___vfprintf_internal_r+0x3d4>
   108b4:	b9c002a4 	muli	r7,r23,10
   108b8:	30803fcc 	andi	r2,r6,255
   108bc:	1080201c 	xori	r2,r2,128
   108c0:	10bfe004 	addi	r2,r2,-128
   108c4:	38af883a 	add	r23,r7,r2
   108c8:	003fb506 	br	107a0 <___vfprintf_internal_r+0x60>
   108cc:	00800b84 	movi	r2,46
   108d0:	20808a26 	beq	r4,r2,10afc <___vfprintf_internal_r+0x3bc>
   108d4:	00801b04 	movi	r2,108
   108d8:	20808a26 	beq	r4,r2,10b04 <___vfprintf_internal_r+0x3c4>
   108dc:	d8c00917 	ldw	r3,36(sp)
   108e0:	18008e16 	blt	r3,zero,10b1c <___vfprintf_internal_r+0x3dc>
   108e4:	d8000f15 	stw	zero,60(sp)
   108e8:	28bfea04 	addi	r2,r5,-88
   108ec:	10803fcc 	andi	r2,r2,255
   108f0:	00c00804 	movi	r3,32
   108f4:	18802836 	bltu	r3,r2,10998 <___vfprintf_internal_r+0x258>
   108f8:	1085883a 	add	r2,r2,r2
   108fc:	1085883a 	add	r2,r2,r2
   10900:	00c00074 	movhi	r3,1
   10904:	18c24504 	addi	r3,r3,2324
   10908:	10c5883a 	add	r2,r2,r3
   1090c:	11000017 	ldw	r4,0(r2)
   10910:	2000683a 	jmp	r4
   10914:	00010b90 	cmplti	zero,zero,1070
   10918:	00010998 	cmpnei	zero,zero,1062
   1091c:	00010998 	cmpnei	zero,zero,1062
   10920:	00010998 	cmpnei	zero,zero,1062
   10924:	00010998 	cmpnei	zero,zero,1062
   10928:	00010998 	cmpnei	zero,zero,1062
   1092c:	00010998 	cmpnei	zero,zero,1062
   10930:	00010998 	cmpnei	zero,zero,1062
   10934:	00010998 	cmpnei	zero,zero,1062
   10938:	00010998 	cmpnei	zero,zero,1062
   1093c:	00010998 	cmpnei	zero,zero,1062
   10940:	00010ba8 	cmpgeui	zero,zero,1070
   10944:	000109ac 	andhi	zero,zero,1062
   10948:	00010998 	cmpnei	zero,zero,1062
   1094c:	00010998 	cmpnei	zero,zero,1062
   10950:	00010998 	cmpnei	zero,zero,1062
   10954:	00010998 	cmpnei	zero,zero,1062
   10958:	000109ac 	andhi	zero,zero,1062
   1095c:	00010998 	cmpnei	zero,zero,1062
   10960:	00010998 	cmpnei	zero,zero,1062
   10964:	00010998 	cmpnei	zero,zero,1062
   10968:	00010998 	cmpnei	zero,zero,1062
   1096c:	00010998 	cmpnei	zero,zero,1062
   10970:	00010c10 	cmplti	zero,zero,1072
   10974:	00010998 	cmpnei	zero,zero,1062
   10978:	00010998 	cmpnei	zero,zero,1062
   1097c:	00010998 	cmpnei	zero,zero,1062
   10980:	00010c20 	cmpeqi	zero,zero,1072
   10984:	00010998 	cmpnei	zero,zero,1062
   10988:	000109a8 	cmpgeui	zero,zero,1062
   1098c:	00010998 	cmpnei	zero,zero,1062
   10990:	00010998 	cmpnei	zero,zero,1062
   10994:	000109a0 	cmpeqi	zero,zero,1062
   10998:	0021883a 	mov	r16,zero
   1099c:	003f8006 	br	107a0 <___vfprintf_internal_r+0x60>
   109a0:	00800404 	movi	r2,16
   109a4:	d8800d15 	stw	r2,52(sp)
   109a8:	d8000c15 	stw	zero,48(sp)
   109ac:	d8800c17 	ldw	r2,48(sp)
   109b0:	10006c1e 	bne	r2,zero,10b64 <___vfprintf_internal_r+0x424>
   109b4:	d9001117 	ldw	r4,68(sp)
   109b8:	21c00104 	addi	r7,r4,4
   109bc:	24000017 	ldw	r16,0(r4)
   109c0:	d9c01115 	stw	r7,68(sp)
   109c4:	d8000a15 	stw	zero,40(sp)
   109c8:	80006d26 	beq	r16,zero,10b80 <___vfprintf_internal_r+0x440>
   109cc:	d8c00b17 	ldw	r3,44(sp)
   109d0:	dc800104 	addi	r18,sp,4
   109d4:	9039883a 	mov	fp,r18
   109d8:	05400244 	movi	r21,9
   109dc:	1829003a 	cmpeq	r20,r3,zero
   109e0:	00000506 	br	109f8 <___vfprintf_internal_r+0x2b8>
   109e4:	21000c04 	addi	r4,r4,48
   109e8:	91000005 	stb	r4,0(r18)
   109ec:	94800044 	addi	r18,r18,1
   109f0:	18000e26 	beq	r3,zero,10a2c <___vfprintf_internal_r+0x2ec>
   109f4:	1821883a 	mov	r16,r3
   109f8:	d9400d17 	ldw	r5,52(sp)
   109fc:	8009883a 	mov	r4,r16
   10a00:	00105300 	call	10530 <__udivsi3>
   10a04:	d9000d17 	ldw	r4,52(sp)
   10a08:	1007883a 	mov	r3,r2
   10a0c:	2085383a 	mul	r2,r4,r2
   10a10:	8089c83a 	sub	r4,r16,r2
   10a14:	a93ff30e 	bge	r21,r4,109e4 <___vfprintf_internal_r+0x2a4>
   10a18:	a000361e 	bne	r20,zero,10af4 <___vfprintf_internal_r+0x3b4>
   10a1c:	21000dc4 	addi	r4,r4,55
   10a20:	91000005 	stb	r4,0(r18)
   10a24:	94800044 	addi	r18,r18,1
   10a28:	183ff21e 	bne	r3,zero,109f4 <___vfprintf_internal_r+0x2b4>
   10a2c:	9729c83a 	sub	r20,r18,fp
   10a30:	d8800917 	ldw	r2,36(sp)
   10a34:	150bc83a 	sub	r5,r2,r20
   10a38:	0140100e 	bge	zero,r5,10a7c <___vfprintf_internal_r+0x33c>
   10a3c:	e0800804 	addi	r2,fp,32
   10a40:	90800e2e 	bgeu	r18,r2,10a7c <___vfprintf_internal_r+0x33c>
   10a44:	00800c04 	movi	r2,48
   10a48:	28ffffc4 	addi	r3,r5,-1
   10a4c:	90800005 	stb	r2,0(r18)
   10a50:	91000044 	addi	r4,r18,1
   10a54:	00c0070e 	bge	zero,r3,10a74 <___vfprintf_internal_r+0x334>
   10a58:	e0800804 	addi	r2,fp,32
   10a5c:	2080052e 	bgeu	r4,r2,10a74 <___vfprintf_internal_r+0x334>
   10a60:	00800c04 	movi	r2,48
   10a64:	20800005 	stb	r2,0(r4)
   10a68:	21000044 	addi	r4,r4,1
   10a6c:	9145883a 	add	r2,r18,r5
   10a70:	20bff91e 	bne	r4,r2,10a58 <___vfprintf_internal_r+0x318>
   10a74:	2729c83a 	sub	r20,r4,fp
   10a78:	2025883a 	mov	r18,r4
   10a7c:	d8c00a17 	ldw	r3,40(sp)
   10a80:	d9000f17 	ldw	r4,60(sp)
   10a84:	1d05883a 	add	r2,r3,r20
   10a88:	b8a1c83a 	sub	r16,r23,r2
   10a8c:	20002626 	beq	r4,zero,10b28 <___vfprintf_internal_r+0x3e8>
   10a90:	1805003a 	cmpeq	r2,r3,zero
   10a94:	1000a226 	beq	r2,zero,10d20 <___vfprintf_internal_r+0x5e0>
   10a98:	04009916 	blt	zero,r16,10d00 <___vfprintf_internal_r+0x5c0>
   10a9c:	b005883a 	mov	r2,r22
   10aa0:	0500890e 	bge	zero,r20,10cc8 <___vfprintf_internal_r+0x588>
   10aa4:	102d883a 	mov	r22,r2
   10aa8:	1521883a 	add	r16,r2,r20
   10aac:	00000206 	br	10ab8 <___vfprintf_internal_r+0x378>
   10ab0:	b5800044 	addi	r22,r22,1
   10ab4:	85bfb826 	beq	r16,r22,10998 <___vfprintf_internal_r+0x258>
   10ab8:	94bfffc4 	addi	r18,r18,-1
   10abc:	90800003 	ldbu	r2,0(r18)
   10ac0:	98c00117 	ldw	r3,4(r19)
   10ac4:	d9001017 	ldw	r4,64(sp)
   10ac8:	d8800005 	stb	r2,0(sp)
   10acc:	980b883a 	mov	r5,r19
   10ad0:	d80d883a 	mov	r6,sp
   10ad4:	01c00044 	movi	r7,1
   10ad8:	183ee83a 	callr	r3
   10adc:	103ff426 	beq	r2,zero,10ab0 <___vfprintf_internal_r+0x370>
   10ae0:	05bfffc4 	movi	r22,-1
   10ae4:	003f4a06 	br	10810 <___vfprintf_internal_r+0xd0>
   10ae8:	04000084 	movi	r16,2
   10aec:	d9c00f15 	stw	r7,60(sp)
   10af0:	003f2b06 	br	107a0 <___vfprintf_internal_r+0x60>
   10af4:	210015c4 	addi	r4,r4,87
   10af8:	003fbb06 	br	109e8 <___vfprintf_internal_r+0x2a8>
   10afc:	040000c4 	movi	r16,3
   10b00:	003f2706 	br	107a0 <___vfprintf_internal_r+0x60>
   10b04:	00800044 	movi	r2,1
   10b08:	040000c4 	movi	r16,3
   10b0c:	d8800e15 	stw	r2,56(sp)
   10b10:	003f2306 	br	107a0 <___vfprintf_internal_r+0x60>
   10b14:	000f883a 	mov	r7,zero
   10b18:	003f6706 	br	108b8 <___vfprintf_internal_r+0x178>
   10b1c:	01000044 	movi	r4,1
   10b20:	d9000915 	stw	r4,36(sp)
   10b24:	003f7006 	br	108e8 <___vfprintf_internal_r+0x1a8>
   10b28:	04008916 	blt	zero,r16,10d50 <___vfprintf_internal_r+0x610>
   10b2c:	d8c00a17 	ldw	r3,40(sp)
   10b30:	1805003a 	cmpeq	r2,r3,zero
   10b34:	103fd91e 	bne	r2,zero,10a9c <___vfprintf_internal_r+0x35c>
   10b38:	98c00117 	ldw	r3,4(r19)
   10b3c:	d9001017 	ldw	r4,64(sp)
   10b40:	00800b44 	movi	r2,45
   10b44:	d8800005 	stb	r2,0(sp)
   10b48:	980b883a 	mov	r5,r19
   10b4c:	d80d883a 	mov	r6,sp
   10b50:	01c00044 	movi	r7,1
   10b54:	183ee83a 	callr	r3
   10b58:	103fe11e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10b5c:	b0800044 	addi	r2,r22,1
   10b60:	003fcf06 	br	10aa0 <___vfprintf_internal_r+0x360>
   10b64:	d8c01117 	ldw	r3,68(sp)
   10b68:	1c000017 	ldw	r16,0(r3)
   10b6c:	18c00104 	addi	r3,r3,4
   10b70:	d8c01115 	stw	r3,68(sp)
   10b74:	80005016 	blt	r16,zero,10cb8 <___vfprintf_internal_r+0x578>
   10b78:	d8000a15 	stw	zero,40(sp)
   10b7c:	803f931e 	bne	r16,zero,109cc <___vfprintf_internal_r+0x28c>
   10b80:	dc800104 	addi	r18,sp,4
   10b84:	9039883a 	mov	fp,r18
   10b88:	0029883a 	mov	r20,zero
   10b8c:	003fa806 	br	10a30 <___vfprintf_internal_r+0x2f0>
   10b90:	00800404 	movi	r2,16
   10b94:	00c00044 	movi	r3,1
   10b98:	d8800d15 	stw	r2,52(sp)
   10b9c:	d8000c15 	stw	zero,48(sp)
   10ba0:	d8c00b15 	stw	r3,44(sp)
   10ba4:	003f8106 	br	109ac <___vfprintf_internal_r+0x26c>
   10ba8:	04000044 	movi	r16,1
   10bac:	85c0080e 	bge	r16,r23,10bd0 <___vfprintf_internal_r+0x490>
   10bb0:	d9001017 	ldw	r4,64(sp)
   10bb4:	980b883a 	mov	r5,r19
   10bb8:	01800804 	movi	r6,32
   10bbc:	b9ffffc4 	addi	r7,r23,-1
   10bc0:	00106c00 	call	106c0 <print_repeat>
   10bc4:	103fc61e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10bc8:	bd85883a 	add	r2,r23,r22
   10bcc:	15bfffc4 	addi	r22,r2,-1
   10bd0:	d8c01117 	ldw	r3,68(sp)
   10bd4:	d9001017 	ldw	r4,64(sp)
   10bd8:	800f883a 	mov	r7,r16
   10bdc:	18800017 	ldw	r2,0(r3)
   10be0:	98c00117 	ldw	r3,4(r19)
   10be4:	980b883a 	mov	r5,r19
   10be8:	d8800005 	stb	r2,0(sp)
   10bec:	d80d883a 	mov	r6,sp
   10bf0:	183ee83a 	callr	r3
   10bf4:	103fba1e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10bf8:	d9001117 	ldw	r4,68(sp)
   10bfc:	b5800044 	addi	r22,r22,1
   10c00:	0021883a 	mov	r16,zero
   10c04:	21000104 	addi	r4,r4,4
   10c08:	d9001115 	stw	r4,68(sp)
   10c0c:	003ee406 	br	107a0 <___vfprintf_internal_r+0x60>
   10c10:	01000204 	movi	r4,8
   10c14:	d9000d15 	stw	r4,52(sp)
   10c18:	d8000c15 	stw	zero,48(sp)
   10c1c:	003f6306 	br	109ac <___vfprintf_internal_r+0x26c>
   10c20:	d8801117 	ldw	r2,68(sp)
   10c24:	15000017 	ldw	r20,0(r2)
   10c28:	a009883a 	mov	r4,r20
   10c2c:	00106a00 	call	106a0 <strlen>
   10c30:	b8a1c83a 	sub	r16,r23,r2
   10c34:	1025883a 	mov	r18,r2
   10c38:	0400070e 	bge	zero,r16,10c58 <___vfprintf_internal_r+0x518>
   10c3c:	d9001017 	ldw	r4,64(sp)
   10c40:	980b883a 	mov	r5,r19
   10c44:	01800804 	movi	r6,32
   10c48:	800f883a 	mov	r7,r16
   10c4c:	00106c00 	call	106c0 <print_repeat>
   10c50:	103fa31e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10c54:	b42d883a 	add	r22,r22,r16
   10c58:	98c00117 	ldw	r3,4(r19)
   10c5c:	d9001017 	ldw	r4,64(sp)
   10c60:	a00d883a 	mov	r6,r20
   10c64:	980b883a 	mov	r5,r19
   10c68:	900f883a 	mov	r7,r18
   10c6c:	183ee83a 	callr	r3
   10c70:	103f9b1e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10c74:	d8c01117 	ldw	r3,68(sp)
   10c78:	b4ad883a 	add	r22,r22,r18
   10c7c:	0021883a 	mov	r16,zero
   10c80:	18c00104 	addi	r3,r3,4
   10c84:	d8c01115 	stw	r3,68(sp)
   10c88:	003ec506 	br	107a0 <___vfprintf_internal_r+0x60>
   10c8c:	0007883a 	mov	r3,zero
   10c90:	003ef806 	br	10874 <___vfprintf_internal_r+0x134>
   10c94:	98c00117 	ldw	r3,4(r19)
   10c98:	d9001017 	ldw	r4,64(sp)
   10c9c:	d9400005 	stb	r5,0(sp)
   10ca0:	d80d883a 	mov	r6,sp
   10ca4:	980b883a 	mov	r5,r19
   10ca8:	183ee83a 	callr	r3
   10cac:	103f8c1e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10cb0:	b5800044 	addi	r22,r22,1
   10cb4:	003eba06 	br	107a0 <___vfprintf_internal_r+0x60>
   10cb8:	00800044 	movi	r2,1
   10cbc:	0421c83a 	sub	r16,zero,r16
   10cc0:	d8800a15 	stw	r2,40(sp)
   10cc4:	003f4006 	br	109c8 <___vfprintf_internal_r+0x288>
   10cc8:	102d883a 	mov	r22,r2
   10ccc:	0021883a 	mov	r16,zero
   10cd0:	003eb306 	br	107a0 <___vfprintf_internal_r+0x60>
   10cd4:	98c00117 	ldw	r3,4(r19)
   10cd8:	d9000005 	stb	r4,0(sp)
   10cdc:	d9001017 	ldw	r4,64(sp)
   10ce0:	980b883a 	mov	r5,r19
   10ce4:	d80d883a 	mov	r6,sp
   10ce8:	800f883a 	mov	r7,r16
   10cec:	183ee83a 	callr	r3
   10cf0:	103f7b1e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10cf4:	b42d883a 	add	r22,r22,r16
   10cf8:	0021883a 	mov	r16,zero
   10cfc:	003ea806 	br	107a0 <___vfprintf_internal_r+0x60>
   10d00:	d9001017 	ldw	r4,64(sp)
   10d04:	980b883a 	mov	r5,r19
   10d08:	01800c04 	movi	r6,48
   10d0c:	800f883a 	mov	r7,r16
   10d10:	00106c00 	call	106c0 <print_repeat>
   10d14:	103f721e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10d18:	b405883a 	add	r2,r22,r16
   10d1c:	003f6006 	br	10aa0 <___vfprintf_internal_r+0x360>
   10d20:	98c00117 	ldw	r3,4(r19)
   10d24:	d9001017 	ldw	r4,64(sp)
   10d28:	00800b44 	movi	r2,45
   10d2c:	d8800005 	stb	r2,0(sp)
   10d30:	980b883a 	mov	r5,r19
   10d34:	d80d883a 	mov	r6,sp
   10d38:	01c00044 	movi	r7,1
   10d3c:	183ee83a 	callr	r3
   10d40:	103f671e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10d44:	b5800044 	addi	r22,r22,1
   10d48:	043f540e 	bge	zero,r16,10a9c <___vfprintf_internal_r+0x35c>
   10d4c:	003fec06 	br	10d00 <___vfprintf_internal_r+0x5c0>
   10d50:	d9001017 	ldw	r4,64(sp)
   10d54:	980b883a 	mov	r5,r19
   10d58:	01800804 	movi	r6,32
   10d5c:	800f883a 	mov	r7,r16
   10d60:	00106c00 	call	106c0 <print_repeat>
   10d64:	103f5e1e 	bne	r2,zero,10ae0 <___vfprintf_internal_r+0x3a0>
   10d68:	b42d883a 	add	r22,r22,r16
   10d6c:	003f6f06 	br	10b2c <___vfprintf_internal_r+0x3ec>

00010d70 <__vfprintf_internal>:
   10d70:	00800074 	movhi	r2,1
   10d74:	10873104 	addi	r2,r2,7364
   10d78:	2013883a 	mov	r9,r4
   10d7c:	11000017 	ldw	r4,0(r2)
   10d80:	2805883a 	mov	r2,r5
   10d84:	300f883a 	mov	r7,r6
   10d88:	480b883a 	mov	r5,r9
   10d8c:	100d883a 	mov	r6,r2
   10d90:	00107401 	jmpi	10740 <___vfprintf_internal_r>

00010d94 <__sfvwrite_small_dev>:
   10d94:	2880000b 	ldhu	r2,0(r5)
   10d98:	defffa04 	addi	sp,sp,-24
   10d9c:	dcc00315 	stw	r19,12(sp)
   10da0:	1080020c 	andi	r2,r2,8
   10da4:	dc800215 	stw	r18,8(sp)
   10da8:	dc400115 	stw	r17,4(sp)
   10dac:	dfc00515 	stw	ra,20(sp)
   10db0:	dd000415 	stw	r20,16(sp)
   10db4:	dc000015 	stw	r16,0(sp)
   10db8:	2825883a 	mov	r18,r5
   10dbc:	2027883a 	mov	r19,r4
   10dc0:	3023883a 	mov	r17,r6
   10dc4:	10002026 	beq	r2,zero,10e48 <__sfvwrite_small_dev+0xb4>
   10dc8:	2940008f 	ldh	r5,2(r5)
   10dcc:	28000f16 	blt	r5,zero,10e0c <__sfvwrite_small_dev+0x78>
   10dd0:	01c01b0e 	bge	zero,r7,10e40 <__sfvwrite_small_dev+0xac>
   10dd4:	3821883a 	mov	r16,r7
   10dd8:	05010004 	movi	r20,1024
   10ddc:	00000206 	br	10de8 <__sfvwrite_small_dev+0x54>
   10de0:	0400170e 	bge	zero,r16,10e40 <__sfvwrite_small_dev+0xac>
   10de4:	9140008f 	ldh	r5,2(r18)
   10de8:	880d883a 	mov	r6,r17
   10dec:	9809883a 	mov	r4,r19
   10df0:	800f883a 	mov	r7,r16
   10df4:	a400010e 	bge	r20,r16,10dfc <__sfvwrite_small_dev+0x68>
   10df8:	01c10004 	movi	r7,1024
   10dfc:	0010f340 	call	10f34 <_write_r>
   10e00:	88a3883a 	add	r17,r17,r2
   10e04:	80a1c83a 	sub	r16,r16,r2
   10e08:	00bff516 	blt	zero,r2,10de0 <__sfvwrite_small_dev+0x4c>
   10e0c:	9080000b 	ldhu	r2,0(r18)
   10e10:	00ffffc4 	movi	r3,-1
   10e14:	10801014 	ori	r2,r2,64
   10e18:	9080000d 	sth	r2,0(r18)
   10e1c:	1805883a 	mov	r2,r3
   10e20:	dfc00517 	ldw	ra,20(sp)
   10e24:	dd000417 	ldw	r20,16(sp)
   10e28:	dcc00317 	ldw	r19,12(sp)
   10e2c:	dc800217 	ldw	r18,8(sp)
   10e30:	dc400117 	ldw	r17,4(sp)
   10e34:	dc000017 	ldw	r16,0(sp)
   10e38:	dec00604 	addi	sp,sp,24
   10e3c:	f800283a 	ret
   10e40:	0007883a 	mov	r3,zero
   10e44:	003ff506 	br	10e1c <__sfvwrite_small_dev+0x88>
   10e48:	00ffffc4 	movi	r3,-1
   10e4c:	003ff306 	br	10e1c <__sfvwrite_small_dev+0x88>

00010e50 <putc>:
   10e50:	defffd04 	addi	sp,sp,-12
   10e54:	00800074 	movhi	r2,1
   10e58:	10873104 	addi	r2,r2,7364
   10e5c:	dc000115 	stw	r16,4(sp)
   10e60:	2021883a 	mov	r16,r4
   10e64:	11000017 	ldw	r4,0(r2)
   10e68:	dc000005 	stb	r16,0(sp)
   10e6c:	00800074 	movhi	r2,1
   10e70:	10836504 	addi	r2,r2,3476
   10e74:	dfc00215 	stw	ra,8(sp)
   10e78:	28800115 	stw	r2,4(r5)
   10e7c:	d80d883a 	mov	r6,sp
   10e80:	01c00044 	movi	r7,1
   10e84:	103ee83a 	callr	r2
   10e88:	1007883a 	mov	r3,r2
   10e8c:	00bfffc4 	movi	r2,-1
   10e90:	18800526 	beq	r3,r2,10ea8 <putc+0x58>
   10e94:	8005883a 	mov	r2,r16
   10e98:	dfc00217 	ldw	ra,8(sp)
   10e9c:	dc000117 	ldw	r16,4(sp)
   10ea0:	dec00304 	addi	sp,sp,12
   10ea4:	f800283a 	ret
   10ea8:	1821883a 	mov	r16,r3
   10eac:	8005883a 	mov	r2,r16
   10eb0:	dfc00217 	ldw	ra,8(sp)
   10eb4:	dc000117 	ldw	r16,4(sp)
   10eb8:	dec00304 	addi	sp,sp,12
   10ebc:	f800283a 	ret

00010ec0 <_putc_r>:
   10ec0:	00800074 	movhi	r2,1
   10ec4:	10873104 	addi	r2,r2,7364
   10ec8:	defffd04 	addi	sp,sp,-12
   10ecc:	11000017 	ldw	r4,0(r2)
   10ed0:	00800074 	movhi	r2,1
   10ed4:	10836504 	addi	r2,r2,3476
   10ed8:	30800115 	stw	r2,4(r6)
   10edc:	dc000115 	stw	r16,4(sp)
   10ee0:	2821883a 	mov	r16,r5
   10ee4:	dfc00215 	stw	ra,8(sp)
   10ee8:	300b883a 	mov	r5,r6
   10eec:	01c00044 	movi	r7,1
   10ef0:	d80d883a 	mov	r6,sp
   10ef4:	dc000005 	stb	r16,0(sp)
   10ef8:	103ee83a 	callr	r2
   10efc:	1007883a 	mov	r3,r2
   10f00:	00bfffc4 	movi	r2,-1
   10f04:	18800526 	beq	r3,r2,10f1c <_putc_r+0x5c>
   10f08:	8005883a 	mov	r2,r16
   10f0c:	dfc00217 	ldw	ra,8(sp)
   10f10:	dc000117 	ldw	r16,4(sp)
   10f14:	dec00304 	addi	sp,sp,12
   10f18:	f800283a 	ret
   10f1c:	1821883a 	mov	r16,r3
   10f20:	8005883a 	mov	r2,r16
   10f24:	dfc00217 	ldw	ra,8(sp)
   10f28:	dc000117 	ldw	r16,4(sp)
   10f2c:	dec00304 	addi	sp,sp,12
   10f30:	f800283a 	ret

00010f34 <_write_r>:
   10f34:	defffd04 	addi	sp,sp,-12
   10f38:	dc000015 	stw	r16,0(sp)
   10f3c:	04000074 	movhi	r16,1
   10f40:	8407e504 	addi	r16,r16,8084
   10f44:	dc400115 	stw	r17,4(sp)
   10f48:	80000015 	stw	zero,0(r16)
   10f4c:	2023883a 	mov	r17,r4
   10f50:	2809883a 	mov	r4,r5
   10f54:	300b883a 	mov	r5,r6
   10f58:	380d883a 	mov	r6,r7
   10f5c:	dfc00215 	stw	ra,8(sp)
   10f60:	00111080 	call	11108 <write>
   10f64:	1007883a 	mov	r3,r2
   10f68:	00bfffc4 	movi	r2,-1
   10f6c:	18800626 	beq	r3,r2,10f88 <_write_r+0x54>
   10f70:	1805883a 	mov	r2,r3
   10f74:	dfc00217 	ldw	ra,8(sp)
   10f78:	dc400117 	ldw	r17,4(sp)
   10f7c:	dc000017 	ldw	r16,0(sp)
   10f80:	dec00304 	addi	sp,sp,12
   10f84:	f800283a 	ret
   10f88:	80800017 	ldw	r2,0(r16)
   10f8c:	103ff826 	beq	r2,zero,10f70 <_write_r+0x3c>
   10f90:	88800015 	stw	r2,0(r17)
   10f94:	1805883a 	mov	r2,r3
   10f98:	dfc00217 	ldw	ra,8(sp)
   10f9c:	dc400117 	ldw	r17,4(sp)
   10fa0:	dc000017 	ldw	r16,0(sp)
   10fa4:	dec00304 	addi	sp,sp,12
   10fa8:	f800283a 	ret

00010fac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10fac:	defffe04 	addi	sp,sp,-8
   10fb0:	dfc00115 	stw	ra,4(sp)
   10fb4:	df000015 	stw	fp,0(sp)
   10fb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10fbc:	01000074 	movhi	r4,1
   10fc0:	21073904 	addi	r4,r4,7396
   10fc4:	01400074 	movhi	r5,1
   10fc8:	29468f04 	addi	r5,r5,6716
   10fcc:	01800074 	movhi	r6,1
   10fd0:	31873904 	addi	r6,r6,7396
   10fd4:	001102c0 	call	1102c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10fd8:	01000074 	movhi	r4,1
   10fdc:	21000804 	addi	r4,r4,32
   10fe0:	01400074 	movhi	r5,1
   10fe4:	29400804 	addi	r5,r5,32
   10fe8:	01800074 	movhi	r6,1
   10fec:	31800804 	addi	r6,r6,32
   10ff0:	001102c0 	call	1102c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10ff4:	01000074 	movhi	r4,1
   10ff8:	21065304 	addi	r4,r4,6476
   10ffc:	01400074 	movhi	r5,1
   11000:	29465304 	addi	r5,r5,6476
   11004:	01800074 	movhi	r6,1
   11008:	31868f04 	addi	r6,r6,6716
   1100c:	001102c0 	call	1102c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11010:	00115800 	call	11580 <alt_dcache_flush_all>
  alt_icache_flush_all();
   11014:	00115c80 	call	115c8 <alt_icache_flush_all>
}
   11018:	e037883a 	mov	sp,fp
   1101c:	dfc00117 	ldw	ra,4(sp)
   11020:	df000017 	ldw	fp,0(sp)
   11024:	dec00204 	addi	sp,sp,8
   11028:	f800283a 	ret

0001102c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1102c:	defffc04 	addi	sp,sp,-16
   11030:	df000315 	stw	fp,12(sp)
   11034:	df000304 	addi	fp,sp,12
   11038:	e13ffd15 	stw	r4,-12(fp)
   1103c:	e17ffe15 	stw	r5,-8(fp)
   11040:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11044:	e0fffe17 	ldw	r3,-8(fp)
   11048:	e0bffd17 	ldw	r2,-12(fp)
   1104c:	18800e26 	beq	r3,r2,11088 <alt_load_section+0x5c>
  {
    while( to != end )
   11050:	00000a06 	br	1107c <alt_load_section+0x50>
    {
      *to++ = *from++;
   11054:	e0bffd17 	ldw	r2,-12(fp)
   11058:	10c00017 	ldw	r3,0(r2)
   1105c:	e0bffe17 	ldw	r2,-8(fp)
   11060:	10c00015 	stw	r3,0(r2)
   11064:	e0bffe17 	ldw	r2,-8(fp)
   11068:	10800104 	addi	r2,r2,4
   1106c:	e0bffe15 	stw	r2,-8(fp)
   11070:	e0bffd17 	ldw	r2,-12(fp)
   11074:	10800104 	addi	r2,r2,4
   11078:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1107c:	e0fffe17 	ldw	r3,-8(fp)
   11080:	e0bfff17 	ldw	r2,-4(fp)
   11084:	18bff31e 	bne	r3,r2,11054 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   11088:	e037883a 	mov	sp,fp
   1108c:	df000017 	ldw	fp,0(sp)
   11090:	dec00104 	addi	sp,sp,4
   11094:	f800283a 	ret

00011098 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11098:	defffd04 	addi	sp,sp,-12
   1109c:	dfc00215 	stw	ra,8(sp)
   110a0:	df000115 	stw	fp,4(sp)
   110a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   110a8:	0009883a 	mov	r4,zero
   110ac:	00112880 	call	11288 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   110b0:	00112bc0 	call	112bc <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   110b4:	d120b517 	ldw	r4,-32044(gp)
   110b8:	d160b617 	ldw	r5,-32040(gp)
   110bc:	d1a0b717 	ldw	r6,-32036(gp)
   110c0:	00102ec0 	call	102ec <main>
   110c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   110c8:	01000044 	movi	r4,1
   110cc:	00114240 	call	11424 <close>
  exit (result);
   110d0:	e13fff17 	ldw	r4,-4(fp)
   110d4:	00117080 	call	11708 <exit>

000110d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   110d8:	defffd04 	addi	sp,sp,-12
   110dc:	dfc00215 	stw	ra,8(sp)
   110e0:	df000115 	stw	fp,4(sp)
   110e4:	df000104 	addi	fp,sp,4
   110e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   110ec:	e13fff17 	ldw	r4,-4(fp)
   110f0:	00112d80 	call	112d8 <alt_busy_sleep>
}
   110f4:	e037883a 	mov	sp,fp
   110f8:	dfc00117 	ldw	ra,4(sp)
   110fc:	df000017 	ldw	fp,0(sp)
   11100:	dec00204 	addi	sp,sp,8
   11104:	f800283a 	ret

00011108 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11108:	defff704 	addi	sp,sp,-36
   1110c:	dfc00815 	stw	ra,32(sp)
   11110:	df000715 	stw	fp,28(sp)
   11114:	df000704 	addi	fp,sp,28
   11118:	e13ffb15 	stw	r4,-20(fp)
   1111c:	e17ffc15 	stw	r5,-16(fp)
   11120:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11124:	e0bffb17 	ldw	r2,-20(fp)
   11128:	1004803a 	cmplt	r2,r2,zero
   1112c:	1000081e 	bne	r2,zero,11150 <write+0x48>
   11130:	e0bffb17 	ldw	r2,-20(fp)
   11134:	10800324 	muli	r2,r2,12
   11138:	1007883a 	mov	r3,r2
   1113c:	00800074 	movhi	r2,1
   11140:	1086d104 	addi	r2,r2,6980
   11144:	1887883a 	add	r3,r3,r2
   11148:	e0ffff15 	stw	r3,-4(fp)
   1114c:	00000106 	br	11154 <write+0x4c>
   11150:	e03fff15 	stw	zero,-4(fp)
   11154:	e0bfff17 	ldw	r2,-4(fp)
   11158:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1115c:	e0bffa17 	ldw	r2,-24(fp)
   11160:	1005003a 	cmpeq	r2,r2,zero
   11164:	1000241e 	bne	r2,zero,111f8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11168:	e0bffa17 	ldw	r2,-24(fp)
   1116c:	10800217 	ldw	r2,8(r2)
   11170:	108000cc 	andi	r2,r2,3
   11174:	1005003a 	cmpeq	r2,r2,zero
   11178:	10001a1e 	bne	r2,zero,111e4 <write+0xdc>
   1117c:	e0bffa17 	ldw	r2,-24(fp)
   11180:	10800017 	ldw	r2,0(r2)
   11184:	10800617 	ldw	r2,24(r2)
   11188:	1005003a 	cmpeq	r2,r2,zero
   1118c:	1000151e 	bne	r2,zero,111e4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11190:	e0bffa17 	ldw	r2,-24(fp)
   11194:	10800017 	ldw	r2,0(r2)
   11198:	10800617 	ldw	r2,24(r2)
   1119c:	e17ffc17 	ldw	r5,-16(fp)
   111a0:	e1bffd17 	ldw	r6,-12(fp)
   111a4:	e13ffa17 	ldw	r4,-24(fp)
   111a8:	103ee83a 	callr	r2
   111ac:	e0bff915 	stw	r2,-28(fp)
   111b0:	e0bff917 	ldw	r2,-28(fp)
   111b4:	1004403a 	cmpge	r2,r2,zero
   111b8:	1000071e 	bne	r2,zero,111d8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   111bc:	00112280 	call	11228 <alt_get_errno>
   111c0:	e0fff917 	ldw	r3,-28(fp)
   111c4:	00c7c83a 	sub	r3,zero,r3
   111c8:	10c00015 	stw	r3,0(r2)
        return -1;
   111cc:	00bfffc4 	movi	r2,-1
   111d0:	e0bffe15 	stw	r2,-8(fp)
   111d4:	00000e06 	br	11210 <write+0x108>
      }
      return rval;
   111d8:	e0bff917 	ldw	r2,-28(fp)
   111dc:	e0bffe15 	stw	r2,-8(fp)
   111e0:	00000b06 	br	11210 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   111e4:	00112280 	call	11228 <alt_get_errno>
   111e8:	1007883a 	mov	r3,r2
   111ec:	00800344 	movi	r2,13
   111f0:	18800015 	stw	r2,0(r3)
   111f4:	00000406 	br	11208 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   111f8:	00112280 	call	11228 <alt_get_errno>
   111fc:	1007883a 	mov	r3,r2
   11200:	00801444 	movi	r2,81
   11204:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11208:	00bfffc4 	movi	r2,-1
   1120c:	e0bffe15 	stw	r2,-8(fp)
   11210:	e0bffe17 	ldw	r2,-8(fp)
}
   11214:	e037883a 	mov	sp,fp
   11218:	dfc00117 	ldw	ra,4(sp)
   1121c:	df000017 	ldw	fp,0(sp)
   11220:	dec00204 	addi	sp,sp,8
   11224:	f800283a 	ret

00011228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11228:	defffd04 	addi	sp,sp,-12
   1122c:	dfc00215 	stw	ra,8(sp)
   11230:	df000115 	stw	fp,4(sp)
   11234:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11238:	00800074 	movhi	r2,1
   1123c:	10873804 	addi	r2,r2,7392
   11240:	10800017 	ldw	r2,0(r2)
   11244:	1005003a 	cmpeq	r2,r2,zero
   11248:	1000061e 	bne	r2,zero,11264 <alt_get_errno+0x3c>
   1124c:	00800074 	movhi	r2,1
   11250:	10873804 	addi	r2,r2,7392
   11254:	10800017 	ldw	r2,0(r2)
   11258:	103ee83a 	callr	r2
   1125c:	e0bfff15 	stw	r2,-4(fp)
   11260:	00000306 	br	11270 <alt_get_errno+0x48>
   11264:	00800074 	movhi	r2,1
   11268:	1087e504 	addi	r2,r2,8084
   1126c:	e0bfff15 	stw	r2,-4(fp)
   11270:	e0bfff17 	ldw	r2,-4(fp)
}
   11274:	e037883a 	mov	sp,fp
   11278:	dfc00117 	ldw	ra,4(sp)
   1127c:	df000017 	ldw	fp,0(sp)
   11280:	dec00204 	addi	sp,sp,8
   11284:	f800283a 	ret

00011288 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11288:	defffd04 	addi	sp,sp,-12
   1128c:	dfc00215 	stw	ra,8(sp)
   11290:	df000115 	stw	fp,4(sp)
   11294:	df000104 	addi	fp,sp,4
   11298:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   1129c:	00116580 	call	11658 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   112a0:	00800044 	movi	r2,1
   112a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   112a8:	e037883a 	mov	sp,fp
   112ac:	dfc00117 	ldw	ra,4(sp)
   112b0:	df000017 	ldw	fp,0(sp)
   112b4:	dec00204 	addi	sp,sp,8
   112b8:	f800283a 	ret

000112bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   112bc:	deffff04 	addi	sp,sp,-4
   112c0:	df000015 	stw	fp,0(sp)
   112c4:	d839883a 	mov	fp,sp
}
   112c8:	e037883a 	mov	sp,fp
   112cc:	df000017 	ldw	fp,0(sp)
   112d0:	dec00104 	addi	sp,sp,4
   112d4:	f800283a 	ret

000112d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   112d8:	defffa04 	addi	sp,sp,-24
   112dc:	dfc00515 	stw	ra,20(sp)
   112e0:	df000415 	stw	fp,16(sp)
   112e4:	df000404 	addi	fp,sp,16
   112e8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   112ec:	008000c4 	movi	r2,3
   112f0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   112f4:	e0fffc17 	ldw	r3,-16(fp)
   112f8:	008003f4 	movhi	r2,15
   112fc:	10909004 	addi	r2,r2,16960
   11300:	188b383a 	mul	r5,r3,r2
   11304:	0100bef4 	movhi	r4,763
   11308:	213c2004 	addi	r4,r4,-3968
   1130c:	00105300 	call	10530 <__udivsi3>
   11310:	100b883a 	mov	r5,r2
   11314:	01200034 	movhi	r4,32768
   11318:	213fffc4 	addi	r4,r4,-1
   1131c:	00105300 	call	10530 <__udivsi3>
   11320:	100b883a 	mov	r5,r2
   11324:	e13fff17 	ldw	r4,-4(fp)
   11328:	00105300 	call	10530 <__udivsi3>
   1132c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11330:	e0bffd17 	ldw	r2,-12(fp)
   11334:	1005003a 	cmpeq	r2,r2,zero
   11338:	1000281e 	bne	r2,zero,113dc <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   1133c:	e03ffe15 	stw	zero,-8(fp)
   11340:	00001606 	br	1139c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11344:	00a00034 	movhi	r2,32768
   11348:	10bfffc4 	addi	r2,r2,-1
   1134c:	10bfffc4 	addi	r2,r2,-1
   11350:	103ffe1e 	bne	r2,zero,1134c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11354:	e0fffc17 	ldw	r3,-16(fp)
   11358:	008003f4 	movhi	r2,15
   1135c:	10909004 	addi	r2,r2,16960
   11360:	188b383a 	mul	r5,r3,r2
   11364:	0100bef4 	movhi	r4,763
   11368:	213c2004 	addi	r4,r4,-3968
   1136c:	00105300 	call	10530 <__udivsi3>
   11370:	100b883a 	mov	r5,r2
   11374:	01200034 	movhi	r4,32768
   11378:	213fffc4 	addi	r4,r4,-1
   1137c:	00105300 	call	10530 <__udivsi3>
   11380:	1007883a 	mov	r3,r2
   11384:	e0bfff17 	ldw	r2,-4(fp)
   11388:	10c5c83a 	sub	r2,r2,r3
   1138c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11390:	e0bffe17 	ldw	r2,-8(fp)
   11394:	10800044 	addi	r2,r2,1
   11398:	e0bffe15 	stw	r2,-8(fp)
   1139c:	e0fffe17 	ldw	r3,-8(fp)
   113a0:	e0bffd17 	ldw	r2,-12(fp)
   113a4:	18bfe716 	blt	r3,r2,11344 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   113a8:	e0fffc17 	ldw	r3,-16(fp)
   113ac:	008003f4 	movhi	r2,15
   113b0:	10909004 	addi	r2,r2,16960
   113b4:	188b383a 	mul	r5,r3,r2
   113b8:	0100bef4 	movhi	r4,763
   113bc:	213c2004 	addi	r4,r4,-3968
   113c0:	00105300 	call	10530 <__udivsi3>
   113c4:	1007883a 	mov	r3,r2
   113c8:	e0bfff17 	ldw	r2,-4(fp)
   113cc:	1885383a 	mul	r2,r3,r2
   113d0:	10bfffc4 	addi	r2,r2,-1
   113d4:	103ffe1e 	bne	r2,zero,113d0 <alt_busy_sleep+0xf8>
   113d8:	00000c06 	br	1140c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   113dc:	e0fffc17 	ldw	r3,-16(fp)
   113e0:	008003f4 	movhi	r2,15
   113e4:	10909004 	addi	r2,r2,16960
   113e8:	188b383a 	mul	r5,r3,r2
   113ec:	0100bef4 	movhi	r4,763
   113f0:	213c2004 	addi	r4,r4,-3968
   113f4:	00105300 	call	10530 <__udivsi3>
   113f8:	1007883a 	mov	r3,r2
   113fc:	e0bfff17 	ldw	r2,-4(fp)
   11400:	1885383a 	mul	r2,r3,r2
   11404:	10bfffc4 	addi	r2,r2,-1
   11408:	00bffe16 	blt	zero,r2,11404 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1140c:	0005883a 	mov	r2,zero
}
   11410:	e037883a 	mov	sp,fp
   11414:	dfc00117 	ldw	ra,4(sp)
   11418:	df000017 	ldw	fp,0(sp)
   1141c:	dec00204 	addi	sp,sp,8
   11420:	f800283a 	ret

00011424 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11424:	defff804 	addi	sp,sp,-32
   11428:	dfc00715 	stw	ra,28(sp)
   1142c:	df000615 	stw	fp,24(sp)
   11430:	df000604 	addi	fp,sp,24
   11434:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11438:	e0bffc17 	ldw	r2,-16(fp)
   1143c:	1004803a 	cmplt	r2,r2,zero
   11440:	1000081e 	bne	r2,zero,11464 <close+0x40>
   11444:	e0bffc17 	ldw	r2,-16(fp)
   11448:	10800324 	muli	r2,r2,12
   1144c:	1007883a 	mov	r3,r2
   11450:	00800074 	movhi	r2,1
   11454:	1086d104 	addi	r2,r2,6980
   11458:	1887883a 	add	r3,r3,r2
   1145c:	e0ffff15 	stw	r3,-4(fp)
   11460:	00000106 	br	11468 <close+0x44>
   11464:	e03fff15 	stw	zero,-4(fp)
   11468:	e0bfff17 	ldw	r2,-4(fp)
   1146c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   11470:	e0bffb17 	ldw	r2,-20(fp)
   11474:	1005003a 	cmpeq	r2,r2,zero
   11478:	10001d1e 	bne	r2,zero,114f0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1147c:	e0bffb17 	ldw	r2,-20(fp)
   11480:	10800017 	ldw	r2,0(r2)
   11484:	10800417 	ldw	r2,16(r2)
   11488:	1005003a 	cmpeq	r2,r2,zero
   1148c:	1000071e 	bne	r2,zero,114ac <close+0x88>
   11490:	e0bffb17 	ldw	r2,-20(fp)
   11494:	10800017 	ldw	r2,0(r2)
   11498:	10800417 	ldw	r2,16(r2)
   1149c:	e13ffb17 	ldw	r4,-20(fp)
   114a0:	103ee83a 	callr	r2
   114a4:	e0bffe15 	stw	r2,-8(fp)
   114a8:	00000106 	br	114b0 <close+0x8c>
   114ac:	e03ffe15 	stw	zero,-8(fp)
   114b0:	e0bffe17 	ldw	r2,-8(fp)
   114b4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   114b8:	e13ffc17 	ldw	r4,-16(fp)
   114bc:	00115f80 	call	115f8 <alt_release_fd>
    if (rval < 0)
   114c0:	e0bffa17 	ldw	r2,-24(fp)
   114c4:	1004403a 	cmpge	r2,r2,zero
   114c8:	1000071e 	bne	r2,zero,114e8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   114cc:	00115200 	call	11520 <alt_get_errno>
   114d0:	e0fffa17 	ldw	r3,-24(fp)
   114d4:	00c7c83a 	sub	r3,zero,r3
   114d8:	10c00015 	stw	r3,0(r2)
      return -1;
   114dc:	00bfffc4 	movi	r2,-1
   114e0:	e0bffd15 	stw	r2,-12(fp)
   114e4:	00000806 	br	11508 <close+0xe4>
    }
    return 0;
   114e8:	e03ffd15 	stw	zero,-12(fp)
   114ec:	00000606 	br	11508 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   114f0:	00115200 	call	11520 <alt_get_errno>
   114f4:	1007883a 	mov	r3,r2
   114f8:	00801444 	movi	r2,81
   114fc:	18800015 	stw	r2,0(r3)
    return -1;
   11500:	00bfffc4 	movi	r2,-1
   11504:	e0bffd15 	stw	r2,-12(fp)
   11508:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   1150c:	e037883a 	mov	sp,fp
   11510:	dfc00117 	ldw	ra,4(sp)
   11514:	df000017 	ldw	fp,0(sp)
   11518:	dec00204 	addi	sp,sp,8
   1151c:	f800283a 	ret

00011520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11520:	defffd04 	addi	sp,sp,-12
   11524:	dfc00215 	stw	ra,8(sp)
   11528:	df000115 	stw	fp,4(sp)
   1152c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11530:	00800074 	movhi	r2,1
   11534:	10873804 	addi	r2,r2,7392
   11538:	10800017 	ldw	r2,0(r2)
   1153c:	1005003a 	cmpeq	r2,r2,zero
   11540:	1000061e 	bne	r2,zero,1155c <alt_get_errno+0x3c>
   11544:	00800074 	movhi	r2,1
   11548:	10873804 	addi	r2,r2,7392
   1154c:	10800017 	ldw	r2,0(r2)
   11550:	103ee83a 	callr	r2
   11554:	e0bfff15 	stw	r2,-4(fp)
   11558:	00000306 	br	11568 <alt_get_errno+0x48>
   1155c:	00800074 	movhi	r2,1
   11560:	1087e504 	addi	r2,r2,8084
   11564:	e0bfff15 	stw	r2,-4(fp)
   11568:	e0bfff17 	ldw	r2,-4(fp)
}
   1156c:	e037883a 	mov	sp,fp
   11570:	dfc00117 	ldw	ra,4(sp)
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00204 	addi	sp,sp,8
   1157c:	f800283a 	ret

00011580 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11580:	deffff04 	addi	sp,sp,-4
   11584:	df000015 	stw	fp,0(sp)
   11588:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1158c:	e037883a 	mov	sp,fp
   11590:	df000017 	ldw	fp,0(sp)
   11594:	dec00104 	addi	sp,sp,4
   11598:	f800283a 	ret

0001159c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1159c:	defffc04 	addi	sp,sp,-16
   115a0:	df000315 	stw	fp,12(sp)
   115a4:	df000304 	addi	fp,sp,12
   115a8:	e13ffd15 	stw	r4,-12(fp)
   115ac:	e17ffe15 	stw	r5,-8(fp)
   115b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   115b4:	e0bfff17 	ldw	r2,-4(fp)
}
   115b8:	e037883a 	mov	sp,fp
   115bc:	df000017 	ldw	fp,0(sp)
   115c0:	dec00104 	addi	sp,sp,4
   115c4:	f800283a 	ret

000115c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   115c8:	defffe04 	addi	sp,sp,-8
   115cc:	dfc00115 	stw	ra,4(sp)
   115d0:	df000015 	stw	fp,0(sp)
   115d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   115d8:	0009883a 	mov	r4,zero
   115dc:	01420004 	movi	r5,2048
   115e0:	00116780 	call	11678 <alt_icache_flush>
#endif
}
   115e4:	e037883a 	mov	sp,fp
   115e8:	dfc00117 	ldw	ra,4(sp)
   115ec:	df000017 	ldw	fp,0(sp)
   115f0:	dec00204 	addi	sp,sp,8
   115f4:	f800283a 	ret

000115f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   115f8:	defffe04 	addi	sp,sp,-8
   115fc:	df000115 	stw	fp,4(sp)
   11600:	df000104 	addi	fp,sp,4
   11604:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11608:	e0bfff17 	ldw	r2,-4(fp)
   1160c:	108000d0 	cmplti	r2,r2,3
   11610:	10000d1e 	bne	r2,zero,11648 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   11614:	e0bfff17 	ldw	r2,-4(fp)
   11618:	00c00074 	movhi	r3,1
   1161c:	18c6d104 	addi	r3,r3,6980
   11620:	10800324 	muli	r2,r2,12
   11624:	10c5883a 	add	r2,r2,r3
   11628:	10800204 	addi	r2,r2,8
   1162c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11630:	e0bfff17 	ldw	r2,-4(fp)
   11634:	00c00074 	movhi	r3,1
   11638:	18c6d104 	addi	r3,r3,6980
   1163c:	10800324 	muli	r2,r2,12
   11640:	10c5883a 	add	r2,r2,r3
   11644:	10000015 	stw	zero,0(r2)
  }
}
   11648:	e037883a 	mov	sp,fp
   1164c:	df000017 	ldw	fp,0(sp)
   11650:	dec00104 	addi	sp,sp,4
   11654:	f800283a 	ret

00011658 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11658:	deffff04 	addi	sp,sp,-4
   1165c:	df000015 	stw	fp,0(sp)
   11660:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11664:	000170fa 	wrctl	ienable,zero
}
   11668:	e037883a 	mov	sp,fp
   1166c:	df000017 	ldw	fp,0(sp)
   11670:	dec00104 	addi	sp,sp,4
   11674:	f800283a 	ret

00011678 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11678:	defffb04 	addi	sp,sp,-20
   1167c:	df000415 	stw	fp,16(sp)
   11680:	df000404 	addi	fp,sp,16
   11684:	e13ffe15 	stw	r4,-8(fp)
   11688:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1168c:	e0bfff17 	ldw	r2,-4(fp)
   11690:	10820070 	cmpltui	r2,r2,2049
   11694:	1000021e 	bne	r2,zero,116a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11698:	00820004 	movi	r2,2048
   1169c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   116a0:	e0fffe17 	ldw	r3,-8(fp)
   116a4:	e0bfff17 	ldw	r2,-4(fp)
   116a8:	1885883a 	add	r2,r3,r2
   116ac:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   116b0:	e0bffe17 	ldw	r2,-8(fp)
   116b4:	e0bffd15 	stw	r2,-12(fp)
   116b8:	00000506 	br	116d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   116bc:	e0bffd17 	ldw	r2,-12(fp)
   116c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   116c4:	e0bffd17 	ldw	r2,-12(fp)
   116c8:	10800804 	addi	r2,r2,32
   116cc:	e0bffd15 	stw	r2,-12(fp)
   116d0:	e0fffd17 	ldw	r3,-12(fp)
   116d4:	e0bffc17 	ldw	r2,-16(fp)
   116d8:	18bff836 	bltu	r3,r2,116bc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   116dc:	e0bffe17 	ldw	r2,-8(fp)
   116e0:	108007cc 	andi	r2,r2,31
   116e4:	1005003a 	cmpeq	r2,r2,zero
   116e8:	1000021e 	bne	r2,zero,116f4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   116ec:	e0bffd17 	ldw	r2,-12(fp)
   116f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   116f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   116f8:	e037883a 	mov	sp,fp
   116fc:	df000017 	ldw	fp,0(sp)
   11700:	dec00104 	addi	sp,sp,4
   11704:	f800283a 	ret

00011708 <exit>:
   11708:	defffe04 	addi	sp,sp,-8
   1170c:	dc400015 	stw	r17,0(sp)
   11710:	000b883a 	mov	r5,zero
   11714:	2023883a 	mov	r17,r4
   11718:	dfc00115 	stw	ra,4(sp)
   1171c:	001172c0 	call	1172c <__call_exitprocs>
   11720:	8809883a 	mov	r4,r17
   11724:	00119280 	call	11928 <_exit>

00011728 <register_fini>:
   11728:	f800283a 	ret

0001172c <__call_exitprocs>:
   1172c:	defff304 	addi	sp,sp,-52
   11730:	00800074 	movhi	r2,1
   11734:	10873204 	addi	r2,r2,7368
   11738:	df000b15 	stw	fp,44(sp)
   1173c:	17000017 	ldw	fp,0(r2)
   11740:	00800034 	movhi	r2,0
   11744:	10800004 	addi	r2,r2,0
   11748:	1005003a 	cmpeq	r2,r2,zero
   1174c:	d8800215 	stw	r2,8(sp)
   11750:	e0800c04 	addi	r2,fp,48
   11754:	dd800915 	stw	r22,36(sp)
   11758:	dd400815 	stw	r21,32(sp)
   1175c:	dfc00c15 	stw	ra,48(sp)
   11760:	ddc00a15 	stw	r23,40(sp)
   11764:	dd000715 	stw	r20,28(sp)
   11768:	dcc00615 	stw	r19,24(sp)
   1176c:	dc800515 	stw	r18,20(sp)
   11770:	dc400415 	stw	r17,16(sp)
   11774:	dc000315 	stw	r16,12(sp)
   11778:	282d883a 	mov	r22,r5
   1177c:	d9000115 	stw	r4,4(sp)
   11780:	d8800015 	stw	r2,0(sp)
   11784:	282b003a 	cmpeq	r21,r5,zero
   11788:	e4400c17 	ldw	r17,48(fp)
   1178c:	88001226 	beq	r17,zero,117d8 <__call_exitprocs+0xac>
   11790:	ddc00017 	ldw	r23,0(sp)
   11794:	88800117 	ldw	r2,4(r17)
   11798:	8c802217 	ldw	r18,136(r17)
   1179c:	143fffc4 	addi	r16,r2,-1
   117a0:	80000b16 	blt	r16,zero,117d0 <__call_exitprocs+0xa4>
   117a4:	9027003a 	cmpeq	r19,r18,zero
   117a8:	a800171e 	bne	r21,zero,11808 <__call_exitprocs+0xdc>
   117ac:	9800051e 	bne	r19,zero,117c4 <__call_exitprocs+0x98>
   117b0:	8409883a 	add	r4,r16,r16
   117b4:	2105883a 	add	r2,r4,r4
   117b8:	1485883a 	add	r2,r2,r18
   117bc:	10c02017 	ldw	r3,128(r2)
   117c0:	b0c01226 	beq	r22,r3,1180c <__call_exitprocs+0xe0>
   117c4:	843fffc4 	addi	r16,r16,-1
   117c8:	00bfffc4 	movi	r2,-1
   117cc:	80bff61e 	bne	r16,r2,117a8 <__call_exitprocs+0x7c>
   117d0:	d8800217 	ldw	r2,8(sp)
   117d4:	10003226 	beq	r2,zero,118a0 <__call_exitprocs+0x174>
   117d8:	dfc00c17 	ldw	ra,48(sp)
   117dc:	df000b17 	ldw	fp,44(sp)
   117e0:	ddc00a17 	ldw	r23,40(sp)
   117e4:	dd800917 	ldw	r22,36(sp)
   117e8:	dd400817 	ldw	r21,32(sp)
   117ec:	dd000717 	ldw	r20,28(sp)
   117f0:	dcc00617 	ldw	r19,24(sp)
   117f4:	dc800517 	ldw	r18,20(sp)
   117f8:	dc400417 	ldw	r17,16(sp)
   117fc:	dc000317 	ldw	r16,12(sp)
   11800:	dec00d04 	addi	sp,sp,52
   11804:	f800283a 	ret
   11808:	8409883a 	add	r4,r16,r16
   1180c:	88c00117 	ldw	r3,4(r17)
   11810:	2105883a 	add	r2,r4,r4
   11814:	1445883a 	add	r2,r2,r17
   11818:	18ffffc4 	addi	r3,r3,-1
   1181c:	11800217 	ldw	r6,8(r2)
   11820:	1c001826 	beq	r3,r16,11884 <__call_exitprocs+0x158>
   11824:	10000215 	stw	zero,8(r2)
   11828:	303fe626 	beq	r6,zero,117c4 <__call_exitprocs+0x98>
   1182c:	8d000117 	ldw	r20,4(r17)
   11830:	9800121e 	bne	r19,zero,1187c <__call_exitprocs+0x150>
   11834:	00c00044 	movi	r3,1
   11838:	1c06983a 	sll	r3,r3,r16
   1183c:	90804017 	ldw	r2,256(r18)
   11840:	1884703a 	and	r2,r3,r2
   11844:	10000d26 	beq	r2,zero,1187c <__call_exitprocs+0x150>
   11848:	90804117 	ldw	r2,260(r18)
   1184c:	1884703a 	and	r2,r3,r2
   11850:	10000e1e 	bne	r2,zero,1188c <__call_exitprocs+0x160>
   11854:	2105883a 	add	r2,r4,r4
   11858:	1485883a 	add	r2,r2,r18
   1185c:	11400017 	ldw	r5,0(r2)
   11860:	d9000117 	ldw	r4,4(sp)
   11864:	303ee83a 	callr	r6
   11868:	88800117 	ldw	r2,4(r17)
   1186c:	a0bfc61e 	bne	r20,r2,11788 <__call_exitprocs+0x5c>
   11870:	b8800017 	ldw	r2,0(r23)
   11874:	147fd326 	beq	r2,r17,117c4 <__call_exitprocs+0x98>
   11878:	003fc306 	br	11788 <__call_exitprocs+0x5c>
   1187c:	303ee83a 	callr	r6
   11880:	003ff906 	br	11868 <__call_exitprocs+0x13c>
   11884:	8c000115 	stw	r16,4(r17)
   11888:	003fe706 	br	11828 <__call_exitprocs+0xfc>
   1188c:	2105883a 	add	r2,r4,r4
   11890:	1485883a 	add	r2,r2,r18
   11894:	11000017 	ldw	r4,0(r2)
   11898:	303ee83a 	callr	r6
   1189c:	003ff206 	br	11868 <__call_exitprocs+0x13c>
   118a0:	88800117 	ldw	r2,4(r17)
   118a4:	10000b1e 	bne	r2,zero,118d4 <__call_exitprocs+0x1a8>
   118a8:	89000017 	ldw	r4,0(r17)
   118ac:	20000a26 	beq	r4,zero,118d8 <__call_exitprocs+0x1ac>
   118b0:	b9000015 	stw	r4,0(r23)
   118b4:	90000226 	beq	r18,zero,118c0 <__call_exitprocs+0x194>
   118b8:	9009883a 	mov	r4,r18
   118bc:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   118c0:	8809883a 	mov	r4,r17
   118c4:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   118c8:	bc400017 	ldw	r17,0(r23)
   118cc:	883fb11e 	bne	r17,zero,11794 <__call_exitprocs+0x68>
   118d0:	003fc106 	br	117d8 <__call_exitprocs+0xac>
   118d4:	89000017 	ldw	r4,0(r17)
   118d8:	882f883a 	mov	r23,r17
   118dc:	2023883a 	mov	r17,r4
   118e0:	883fac1e 	bne	r17,zero,11794 <__call_exitprocs+0x68>
   118e4:	003fbc06 	br	117d8 <__call_exitprocs+0xac>

000118e8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   118e8:	defffd04 	addi	sp,sp,-12
   118ec:	df000215 	stw	fp,8(sp)
   118f0:	df000204 	addi	fp,sp,8
   118f4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   118f8:	e0bfff17 	ldw	r2,-4(fp)
   118fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11900:	e0bffe17 	ldw	r2,-8(fp)
   11904:	1005003a 	cmpeq	r2,r2,zero
   11908:	1000021e 	bne	r2,zero,11914 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1190c:	002af070 	cmpltui	zero,zero,43969
   11910:	00000106 	br	11918 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   11914:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   11918:	e037883a 	mov	sp,fp
   1191c:	df000017 	ldw	fp,0(sp)
   11920:	dec00104 	addi	sp,sp,4
   11924:	f800283a 	ret

00011928 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11928:	defffd04 	addi	sp,sp,-12
   1192c:	dfc00215 	stw	ra,8(sp)
   11930:	df000115 	stw	fp,4(sp)
   11934:	df000104 	addi	fp,sp,4
   11938:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1193c:	e13fff17 	ldw	r4,-4(fp)
   11940:	00118e80 	call	118e8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11944:	003fff06 	br	11944 <_exit+0x1c>
   11948:	00011728 	cmpgeui	zero,zero,1116
