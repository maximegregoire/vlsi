
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00002bd0 memsz 0x00002bd0 flags r-x
    LOAD off    0x00003bf0 vaddr 0x00082bf0 paddr 0x00082ed0 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000041b0 vaddr 0x000831b0 paddr 0x000831b0 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000292c  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  00082ae0  00082ae0  00003ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00082bf0  00082ed0  00003bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  000831b0  000831b0  000041b0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  00003ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000832  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b4db  00000000  00000000  00004ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002936  00000000  00000000  000101bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006fdc  00000000  00000000  00012af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a5c  00000000  00000000  00019ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d9f  00000000  00000000  0001a52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000018cd  00000000  00000000  0001b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0001cb98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  0001cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001e977  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001e97a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001e97d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001e97e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001e97f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001e983  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001e987  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001e98b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001e994  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001e99d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001e9a6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  0001e9b8  2**0
                  CONTENTS, READONLY
 29 .jdi          00005608  00000000  00000000  0001e9d2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003be5e  00000000  00000000  00023fda  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00082ae0 l    d  .rodata	00000000 .rodata
00082bf0 l    d  .rwdata	00000000 .rwdata
000831b0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
000801f0 l     F .text	00000020 lcd_init
00080210 l     F .text	00000054 initial_message
00080264 l     F .text	0000002c count_led
000831b0 l     O .bss	00000001 count
00080290 l     F .text	0000001c count_sevenseg
000802ac l     F .text	00000028 count_lcd
000802d4 l     F .text	0000004c count_all
00080320 l     F .text	00000160 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00080588 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080854 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00082bf0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000811c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000813d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00082cd0 l     O .rwdata	0000002c jtag_uart
000814b0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00081740 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00081a88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081b04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00081be4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00081f40 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008207c l     F .text	000000dc alt_file_locked
000822e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000828bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00082a7c l     F .text	00000040 alt_sim_halt
0008076c g     F .text	0000001c putchar
0008122c g     F .text	0000005c alt_main
00080790 g     F .text	00000090 _puts_r
000831d4 g     O .bss	00000100 alt_irq
00082ed0 g       *ABS*	00000000 __flash_rwdata_start
000806d4 g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
000831b4 g     O .bss	00000004 edge_capture
00080020 g       *ABS*	00000000 __flash_exceptions_start
000831b8 g     O .bss	00000004 errno
000831c0 g     O .bss	00000004 alt_argv
0008aea4 g       *ABS*	00000000 _gp
00081288 g     F .text	00000030 usleep
00082d24 g     O .rwdata	00000180 alt_fd_list
00080788 g     F .text	00000008 _putchar_r
00082564 g     F .text	00000094 alt_find_dev
00082004 g     F .text	00000078 alt_io_redirect
00080820 g     F .text	00000014 puts
00081598 g     F .text	00000104 altera_avalon_jtag_uart_read
00080728 g     F .text	00000044 _printf_r
000806c4 g     F .text	00000008 __udivsi3
000827d0 g     F .text	00000090 alt_icache_flush
00082ebc g     O .rwdata	00000004 alt_max_fd
00082ea8 g     O .rwdata	00000004 _global_impure_ptr
000832d4 g       *ABS*	00000000 __bss_end
00081e48 g     F .text	000000f8 alt_iic_isr_register
00082438 g     F .text	0000010c alt_tick
00081e00 g     F .text	00000048 alt_ic_irq_enabled
000823a0 g     F .text	00000098 alt_alarm_stop
000831c8 g     O .bss	00000004 alt_irq_active
00080000 g       *ABS*	00000000 __alt_mem_onchip_mem
000800ec g     F .exceptions	000000c8 alt_irq_handler
00082cfc g     O .rwdata	00000028 alt_dev_null
00081ae8 g     F .text	0000001c alt_dcache_flush_all
00082ed0 g       *ABS*	00000000 __ram_rwdata_end
00082eb4 g     O .rwdata	00000008 alt_dev_list
000812b8 g     F .text	00000120 write
00081054 g     F .text	00000074 _putc_r
00082bf0 g       *ABS*	00000000 __ram_rodata_end
000806cc g     F .text	00000008 __umodsi3
000832d4 g       *ABS*	00000000 end
00085000 g       *ABS*	00000000 __alt_stack_pointer
000817b0 g     F .text	00000090 alt_avalon_timer_sc_init
0008169c g     F .text	000000a4 altera_avalon_jtag_uart_write
000808d4 g     F .text	00000630 ___vfprintf_internal_r
000828c0 g     F .text	000001bc __call_exitprocs
000801b4 g     F .text	0000003c _start
000831cc g     O .bss	00000004 _alt_tick_rate
000831d0 g     O .bss	00000004 _alt_nticks
0008146c g     F .text	00000044 alt_sys_init
00082bf0 g       *ABS*	00000000 __ram_rwdata_start
00082ae0 g       *ABS*	00000000 __ram_rodata_start
000814e8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00082718 g     F .text	000000b8 alt_get_fd
00081840 g     F .text	0000014c alt_busy_sleep
00082880 g     F .text	0000003c memcmp
000832d4 g       *ABS*	00000000 __alt_stack_base
000825f8 g     F .text	00000120 alt_find_file
00081b30 g     F .text	000000b4 alt_dev_llist_insert
00080f28 g     F .text	000000bc __sfvwrite_small_dev
000831b0 g       *ABS*	00000000 __bss_start
00080480 g     F .text	00000108 main
000831c4 g     O .bss	00000004 alt_envp
00081540 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00082ec0 g     O .rwdata	00000004 alt_errno
00080fe4 g     F .text	00000070 putc
00080604 g     F .text	00000060 __divsi3
00082ae0 g       *ABS*	00000000 __flash_rodata_start
00081438 g     F .text	00000034 alt_irq_init
00082340 g     F .text	00000060 alt_release_fd
000810c8 g     F .text	00000078 _write_r
00082ea4 g     O .rwdata	00000004 _impure_ptr
000831bc g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
00082eac g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00081c74 g     F .text	00000050 alt_ic_isr_register
00082ed0 g       *ABS*	00000000 _edata
000832d4 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00081d60 g     F .text	000000a0 alt_ic_irq_disable
00082544 g     F .text	00000020 altera_nios2_qsys_irq_init
00082860 g     F .text	00000020 exit
00080664 g     F .text	00000060 __modsi3
00085000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082abc g     F .text	00000020 _exit
00080834 g     F .text	00000020 strlen
00082158 g     F .text	00000188 open
00081c44 g     F .text	00000030 alt_icache_flush_all
00082ec4 g     O .rwdata	00000004 alt_priority_mask
00081cc4 g     F .text	0000009c alt_ic_irq_enable
00080f04 g     F .text	00000024 __vfprintf_internal
00082ec8 g     O .rwdata	00000008 alt_alarm_list
0008198c g     F .text	000000fc close
00081140 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406d14 	ori	at,at,436
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00234 	movhi	r3,8
   80134:	18cc7504 	addi	r3,r3,12756
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00234 	movhi	r3,8
   8014c:	18cc7504 	addi	r3,r3,12756
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	ded40014 	ori	sp,sp,20480

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c0:	d6aba914 	ori	gp,gp,44708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	108c6c14 	ori	r2,r2,12720

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18ccb514 	ori	r3,r3,13012

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	00811400 	call	81140 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008122c0 	call	8122c <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
   801f0:	defffe04 	addi	sp,sp,-8
   801f4:	df000115 	stw	fp,4(sp)
   801f8:	df000104 	addi	fp,sp,4
   801fc:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
   80200:	e037883a 	mov	sp,fp
   80204:	df000017 	ldw	fp,0(sp)
   80208:	dec00104 	addi	sp,sp,4
   8020c:	f800283a 	ret

00080210 <initial_message>:

static void initial_message()
{
   80210:	defffe04 	addi	sp,sp,-8
   80214:	dfc00115 	stw	ra,4(sp)
   80218:	df000015 	stw	fp,0(sp)
   8021c:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
   80220:	01000234 	movhi	r4,8
   80224:	210ab804 	addi	r4,r4,10976
   80228:	00808200 	call	80820 <puts>
    printf("* Hello from Nios II!    *\n");
   8022c:	01000234 	movhi	r4,8
   80230:	210ac004 	addi	r4,r4,11008
   80234:	00808200 	call	80820 <puts>
    printf("* Counting from 00 to ff *\n");
   80238:	01000234 	movhi	r4,8
   8023c:	210ac704 	addi	r4,r4,11036
   80240:	00808200 	call	80820 <puts>
    printf("**************************\n");
   80244:	01000234 	movhi	r4,8
   80248:	210ace04 	addi	r4,r4,11064
   8024c:	00808200 	call	80820 <puts>
}
   80250:	e037883a 	mov	sp,fp
   80254:	dfc00117 	ldw	ra,4(sp)
   80258:	df000017 	ldw	fp,0(sp)
   8025c:	dec00204 	addi	sp,sp,8
   80260:	f800283a 	ret

00080264 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
   80264:	deffff04 	addi	sp,sp,-4
   80268:	df000015 	stw	fp,0(sp)
   8026c:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
   80270:	d0a0c303 	ldbu	r2,-31988(gp)
   80274:	10c03fcc 	andi	r3,r2,255
   80278:	00801004 	movi	r2,64
   8027c:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
   80280:	e037883a 	mov	sp,fp
   80284:	df000017 	ldw	fp,0(sp)
   80288:	dec00104 	addi	sp,sp,4
   8028c:	f800283a 	ret

00080290 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
   80290:	deffff04 	addi	sp,sp,-4
   80294:	df000015 	stw	fp,0(sp)
   80298:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
   8029c:	e037883a 	mov	sp,fp
   802a0:	df000017 	ldw	fp,0(sp)
   802a4:	dec00104 	addi	sp,sp,4
   802a8:	f800283a 	ret

000802ac <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
   802ac:	defffd04 	addi	sp,sp,-12
   802b0:	df000215 	stw	fp,8(sp)
   802b4:	df000204 	addi	fp,sp,8
   802b8:	e13fff15 	stw	r4,-4(fp)
    FILE *lcd = (FILE*) arg;
   802bc:	e0bfff17 	ldw	r2,-4(fp)
   802c0:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
   802c4:	e037883a 	mov	sp,fp
   802c8:	df000017 	ldw	fp,0(sp)
   802cc:	dec00104 	addi	sp,sp,4
   802d0:	f800283a 	ret

000802d4 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
   802d4:	defffd04 	addi	sp,sp,-12
   802d8:	dfc00215 	stw	ra,8(sp)
   802dc:	df000115 	stw	fp,4(sp)
   802e0:	df000104 	addi	fp,sp,4
   802e4:	e13fff15 	stw	r4,-4(fp)
    count_led();
   802e8:	00802640 	call	80264 <count_led>
    count_sevenseg();
   802ec:	00802900 	call	80290 <count_sevenseg>
    count_lcd( arg );
   802f0:	e13fff17 	ldw	r4,-4(fp)
   802f4:	00802ac0 	call	802ac <count_lcd>
    printf("%02x,  ", count);
   802f8:	d0a0c303 	ldbu	r2,-31988(gp)
   802fc:	11403fcc 	andi	r5,r2,255
   80300:	01000234 	movhi	r4,8
   80304:	210ad504 	addi	r4,r4,11092
   80308:	00806d40 	call	806d4 <printf>
}
   8030c:	e037883a 	mov	sp,fp
   80310:	dfc00117 	ldw	ra,4(sp)
   80314:	df000017 	ldw	fp,0(sp)
   80318:	dec00204 	addi	sp,sp,8
   8031c:	f800283a 	ret

00080320 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
   80320:	defffa04 	addi	sp,sp,-24
   80324:	dfc00515 	stw	ra,20(sp)
   80328:	df000415 	stw	fp,16(sp)
   8032c:	df000404 	addi	fp,sp,16
   80330:	e17ffd15 	stw	r5,-12(fp)
   80334:	e13ffc05 	stb	r4,-16(fp)
    /* Button press actions while counting. */
    if (type == 'c')
   80338:	e0bffc03 	ldbu	r2,-16(fp)
   8033c:	108018d8 	cmpnei	r2,r2,99
   80340:	1000201e 	bne	r2,zero,803c4 <handle_button_press+0xa4>
    {
        switch (edge_capture) 
   80344:	d0a0c417 	ldw	r2,-31984(gp)
   80348:	e0bfff15 	stw	r2,-4(fp)
   8034c:	e0ffff17 	ldw	r3,-4(fp)
   80350:	188000a0 	cmpeqi	r2,r3,2
   80354:	1000101e 	bne	r2,zero,80398 <handle_button_press+0x78>
   80358:	e0ffff17 	ldw	r3,-4(fp)
   8035c:	188000c8 	cmpgei	r2,r3,3
   80360:	1000041e 	bne	r2,zero,80374 <handle_button_press+0x54>
   80364:	e0ffff17 	ldw	r3,-4(fp)
   80368:	18800060 	cmpeqi	r2,r3,1
   8036c:	1000081e 	bne	r2,zero,80390 <handle_button_press+0x70>
   80370:	00001106 	br	803b8 <handle_button_press+0x98>
   80374:	e0ffff17 	ldw	r3,-4(fp)
   80378:	18800120 	cmpeqi	r2,r3,4
   8037c:	1000081e 	bne	r2,zero,803a0 <handle_button_press+0x80>
   80380:	e0ffff17 	ldw	r3,-4(fp)
   80384:	18800220 	cmpeqi	r2,r3,8
   80388:	1000081e 	bne	r2,zero,803ac <handle_button_press+0x8c>
   8038c:	00000a06 	br	803b8 <handle_button_press+0x98>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
   80390:	00802640 	call	80264 <count_led>
            break;
   80394:	00003506 	br	8046c <handle_button_press+0x14c>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
   80398:	00802900 	call	80290 <count_sevenseg>
            break;
   8039c:	00003306 	br	8046c <handle_button_press+0x14c>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
   803a0:	e13ffd17 	ldw	r4,-12(fp)
   803a4:	00802ac0 	call	802ac <count_lcd>
            break;
   803a8:	00003006 	br	8046c <handle_button_press+0x14c>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
   803ac:	e13ffd17 	ldw	r4,-12(fp)
   803b0:	00802d40 	call	802d4 <count_all>
            break;
   803b4:	00002d06 	br	8046c <handle_button_press+0x14c>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
   803b8:	e13ffd17 	ldw	r4,-12(fp)
   803bc:	00802d40 	call	802d4 <count_all>
   803c0:	00002a06 	br	8046c <handle_button_press+0x14c>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
   803c4:	d0a0c417 	ldw	r2,-31984(gp)
   803c8:	e0bffe15 	stw	r2,-8(fp)
   803cc:	e0fffe17 	ldw	r3,-8(fp)
   803d0:	188000a0 	cmpeqi	r2,r3,2
   803d4:	1000131e 	bne	r2,zero,80424 <handle_button_press+0x104>
   803d8:	e0fffe17 	ldw	r3,-8(fp)
   803dc:	188000c8 	cmpgei	r2,r3,3
   803e0:	1000041e 	bne	r2,zero,803f4 <handle_button_press+0xd4>
   803e4:	e0fffe17 	ldw	r3,-8(fp)
   803e8:	18800060 	cmpeqi	r2,r3,1
   803ec:	1000081e 	bne	r2,zero,80410 <handle_button_press+0xf0>
   803f0:	00001b06 	br	80460 <handle_button_press+0x140>
   803f4:	e0fffe17 	ldw	r3,-8(fp)
   803f8:	18800120 	cmpeqi	r2,r3,4
   803fc:	10000e1e 	bne	r2,zero,80438 <handle_button_press+0x118>
   80400:	e0fffe17 	ldw	r3,-8(fp)
   80404:	18800220 	cmpeqi	r2,r3,8
   80408:	1000101e 	bne	r2,zero,8044c <handle_button_press+0x12c>
   8040c:	00001406 	br	80460 <handle_button_press+0x140>
        {
        case 0x1:
            printf( "Button 1\n");
   80410:	01000234 	movhi	r4,8
   80414:	210ad704 	addi	r4,r4,11100
   80418:	00808200 	call	80820 <puts>
            edge_capture = 0;
   8041c:	d020c415 	stw	zero,-31984(gp)
            break;
   80420:	00001206 	br	8046c <handle_button_press+0x14c>
        case 0x2:
            printf( "Button 2\n");
   80424:	01000234 	movhi	r4,8
   80428:	210ada04 	addi	r4,r4,11112
   8042c:	00808200 	call	80820 <puts>
            edge_capture = 0;
   80430:	d020c415 	stw	zero,-31984(gp)
            break;
   80434:	00000d06 	br	8046c <handle_button_press+0x14c>
        case 0x4:
            printf( "Button 3\n");
   80438:	01000234 	movhi	r4,8
   8043c:	210add04 	addi	r4,r4,11124
   80440:	00808200 	call	80820 <puts>
            edge_capture = 0;
   80444:	d020c415 	stw	zero,-31984(gp)
            break;
   80448:	00000806 	br	8046c <handle_button_press+0x14c>
        case 0x8:
            printf( "Button 4\n");
   8044c:	01000234 	movhi	r4,8
   80450:	210ae004 	addi	r4,r4,11136
   80454:	00808200 	call	80820 <puts>
            edge_capture = 0;
   80458:	d020c415 	stw	zero,-31984(gp)
            break;
   8045c:	00000306 	br	8046c <handle_button_press+0x14c>
        default:
            printf( "Button press UNKNOWN!!\n");
   80460:	01000234 	movhi	r4,8
   80464:	210ae304 	addi	r4,r4,11148
   80468:	00808200 	call	80820 <puts>
        }
    }
}
   8046c:	e037883a 	mov	sp,fp
   80470:	dfc00117 	ldw	ra,4(sp)
   80474:	df000017 	ldw	fp,0(sp)
   80478:	dec00204 	addi	sp,sp,8
   8047c:	f800283a 	ret

00080480 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
   80480:	defffb04 	addi	sp,sp,-20
   80484:	dfc00415 	stw	ra,16(sp)
   80488:	df000315 	stw	fp,12(sp)
   8048c:	df000304 	addi	fp,sp,12
    int i;
    int wait_time;
    FILE * lcd;

    count = 0;
   80490:	d020c305 	stb	zero,-31988(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
   80494:	e03ffd15 	stw	zero,-12(fp)
    if(lcd != NULL) {lcd_init( lcd );}
   80498:	e0bffd17 	ldw	r2,-12(fp)
   8049c:	1005003a 	cmpeq	r2,r2,zero
   804a0:	1000021e 	bne	r2,zero,804ac <main+0x2c>
   804a4:	e13ffd17 	ldw	r4,-12(fp)
   804a8:	00801f00 	call	801f0 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
   804ac:	00802100 	call	80210 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
   804b0:	010000b4 	movhi	r4,2
   804b4:	2121a804 	addi	r4,r4,-31072
   804b8:	00812880 	call	81288 <usleep>
        if (edge_capture != 0)
   804bc:	d0a0c417 	ldw	r2,-31984(gp)
   804c0:	1005003a 	cmpeq	r2,r2,zero
   804c4:	1000041e 	bne	r2,zero,804d8 <main+0x58>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
   804c8:	010018c4 	movi	r4,99
   804cc:	e17ffd17 	ldw	r5,-12(fp)
   804d0:	00803200 	call	80320 <handle_button_press>
   804d4:	00000206 	br	804e0 <main+0x60>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
   804d8:	e13ffd17 	ldw	r4,-12(fp)
   804dc:	00802d40 	call	802d4 <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
   804e0:	d0a0c303 	ldbu	r2,-31988(gp)
   804e4:	10803fcc 	andi	r2,r2,255
   804e8:	10803fd8 	cmpnei	r2,r2,255
   804ec:	1000221e 	bne	r2,zero,80578 <main+0xf8>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
   804f0:	01000234 	movhi	r4,8
   804f4:	210ae904 	addi	r4,r4,11172
   804f8:	00806d40 	call	806d4 <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
   804fc:	d020c415 	stw	zero,-31984(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
   80500:	e03ffe15 	stw	zero,-8(fp)
            for (i = 0; i<70; ++i)
   80504:	e03fff15 	stw	zero,-4(fp)
   80508:	00001506 	br	80560 <main+0xe0>
            {
                printf(".");
   8050c:	01000b84 	movi	r4,46
   80510:	008076c0 	call	8076c <putchar>
                wait_time = i/10;
   80514:	e13fff17 	ldw	r4,-4(fp)
   80518:	01400284 	movi	r5,10
   8051c:	00806040 	call	80604 <__divsi3>
   80520:	e0bffe15 	stw	r2,-8(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
   80524:	d0a0c417 	ldw	r2,-31984(gp)
   80528:	1005003a 	cmpeq	r2,r2,zero
   8052c:	1000061e 	bne	r2,zero,80548 <main+0xc8>
                {
                    printf( "\nYou pushed:  " );
   80530:	01000234 	movhi	r4,8
   80534:	210aec04 	addi	r4,r4,11184
   80538:	00806d40 	call	806d4 <printf>
                    handle_button_press('w', lcd);
   8053c:	01001dc4 	movi	r4,119
   80540:	e17ffd17 	ldw	r5,-12(fp)
   80544:	00803200 	call	80320 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
   80548:	010000b4 	movhi	r4,2
   8054c:	2121a804 	addi	r4,r4,-31072
   80550:	00812880 	call	81288 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
   80554:	e0bfff17 	ldw	r2,-4(fp)
   80558:	10800044 	addi	r2,r2,1
   8055c:	e0bfff15 	stw	r2,-4(fp)
   80560:	e0bfff17 	ldw	r2,-4(fp)
   80564:	10801190 	cmplti	r2,r2,70
   80568:	103fe81e 	bne	r2,zero,8050c <main+0x8c>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
   8056c:	00802100 	call	80210 <initial_message>
            lcd_init( lcd );
   80570:	e13ffd17 	ldw	r4,-12(fp)
   80574:	00801f00 	call	801f0 <lcd_init>
        }
        count++;
   80578:	d0a0c303 	ldbu	r2,-31988(gp)
   8057c:	10800044 	addi	r2,r2,1
   80580:	d0a0c305 	stb	r2,-31988(gp)
    }
   80584:	003fca06 	br	804b0 <main+0x30>

00080588 <udivmodsi4>:
   80588:	29001b2e 	bgeu	r5,r4,805f8 <udivmodsi4+0x70>
   8058c:	28001a16 	blt	r5,zero,805f8 <udivmodsi4+0x70>
   80590:	00800044 	movi	r2,1
   80594:	0007883a 	mov	r3,zero
   80598:	01c007c4 	movi	r7,31
   8059c:	00000306 	br	805ac <udivmodsi4+0x24>
   805a0:	19c01326 	beq	r3,r7,805f0 <udivmodsi4+0x68>
   805a4:	18c00044 	addi	r3,r3,1
   805a8:	28000416 	blt	r5,zero,805bc <udivmodsi4+0x34>
   805ac:	294b883a 	add	r5,r5,r5
   805b0:	1085883a 	add	r2,r2,r2
   805b4:	293ffa36 	bltu	r5,r4,805a0 <udivmodsi4+0x18>
   805b8:	10000d26 	beq	r2,zero,805f0 <udivmodsi4+0x68>
   805bc:	0007883a 	mov	r3,zero
   805c0:	21400236 	bltu	r4,r5,805cc <udivmodsi4+0x44>
   805c4:	2149c83a 	sub	r4,r4,r5
   805c8:	1886b03a 	or	r3,r3,r2
   805cc:	1004d07a 	srli	r2,r2,1
   805d0:	280ad07a 	srli	r5,r5,1
   805d4:	103ffa1e 	bne	r2,zero,805c0 <udivmodsi4+0x38>
   805d8:	30000226 	beq	r6,zero,805e4 <udivmodsi4+0x5c>
   805dc:	2005883a 	mov	r2,r4
   805e0:	f800283a 	ret
   805e4:	1809883a 	mov	r4,r3
   805e8:	2005883a 	mov	r2,r4
   805ec:	f800283a 	ret
   805f0:	0007883a 	mov	r3,zero
   805f4:	003ff806 	br	805d8 <udivmodsi4+0x50>
   805f8:	00800044 	movi	r2,1
   805fc:	0007883a 	mov	r3,zero
   80600:	003fef06 	br	805c0 <udivmodsi4+0x38>

00080604 <__divsi3>:
   80604:	defffe04 	addi	sp,sp,-8
   80608:	dc000015 	stw	r16,0(sp)
   8060c:	dfc00115 	stw	ra,4(sp)
   80610:	0021883a 	mov	r16,zero
   80614:	20000c16 	blt	r4,zero,80648 <__divsi3+0x44>
   80618:	000d883a 	mov	r6,zero
   8061c:	28000e16 	blt	r5,zero,80658 <__divsi3+0x54>
   80620:	00805880 	call	80588 <udivmodsi4>
   80624:	1007883a 	mov	r3,r2
   80628:	8005003a 	cmpeq	r2,r16,zero
   8062c:	1000011e 	bne	r2,zero,80634 <__divsi3+0x30>
   80630:	00c7c83a 	sub	r3,zero,r3
   80634:	1805883a 	mov	r2,r3
   80638:	dfc00117 	ldw	ra,4(sp)
   8063c:	dc000017 	ldw	r16,0(sp)
   80640:	dec00204 	addi	sp,sp,8
   80644:	f800283a 	ret
   80648:	0109c83a 	sub	r4,zero,r4
   8064c:	04000044 	movi	r16,1
   80650:	000d883a 	mov	r6,zero
   80654:	283ff20e 	bge	r5,zero,80620 <__divsi3+0x1c>
   80658:	014bc83a 	sub	r5,zero,r5
   8065c:	8021003a 	cmpeq	r16,r16,zero
   80660:	003fef06 	br	80620 <__divsi3+0x1c>

00080664 <__modsi3>:
   80664:	deffff04 	addi	sp,sp,-4
   80668:	dfc00015 	stw	ra,0(sp)
   8066c:	01800044 	movi	r6,1
   80670:	2807883a 	mov	r3,r5
   80674:	20000416 	blt	r4,zero,80688 <__modsi3+0x24>
   80678:	28000c16 	blt	r5,zero,806ac <__modsi3+0x48>
   8067c:	dfc00017 	ldw	ra,0(sp)
   80680:	dec00104 	addi	sp,sp,4
   80684:	00805881 	jmpi	80588 <udivmodsi4>
   80688:	0109c83a 	sub	r4,zero,r4
   8068c:	28000b16 	blt	r5,zero,806bc <__modsi3+0x58>
   80690:	180b883a 	mov	r5,r3
   80694:	01800044 	movi	r6,1
   80698:	00805880 	call	80588 <udivmodsi4>
   8069c:	0085c83a 	sub	r2,zero,r2
   806a0:	dfc00017 	ldw	ra,0(sp)
   806a4:	dec00104 	addi	sp,sp,4
   806a8:	f800283a 	ret
   806ac:	014bc83a 	sub	r5,zero,r5
   806b0:	dfc00017 	ldw	ra,0(sp)
   806b4:	dec00104 	addi	sp,sp,4
   806b8:	00805881 	jmpi	80588 <udivmodsi4>
   806bc:	0147c83a 	sub	r3,zero,r5
   806c0:	003ff306 	br	80690 <__modsi3+0x2c>

000806c4 <__udivsi3>:
   806c4:	000d883a 	mov	r6,zero
   806c8:	00805881 	jmpi	80588 <udivmodsi4>

000806cc <__umodsi3>:
   806cc:	01800044 	movi	r6,1
   806d0:	00805881 	jmpi	80588 <udivmodsi4>

000806d4 <printf>:
   806d4:	defffb04 	addi	sp,sp,-20
   806d8:	dfc00115 	stw	ra,4(sp)
   806dc:	d9400215 	stw	r5,8(sp)
   806e0:	d9800315 	stw	r6,12(sp)
   806e4:	d9c00415 	stw	r7,16(sp)
   806e8:	00800234 	movhi	r2,8
   806ec:	108ba904 	addi	r2,r2,11940
   806f0:	11400017 	ldw	r5,0(r2)
   806f4:	d8800204 	addi	r2,sp,8
   806f8:	d8800015 	stw	r2,0(sp)
   806fc:	29c00217 	ldw	r7,8(r5)
   80700:	100d883a 	mov	r6,r2
   80704:	00800234 	movhi	r2,8
   80708:	1083ca04 	addi	r2,r2,3880
   8070c:	200b883a 	mov	r5,r4
   80710:	38800115 	stw	r2,4(r7)
   80714:	3809883a 	mov	r4,r7
   80718:	0080f040 	call	80f04 <__vfprintf_internal>
   8071c:	dfc00117 	ldw	ra,4(sp)
   80720:	dec00504 	addi	sp,sp,20
   80724:	f800283a 	ret

00080728 <_printf_r>:
   80728:	defffc04 	addi	sp,sp,-16
   8072c:	dfc00115 	stw	ra,4(sp)
   80730:	d9800215 	stw	r6,8(sp)
   80734:	d9c00315 	stw	r7,12(sp)
   80738:	22000217 	ldw	r8,8(r4)
   8073c:	d8800204 	addi	r2,sp,8
   80740:	d8800015 	stw	r2,0(sp)
   80744:	100f883a 	mov	r7,r2
   80748:	00800234 	movhi	r2,8
   8074c:	1083ca04 	addi	r2,r2,3880
   80750:	280d883a 	mov	r6,r5
   80754:	40800115 	stw	r2,4(r8)
   80758:	400b883a 	mov	r5,r8
   8075c:	00808d40 	call	808d4 <___vfprintf_internal_r>
   80760:	dfc00117 	ldw	ra,4(sp)
   80764:	dec00404 	addi	sp,sp,16
   80768:	f800283a 	ret

0008076c <putchar>:
   8076c:	00800234 	movhi	r2,8
   80770:	108ba904 	addi	r2,r2,11940
   80774:	11800017 	ldw	r6,0(r2)
   80778:	200b883a 	mov	r5,r4
   8077c:	3009883a 	mov	r4,r6
   80780:	31800217 	ldw	r6,8(r6)
   80784:	00810541 	jmpi	81054 <_putc_r>

00080788 <_putchar_r>:
   80788:	21800217 	ldw	r6,8(r4)
   8078c:	00810541 	jmpi	81054 <_putc_r>

00080790 <_puts_r>:
   80790:	defffd04 	addi	sp,sp,-12
   80794:	dc000015 	stw	r16,0(sp)
   80798:	2021883a 	mov	r16,r4
   8079c:	2809883a 	mov	r4,r5
   807a0:	dfc00215 	stw	ra,8(sp)
   807a4:	dc400115 	stw	r17,4(sp)
   807a8:	2823883a 	mov	r17,r5
   807ac:	00808340 	call	80834 <strlen>
   807b0:	80c00217 	ldw	r3,8(r16)
   807b4:	02000234 	movhi	r8,8
   807b8:	4203ca04 	addi	r8,r8,3880
   807bc:	880d883a 	mov	r6,r17
   807c0:	100f883a 	mov	r7,r2
   807c4:	8009883a 	mov	r4,r16
   807c8:	180b883a 	mov	r5,r3
   807cc:	1a000115 	stw	r8,4(r3)
   807d0:	403ee83a 	callr	r8
   807d4:	047fffc4 	movi	r17,-1
   807d8:	8009883a 	mov	r4,r16
   807dc:	01800234 	movhi	r6,8
   807e0:	318af004 	addi	r6,r6,11200
   807e4:	01c00044 	movi	r7,1
   807e8:	1440071e 	bne	r2,r17,80808 <_puts_r+0x78>
   807ec:	00ffffc4 	movi	r3,-1
   807f0:	1805883a 	mov	r2,r3
   807f4:	dfc00217 	ldw	ra,8(sp)
   807f8:	dc400117 	ldw	r17,4(sp)
   807fc:	dc000017 	ldw	r16,0(sp)
   80800:	dec00304 	addi	sp,sp,12
   80804:	f800283a 	ret
   80808:	81400217 	ldw	r5,8(r16)
   8080c:	28c00117 	ldw	r3,4(r5)
   80810:	183ee83a 	callr	r3
   80814:	0007883a 	mov	r3,zero
   80818:	147ff51e 	bne	r2,r17,807f0 <_puts_r+0x60>
   8081c:	003ff306 	br	807ec <_puts_r+0x5c>

00080820 <puts>:
   80820:	00800234 	movhi	r2,8
   80824:	108ba904 	addi	r2,r2,11940
   80828:	200b883a 	mov	r5,r4
   8082c:	11000017 	ldw	r4,0(r2)
   80830:	00807901 	jmpi	80790 <_puts_r>

00080834 <strlen>:
   80834:	20800007 	ldb	r2,0(r4)
   80838:	10000526 	beq	r2,zero,80850 <strlen+0x1c>
   8083c:	2007883a 	mov	r3,r4
   80840:	18c00044 	addi	r3,r3,1
   80844:	18800007 	ldb	r2,0(r3)
   80848:	103ffd1e 	bne	r2,zero,80840 <strlen+0xc>
   8084c:	1905c83a 	sub	r2,r3,r4
   80850:	f800283a 	ret

00080854 <print_repeat>:
   80854:	defffb04 	addi	sp,sp,-20
   80858:	dc800315 	stw	r18,12(sp)
   8085c:	dc400215 	stw	r17,8(sp)
   80860:	dc000115 	stw	r16,4(sp)
   80864:	dfc00415 	stw	ra,16(sp)
   80868:	2025883a 	mov	r18,r4
   8086c:	2823883a 	mov	r17,r5
   80870:	3821883a 	mov	r16,r7
   80874:	d9800005 	stb	r6,0(sp)
   80878:	9009883a 	mov	r4,r18
   8087c:	880b883a 	mov	r5,r17
   80880:	d80d883a 	mov	r6,sp
   80884:	01c00044 	movi	r7,1
   80888:	04000b0e 	bge	zero,r16,808b8 <print_repeat+0x64>
   8088c:	88c00117 	ldw	r3,4(r17)
   80890:	843fffc4 	addi	r16,r16,-1
   80894:	183ee83a 	callr	r3
   80898:	103ff726 	beq	r2,zero,80878 <print_repeat+0x24>
   8089c:	00bfffc4 	movi	r2,-1
   808a0:	dfc00417 	ldw	ra,16(sp)
   808a4:	dc800317 	ldw	r18,12(sp)
   808a8:	dc400217 	ldw	r17,8(sp)
   808ac:	dc000117 	ldw	r16,4(sp)
   808b0:	dec00504 	addi	sp,sp,20
   808b4:	f800283a 	ret
   808b8:	0005883a 	mov	r2,zero
   808bc:	dfc00417 	ldw	ra,16(sp)
   808c0:	dc800317 	ldw	r18,12(sp)
   808c4:	dc400217 	ldw	r17,8(sp)
   808c8:	dc000117 	ldw	r16,4(sp)
   808cc:	dec00504 	addi	sp,sp,20
   808d0:	f800283a 	ret

000808d4 <___vfprintf_internal_r>:
   808d4:	deffe404 	addi	sp,sp,-112
   808d8:	ddc01915 	stw	r23,100(sp)
   808dc:	dd801815 	stw	r22,96(sp)
   808e0:	dcc01515 	stw	r19,84(sp)
   808e4:	dc401315 	stw	r17,76(sp)
   808e8:	dc001215 	stw	r16,72(sp)
   808ec:	dfc01b15 	stw	ra,108(sp)
   808f0:	df001a15 	stw	fp,104(sp)
   808f4:	dd401715 	stw	r21,92(sp)
   808f8:	dd001615 	stw	r20,88(sp)
   808fc:	dc801415 	stw	r18,80(sp)
   80900:	d9001015 	stw	r4,64(sp)
   80904:	2827883a 	mov	r19,r5
   80908:	d9c01115 	stw	r7,68(sp)
   8090c:	3023883a 	mov	r17,r6
   80910:	0021883a 	mov	r16,zero
   80914:	d8000f15 	stw	zero,60(sp)
   80918:	d8000e15 	stw	zero,56(sp)
   8091c:	002f883a 	mov	r23,zero
   80920:	d8000915 	stw	zero,36(sp)
   80924:	d8000d15 	stw	zero,52(sp)
   80928:	d8000c15 	stw	zero,48(sp)
   8092c:	d8000b15 	stw	zero,44(sp)
   80930:	002d883a 	mov	r22,zero
   80934:	89400003 	ldbu	r5,0(r17)
   80938:	01c00044 	movi	r7,1
   8093c:	8c400044 	addi	r17,r17,1
   80940:	29003fcc 	andi	r4,r5,255
   80944:	2100201c 	xori	r4,r4,128
   80948:	213fe004 	addi	r4,r4,-128
   8094c:	20001526 	beq	r4,zero,809a4 <___vfprintf_internal_r+0xd0>
   80950:	81c03326 	beq	r16,r7,80a20 <___vfprintf_internal_r+0x14c>
   80954:	3c002016 	blt	r7,r16,809d8 <___vfprintf_internal_r+0x104>
   80958:	803ff61e 	bne	r16,zero,80934 <___vfprintf_internal_r+0x60>
   8095c:	00800944 	movi	r2,37
   80960:	2081311e 	bne	r4,r2,80e28 <___vfprintf_internal_r+0x554>
   80964:	05ffffc4 	movi	r23,-1
   80968:	00800284 	movi	r2,10
   8096c:	d9c00c15 	stw	r7,48(sp)
   80970:	d8000f15 	stw	zero,60(sp)
   80974:	d8000e15 	stw	zero,56(sp)
   80978:	ddc00915 	stw	r23,36(sp)
   8097c:	d8800d15 	stw	r2,52(sp)
   80980:	d8000b15 	stw	zero,44(sp)
   80984:	89400003 	ldbu	r5,0(r17)
   80988:	3821883a 	mov	r16,r7
   8098c:	8c400044 	addi	r17,r17,1
   80990:	29003fcc 	andi	r4,r5,255
   80994:	2100201c 	xori	r4,r4,128
   80998:	213fe004 	addi	r4,r4,-128
   8099c:	01c00044 	movi	r7,1
   809a0:	203feb1e 	bne	r4,zero,80950 <___vfprintf_internal_r+0x7c>
   809a4:	b005883a 	mov	r2,r22
   809a8:	dfc01b17 	ldw	ra,108(sp)
   809ac:	df001a17 	ldw	fp,104(sp)
   809b0:	ddc01917 	ldw	r23,100(sp)
   809b4:	dd801817 	ldw	r22,96(sp)
   809b8:	dd401717 	ldw	r21,92(sp)
   809bc:	dd001617 	ldw	r20,88(sp)
   809c0:	dcc01517 	ldw	r19,84(sp)
   809c4:	dc801417 	ldw	r18,80(sp)
   809c8:	dc401317 	ldw	r17,76(sp)
   809cc:	dc001217 	ldw	r16,72(sp)
   809d0:	dec01c04 	addi	sp,sp,112
   809d4:	f800283a 	ret
   809d8:	00800084 	movi	r2,2
   809dc:	80801526 	beq	r16,r2,80a34 <___vfprintf_internal_r+0x160>
   809e0:	008000c4 	movi	r2,3
   809e4:	80bfd31e 	bne	r16,r2,80934 <___vfprintf_internal_r+0x60>
   809e8:	29bff404 	addi	r6,r5,-48
   809ec:	30c03fcc 	andi	r3,r6,255
   809f0:	00800244 	movi	r2,9
   809f4:	10c01c36 	bltu	r2,r3,80a68 <___vfprintf_internal_r+0x194>
   809f8:	d8c00917 	ldw	r3,36(sp)
   809fc:	18010816 	blt	r3,zero,80e20 <___vfprintf_internal_r+0x54c>
   80a00:	d9000917 	ldw	r4,36(sp)
   80a04:	20c002a4 	muli	r3,r4,10
   80a08:	30803fcc 	andi	r2,r6,255
   80a0c:	1080201c 	xori	r2,r2,128
   80a10:	10bfe004 	addi	r2,r2,-128
   80a14:	1887883a 	add	r3,r3,r2
   80a18:	d8c00915 	stw	r3,36(sp)
   80a1c:	003fc506 	br	80934 <___vfprintf_internal_r+0x60>
   80a20:	00800c04 	movi	r2,48
   80a24:	20809526 	beq	r4,r2,80c7c <___vfprintf_internal_r+0x3a8>
   80a28:	00800944 	movi	r2,37
   80a2c:	20810e26 	beq	r4,r2,80e68 <___vfprintf_internal_r+0x594>
   80a30:	04000084 	movi	r16,2
   80a34:	29bff404 	addi	r6,r5,-48
   80a38:	30c03fcc 	andi	r3,r6,255
   80a3c:	00800244 	movi	r2,9
   80a40:	10c00736 	bltu	r2,r3,80a60 <___vfprintf_internal_r+0x18c>
   80a44:	b8009816 	blt	r23,zero,80ca8 <___vfprintf_internal_r+0x3d4>
   80a48:	b9c002a4 	muli	r7,r23,10
   80a4c:	30803fcc 	andi	r2,r6,255
   80a50:	1080201c 	xori	r2,r2,128
   80a54:	10bfe004 	addi	r2,r2,-128
   80a58:	38af883a 	add	r23,r7,r2
   80a5c:	003fb506 	br	80934 <___vfprintf_internal_r+0x60>
   80a60:	00800b84 	movi	r2,46
   80a64:	20808a26 	beq	r4,r2,80c90 <___vfprintf_internal_r+0x3bc>
   80a68:	00801b04 	movi	r2,108
   80a6c:	20808a26 	beq	r4,r2,80c98 <___vfprintf_internal_r+0x3c4>
   80a70:	d8c00917 	ldw	r3,36(sp)
   80a74:	18008e16 	blt	r3,zero,80cb0 <___vfprintf_internal_r+0x3dc>
   80a78:	d8000f15 	stw	zero,60(sp)
   80a7c:	28bfea04 	addi	r2,r5,-88
   80a80:	10803fcc 	andi	r2,r2,255
   80a84:	00c00804 	movi	r3,32
   80a88:	18802836 	bltu	r3,r2,80b2c <___vfprintf_internal_r+0x258>
   80a8c:	1085883a 	add	r2,r2,r2
   80a90:	1085883a 	add	r2,r2,r2
   80a94:	00c00234 	movhi	r3,8
   80a98:	18c2aa04 	addi	r3,r3,2728
   80a9c:	10c5883a 	add	r2,r2,r3
   80aa0:	11000017 	ldw	r4,0(r2)
   80aa4:	2000683a 	jmp	r4
   80aa8:	00080d24 	muli	zero,zero,8244
   80aac:	00080b2c 	andhi	zero,zero,8236
   80ab0:	00080b2c 	andhi	zero,zero,8236
   80ab4:	00080b2c 	andhi	zero,zero,8236
   80ab8:	00080b2c 	andhi	zero,zero,8236
   80abc:	00080b2c 	andhi	zero,zero,8236
   80ac0:	00080b2c 	andhi	zero,zero,8236
   80ac4:	00080b2c 	andhi	zero,zero,8236
   80ac8:	00080b2c 	andhi	zero,zero,8236
   80acc:	00080b2c 	andhi	zero,zero,8236
   80ad0:	00080b2c 	andhi	zero,zero,8236
   80ad4:	00080d3c 	xorhi	zero,zero,8244
   80ad8:	00080b40 	call	80b4 <__reset-0x77f4c>
   80adc:	00080b2c 	andhi	zero,zero,8236
   80ae0:	00080b2c 	andhi	zero,zero,8236
   80ae4:	00080b2c 	andhi	zero,zero,8236
   80ae8:	00080b2c 	andhi	zero,zero,8236
   80aec:	00080b40 	call	80b4 <__reset-0x77f4c>
   80af0:	00080b2c 	andhi	zero,zero,8236
   80af4:	00080b2c 	andhi	zero,zero,8236
   80af8:	00080b2c 	andhi	zero,zero,8236
   80afc:	00080b2c 	andhi	zero,zero,8236
   80b00:	00080b2c 	andhi	zero,zero,8236
   80b04:	00080da4 	muli	zero,zero,8246
   80b08:	00080b2c 	andhi	zero,zero,8236
   80b0c:	00080b2c 	andhi	zero,zero,8236
   80b10:	00080b2c 	andhi	zero,zero,8236
   80b14:	00080db4 	movhi	zero,8246
   80b18:	00080b2c 	andhi	zero,zero,8236
   80b1c:	00080b3c 	xorhi	zero,zero,8236
   80b20:	00080b2c 	andhi	zero,zero,8236
   80b24:	00080b2c 	andhi	zero,zero,8236
   80b28:	00080b34 	movhi	zero,8236
   80b2c:	0021883a 	mov	r16,zero
   80b30:	003f8006 	br	80934 <___vfprintf_internal_r+0x60>
   80b34:	00800404 	movi	r2,16
   80b38:	d8800d15 	stw	r2,52(sp)
   80b3c:	d8000c15 	stw	zero,48(sp)
   80b40:	d8800c17 	ldw	r2,48(sp)
   80b44:	10006c1e 	bne	r2,zero,80cf8 <___vfprintf_internal_r+0x424>
   80b48:	d9001117 	ldw	r4,68(sp)
   80b4c:	21c00104 	addi	r7,r4,4
   80b50:	24000017 	ldw	r16,0(r4)
   80b54:	d9c01115 	stw	r7,68(sp)
   80b58:	d8000a15 	stw	zero,40(sp)
   80b5c:	80006d26 	beq	r16,zero,80d14 <___vfprintf_internal_r+0x440>
   80b60:	d8c00b17 	ldw	r3,44(sp)
   80b64:	dc800104 	addi	r18,sp,4
   80b68:	9039883a 	mov	fp,r18
   80b6c:	05400244 	movi	r21,9
   80b70:	1829003a 	cmpeq	r20,r3,zero
   80b74:	00000506 	br	80b8c <___vfprintf_internal_r+0x2b8>
   80b78:	21000c04 	addi	r4,r4,48
   80b7c:	91000005 	stb	r4,0(r18)
   80b80:	94800044 	addi	r18,r18,1
   80b84:	18000e26 	beq	r3,zero,80bc0 <___vfprintf_internal_r+0x2ec>
   80b88:	1821883a 	mov	r16,r3
   80b8c:	d9400d17 	ldw	r5,52(sp)
   80b90:	8009883a 	mov	r4,r16
   80b94:	00806c40 	call	806c4 <__udivsi3>
   80b98:	d9000d17 	ldw	r4,52(sp)
   80b9c:	1007883a 	mov	r3,r2
   80ba0:	2085383a 	mul	r2,r4,r2
   80ba4:	8089c83a 	sub	r4,r16,r2
   80ba8:	a93ff30e 	bge	r21,r4,80b78 <___vfprintf_internal_r+0x2a4>
   80bac:	a000361e 	bne	r20,zero,80c88 <___vfprintf_internal_r+0x3b4>
   80bb0:	21000dc4 	addi	r4,r4,55
   80bb4:	91000005 	stb	r4,0(r18)
   80bb8:	94800044 	addi	r18,r18,1
   80bbc:	183ff21e 	bne	r3,zero,80b88 <___vfprintf_internal_r+0x2b4>
   80bc0:	9729c83a 	sub	r20,r18,fp
   80bc4:	d8800917 	ldw	r2,36(sp)
   80bc8:	150bc83a 	sub	r5,r2,r20
   80bcc:	0140100e 	bge	zero,r5,80c10 <___vfprintf_internal_r+0x33c>
   80bd0:	e0800804 	addi	r2,fp,32
   80bd4:	90800e2e 	bgeu	r18,r2,80c10 <___vfprintf_internal_r+0x33c>
   80bd8:	00800c04 	movi	r2,48
   80bdc:	28ffffc4 	addi	r3,r5,-1
   80be0:	90800005 	stb	r2,0(r18)
   80be4:	91000044 	addi	r4,r18,1
   80be8:	00c0070e 	bge	zero,r3,80c08 <___vfprintf_internal_r+0x334>
   80bec:	e0800804 	addi	r2,fp,32
   80bf0:	2080052e 	bgeu	r4,r2,80c08 <___vfprintf_internal_r+0x334>
   80bf4:	00800c04 	movi	r2,48
   80bf8:	20800005 	stb	r2,0(r4)
   80bfc:	21000044 	addi	r4,r4,1
   80c00:	9145883a 	add	r2,r18,r5
   80c04:	20bff91e 	bne	r4,r2,80bec <___vfprintf_internal_r+0x318>
   80c08:	2729c83a 	sub	r20,r4,fp
   80c0c:	2025883a 	mov	r18,r4
   80c10:	d8c00a17 	ldw	r3,40(sp)
   80c14:	d9000f17 	ldw	r4,60(sp)
   80c18:	1d05883a 	add	r2,r3,r20
   80c1c:	b8a1c83a 	sub	r16,r23,r2
   80c20:	20002626 	beq	r4,zero,80cbc <___vfprintf_internal_r+0x3e8>
   80c24:	1805003a 	cmpeq	r2,r3,zero
   80c28:	1000a226 	beq	r2,zero,80eb4 <___vfprintf_internal_r+0x5e0>
   80c2c:	04009916 	blt	zero,r16,80e94 <___vfprintf_internal_r+0x5c0>
   80c30:	b005883a 	mov	r2,r22
   80c34:	0500890e 	bge	zero,r20,80e5c <___vfprintf_internal_r+0x588>
   80c38:	102d883a 	mov	r22,r2
   80c3c:	1521883a 	add	r16,r2,r20
   80c40:	00000206 	br	80c4c <___vfprintf_internal_r+0x378>
   80c44:	b5800044 	addi	r22,r22,1
   80c48:	85bfb826 	beq	r16,r22,80b2c <___vfprintf_internal_r+0x258>
   80c4c:	94bfffc4 	addi	r18,r18,-1
   80c50:	90800003 	ldbu	r2,0(r18)
   80c54:	98c00117 	ldw	r3,4(r19)
   80c58:	d9001017 	ldw	r4,64(sp)
   80c5c:	d8800005 	stb	r2,0(sp)
   80c60:	980b883a 	mov	r5,r19
   80c64:	d80d883a 	mov	r6,sp
   80c68:	01c00044 	movi	r7,1
   80c6c:	183ee83a 	callr	r3
   80c70:	103ff426 	beq	r2,zero,80c44 <___vfprintf_internal_r+0x370>
   80c74:	05bfffc4 	movi	r22,-1
   80c78:	003f4a06 	br	809a4 <___vfprintf_internal_r+0xd0>
   80c7c:	04000084 	movi	r16,2
   80c80:	d9c00f15 	stw	r7,60(sp)
   80c84:	003f2b06 	br	80934 <___vfprintf_internal_r+0x60>
   80c88:	210015c4 	addi	r4,r4,87
   80c8c:	003fbb06 	br	80b7c <___vfprintf_internal_r+0x2a8>
   80c90:	040000c4 	movi	r16,3
   80c94:	003f2706 	br	80934 <___vfprintf_internal_r+0x60>
   80c98:	00800044 	movi	r2,1
   80c9c:	040000c4 	movi	r16,3
   80ca0:	d8800e15 	stw	r2,56(sp)
   80ca4:	003f2306 	br	80934 <___vfprintf_internal_r+0x60>
   80ca8:	000f883a 	mov	r7,zero
   80cac:	003f6706 	br	80a4c <___vfprintf_internal_r+0x178>
   80cb0:	01000044 	movi	r4,1
   80cb4:	d9000915 	stw	r4,36(sp)
   80cb8:	003f7006 	br	80a7c <___vfprintf_internal_r+0x1a8>
   80cbc:	04008916 	blt	zero,r16,80ee4 <___vfprintf_internal_r+0x610>
   80cc0:	d8c00a17 	ldw	r3,40(sp)
   80cc4:	1805003a 	cmpeq	r2,r3,zero
   80cc8:	103fd91e 	bne	r2,zero,80c30 <___vfprintf_internal_r+0x35c>
   80ccc:	98c00117 	ldw	r3,4(r19)
   80cd0:	d9001017 	ldw	r4,64(sp)
   80cd4:	00800b44 	movi	r2,45
   80cd8:	d8800005 	stb	r2,0(sp)
   80cdc:	980b883a 	mov	r5,r19
   80ce0:	d80d883a 	mov	r6,sp
   80ce4:	01c00044 	movi	r7,1
   80ce8:	183ee83a 	callr	r3
   80cec:	103fe11e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80cf0:	b0800044 	addi	r2,r22,1
   80cf4:	003fcf06 	br	80c34 <___vfprintf_internal_r+0x360>
   80cf8:	d8c01117 	ldw	r3,68(sp)
   80cfc:	1c000017 	ldw	r16,0(r3)
   80d00:	18c00104 	addi	r3,r3,4
   80d04:	d8c01115 	stw	r3,68(sp)
   80d08:	80005016 	blt	r16,zero,80e4c <___vfprintf_internal_r+0x578>
   80d0c:	d8000a15 	stw	zero,40(sp)
   80d10:	803f931e 	bne	r16,zero,80b60 <___vfprintf_internal_r+0x28c>
   80d14:	dc800104 	addi	r18,sp,4
   80d18:	9039883a 	mov	fp,r18
   80d1c:	0029883a 	mov	r20,zero
   80d20:	003fa806 	br	80bc4 <___vfprintf_internal_r+0x2f0>
   80d24:	00800404 	movi	r2,16
   80d28:	00c00044 	movi	r3,1
   80d2c:	d8800d15 	stw	r2,52(sp)
   80d30:	d8000c15 	stw	zero,48(sp)
   80d34:	d8c00b15 	stw	r3,44(sp)
   80d38:	003f8106 	br	80b40 <___vfprintf_internal_r+0x26c>
   80d3c:	04000044 	movi	r16,1
   80d40:	85c0080e 	bge	r16,r23,80d64 <___vfprintf_internal_r+0x490>
   80d44:	d9001017 	ldw	r4,64(sp)
   80d48:	980b883a 	mov	r5,r19
   80d4c:	01800804 	movi	r6,32
   80d50:	b9ffffc4 	addi	r7,r23,-1
   80d54:	00808540 	call	80854 <print_repeat>
   80d58:	103fc61e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80d5c:	bd85883a 	add	r2,r23,r22
   80d60:	15bfffc4 	addi	r22,r2,-1
   80d64:	d8c01117 	ldw	r3,68(sp)
   80d68:	d9001017 	ldw	r4,64(sp)
   80d6c:	800f883a 	mov	r7,r16
   80d70:	18800017 	ldw	r2,0(r3)
   80d74:	98c00117 	ldw	r3,4(r19)
   80d78:	980b883a 	mov	r5,r19
   80d7c:	d8800005 	stb	r2,0(sp)
   80d80:	d80d883a 	mov	r6,sp
   80d84:	183ee83a 	callr	r3
   80d88:	103fba1e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80d8c:	d9001117 	ldw	r4,68(sp)
   80d90:	b5800044 	addi	r22,r22,1
   80d94:	0021883a 	mov	r16,zero
   80d98:	21000104 	addi	r4,r4,4
   80d9c:	d9001115 	stw	r4,68(sp)
   80da0:	003ee406 	br	80934 <___vfprintf_internal_r+0x60>
   80da4:	01000204 	movi	r4,8
   80da8:	d9000d15 	stw	r4,52(sp)
   80dac:	d8000c15 	stw	zero,48(sp)
   80db0:	003f6306 	br	80b40 <___vfprintf_internal_r+0x26c>
   80db4:	d8801117 	ldw	r2,68(sp)
   80db8:	15000017 	ldw	r20,0(r2)
   80dbc:	a009883a 	mov	r4,r20
   80dc0:	00808340 	call	80834 <strlen>
   80dc4:	b8a1c83a 	sub	r16,r23,r2
   80dc8:	1025883a 	mov	r18,r2
   80dcc:	0400070e 	bge	zero,r16,80dec <___vfprintf_internal_r+0x518>
   80dd0:	d9001017 	ldw	r4,64(sp)
   80dd4:	980b883a 	mov	r5,r19
   80dd8:	01800804 	movi	r6,32
   80ddc:	800f883a 	mov	r7,r16
   80de0:	00808540 	call	80854 <print_repeat>
   80de4:	103fa31e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80de8:	b42d883a 	add	r22,r22,r16
   80dec:	98c00117 	ldw	r3,4(r19)
   80df0:	d9001017 	ldw	r4,64(sp)
   80df4:	a00d883a 	mov	r6,r20
   80df8:	980b883a 	mov	r5,r19
   80dfc:	900f883a 	mov	r7,r18
   80e00:	183ee83a 	callr	r3
   80e04:	103f9b1e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80e08:	d8c01117 	ldw	r3,68(sp)
   80e0c:	b4ad883a 	add	r22,r22,r18
   80e10:	0021883a 	mov	r16,zero
   80e14:	18c00104 	addi	r3,r3,4
   80e18:	d8c01115 	stw	r3,68(sp)
   80e1c:	003ec506 	br	80934 <___vfprintf_internal_r+0x60>
   80e20:	0007883a 	mov	r3,zero
   80e24:	003ef806 	br	80a08 <___vfprintf_internal_r+0x134>
   80e28:	98c00117 	ldw	r3,4(r19)
   80e2c:	d9001017 	ldw	r4,64(sp)
   80e30:	d9400005 	stb	r5,0(sp)
   80e34:	d80d883a 	mov	r6,sp
   80e38:	980b883a 	mov	r5,r19
   80e3c:	183ee83a 	callr	r3
   80e40:	103f8c1e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80e44:	b5800044 	addi	r22,r22,1
   80e48:	003eba06 	br	80934 <___vfprintf_internal_r+0x60>
   80e4c:	00800044 	movi	r2,1
   80e50:	0421c83a 	sub	r16,zero,r16
   80e54:	d8800a15 	stw	r2,40(sp)
   80e58:	003f4006 	br	80b5c <___vfprintf_internal_r+0x288>
   80e5c:	102d883a 	mov	r22,r2
   80e60:	0021883a 	mov	r16,zero
   80e64:	003eb306 	br	80934 <___vfprintf_internal_r+0x60>
   80e68:	98c00117 	ldw	r3,4(r19)
   80e6c:	d9000005 	stb	r4,0(sp)
   80e70:	d9001017 	ldw	r4,64(sp)
   80e74:	980b883a 	mov	r5,r19
   80e78:	d80d883a 	mov	r6,sp
   80e7c:	800f883a 	mov	r7,r16
   80e80:	183ee83a 	callr	r3
   80e84:	103f7b1e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80e88:	b42d883a 	add	r22,r22,r16
   80e8c:	0021883a 	mov	r16,zero
   80e90:	003ea806 	br	80934 <___vfprintf_internal_r+0x60>
   80e94:	d9001017 	ldw	r4,64(sp)
   80e98:	980b883a 	mov	r5,r19
   80e9c:	01800c04 	movi	r6,48
   80ea0:	800f883a 	mov	r7,r16
   80ea4:	00808540 	call	80854 <print_repeat>
   80ea8:	103f721e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80eac:	b405883a 	add	r2,r22,r16
   80eb0:	003f6006 	br	80c34 <___vfprintf_internal_r+0x360>
   80eb4:	98c00117 	ldw	r3,4(r19)
   80eb8:	d9001017 	ldw	r4,64(sp)
   80ebc:	00800b44 	movi	r2,45
   80ec0:	d8800005 	stb	r2,0(sp)
   80ec4:	980b883a 	mov	r5,r19
   80ec8:	d80d883a 	mov	r6,sp
   80ecc:	01c00044 	movi	r7,1
   80ed0:	183ee83a 	callr	r3
   80ed4:	103f671e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80ed8:	b5800044 	addi	r22,r22,1
   80edc:	043f540e 	bge	zero,r16,80c30 <___vfprintf_internal_r+0x35c>
   80ee0:	003fec06 	br	80e94 <___vfprintf_internal_r+0x5c0>
   80ee4:	d9001017 	ldw	r4,64(sp)
   80ee8:	980b883a 	mov	r5,r19
   80eec:	01800804 	movi	r6,32
   80ef0:	800f883a 	mov	r7,r16
   80ef4:	00808540 	call	80854 <print_repeat>
   80ef8:	103f5e1e 	bne	r2,zero,80c74 <___vfprintf_internal_r+0x3a0>
   80efc:	b42d883a 	add	r22,r22,r16
   80f00:	003f6f06 	br	80cc0 <___vfprintf_internal_r+0x3ec>

00080f04 <__vfprintf_internal>:
   80f04:	00800234 	movhi	r2,8
   80f08:	108ba904 	addi	r2,r2,11940
   80f0c:	2013883a 	mov	r9,r4
   80f10:	11000017 	ldw	r4,0(r2)
   80f14:	2805883a 	mov	r2,r5
   80f18:	300f883a 	mov	r7,r6
   80f1c:	480b883a 	mov	r5,r9
   80f20:	100d883a 	mov	r6,r2
   80f24:	00808d41 	jmpi	808d4 <___vfprintf_internal_r>

00080f28 <__sfvwrite_small_dev>:
   80f28:	2880000b 	ldhu	r2,0(r5)
   80f2c:	defffa04 	addi	sp,sp,-24
   80f30:	dcc00315 	stw	r19,12(sp)
   80f34:	1080020c 	andi	r2,r2,8
   80f38:	dc800215 	stw	r18,8(sp)
   80f3c:	dc400115 	stw	r17,4(sp)
   80f40:	dfc00515 	stw	ra,20(sp)
   80f44:	dd000415 	stw	r20,16(sp)
   80f48:	dc000015 	stw	r16,0(sp)
   80f4c:	2825883a 	mov	r18,r5
   80f50:	2027883a 	mov	r19,r4
   80f54:	3023883a 	mov	r17,r6
   80f58:	10002026 	beq	r2,zero,80fdc <__sfvwrite_small_dev+0xb4>
   80f5c:	2940008f 	ldh	r5,2(r5)
   80f60:	28000f16 	blt	r5,zero,80fa0 <__sfvwrite_small_dev+0x78>
   80f64:	01c01b0e 	bge	zero,r7,80fd4 <__sfvwrite_small_dev+0xac>
   80f68:	3821883a 	mov	r16,r7
   80f6c:	05010004 	movi	r20,1024
   80f70:	00000206 	br	80f7c <__sfvwrite_small_dev+0x54>
   80f74:	0400170e 	bge	zero,r16,80fd4 <__sfvwrite_small_dev+0xac>
   80f78:	9140008f 	ldh	r5,2(r18)
   80f7c:	880d883a 	mov	r6,r17
   80f80:	9809883a 	mov	r4,r19
   80f84:	800f883a 	mov	r7,r16
   80f88:	a400010e 	bge	r20,r16,80f90 <__sfvwrite_small_dev+0x68>
   80f8c:	01c10004 	movi	r7,1024
   80f90:	00810c80 	call	810c8 <_write_r>
   80f94:	88a3883a 	add	r17,r17,r2
   80f98:	80a1c83a 	sub	r16,r16,r2
   80f9c:	00bff516 	blt	zero,r2,80f74 <__sfvwrite_small_dev+0x4c>
   80fa0:	9080000b 	ldhu	r2,0(r18)
   80fa4:	00ffffc4 	movi	r3,-1
   80fa8:	10801014 	ori	r2,r2,64
   80fac:	9080000d 	sth	r2,0(r18)
   80fb0:	1805883a 	mov	r2,r3
   80fb4:	dfc00517 	ldw	ra,20(sp)
   80fb8:	dd000417 	ldw	r20,16(sp)
   80fbc:	dcc00317 	ldw	r19,12(sp)
   80fc0:	dc800217 	ldw	r18,8(sp)
   80fc4:	dc400117 	ldw	r17,4(sp)
   80fc8:	dc000017 	ldw	r16,0(sp)
   80fcc:	dec00604 	addi	sp,sp,24
   80fd0:	f800283a 	ret
   80fd4:	0007883a 	mov	r3,zero
   80fd8:	003ff506 	br	80fb0 <__sfvwrite_small_dev+0x88>
   80fdc:	00ffffc4 	movi	r3,-1
   80fe0:	003ff306 	br	80fb0 <__sfvwrite_small_dev+0x88>

00080fe4 <putc>:
   80fe4:	defffd04 	addi	sp,sp,-12
   80fe8:	00800234 	movhi	r2,8
   80fec:	108ba904 	addi	r2,r2,11940
   80ff0:	dc000115 	stw	r16,4(sp)
   80ff4:	2021883a 	mov	r16,r4
   80ff8:	11000017 	ldw	r4,0(r2)
   80ffc:	dc000005 	stb	r16,0(sp)
   81000:	00800234 	movhi	r2,8
   81004:	1083ca04 	addi	r2,r2,3880
   81008:	dfc00215 	stw	ra,8(sp)
   8100c:	28800115 	stw	r2,4(r5)
   81010:	d80d883a 	mov	r6,sp
   81014:	01c00044 	movi	r7,1
   81018:	103ee83a 	callr	r2
   8101c:	1007883a 	mov	r3,r2
   81020:	00bfffc4 	movi	r2,-1
   81024:	18800526 	beq	r3,r2,8103c <putc+0x58>
   81028:	8005883a 	mov	r2,r16
   8102c:	dfc00217 	ldw	ra,8(sp)
   81030:	dc000117 	ldw	r16,4(sp)
   81034:	dec00304 	addi	sp,sp,12
   81038:	f800283a 	ret
   8103c:	1821883a 	mov	r16,r3
   81040:	8005883a 	mov	r2,r16
   81044:	dfc00217 	ldw	ra,8(sp)
   81048:	dc000117 	ldw	r16,4(sp)
   8104c:	dec00304 	addi	sp,sp,12
   81050:	f800283a 	ret

00081054 <_putc_r>:
   81054:	00800234 	movhi	r2,8
   81058:	108ba904 	addi	r2,r2,11940
   8105c:	defffd04 	addi	sp,sp,-12
   81060:	11000017 	ldw	r4,0(r2)
   81064:	00800234 	movhi	r2,8
   81068:	1083ca04 	addi	r2,r2,3880
   8106c:	30800115 	stw	r2,4(r6)
   81070:	dc000115 	stw	r16,4(sp)
   81074:	2821883a 	mov	r16,r5
   81078:	dfc00215 	stw	ra,8(sp)
   8107c:	300b883a 	mov	r5,r6
   81080:	01c00044 	movi	r7,1
   81084:	d80d883a 	mov	r6,sp
   81088:	dc000005 	stb	r16,0(sp)
   8108c:	103ee83a 	callr	r2
   81090:	1007883a 	mov	r3,r2
   81094:	00bfffc4 	movi	r2,-1
   81098:	18800526 	beq	r3,r2,810b0 <_putc_r+0x5c>
   8109c:	8005883a 	mov	r2,r16
   810a0:	dfc00217 	ldw	ra,8(sp)
   810a4:	dc000117 	ldw	r16,4(sp)
   810a8:	dec00304 	addi	sp,sp,12
   810ac:	f800283a 	ret
   810b0:	1821883a 	mov	r16,r3
   810b4:	8005883a 	mov	r2,r16
   810b8:	dfc00217 	ldw	ra,8(sp)
   810bc:	dc000117 	ldw	r16,4(sp)
   810c0:	dec00304 	addi	sp,sp,12
   810c4:	f800283a 	ret

000810c8 <_write_r>:
   810c8:	defffd04 	addi	sp,sp,-12
   810cc:	dc000015 	stw	r16,0(sp)
   810d0:	04000234 	movhi	r16,8
   810d4:	840c6e04 	addi	r16,r16,12728
   810d8:	dc400115 	stw	r17,4(sp)
   810dc:	80000015 	stw	zero,0(r16)
   810e0:	2023883a 	mov	r17,r4
   810e4:	2809883a 	mov	r4,r5
   810e8:	300b883a 	mov	r5,r6
   810ec:	380d883a 	mov	r6,r7
   810f0:	dfc00215 	stw	ra,8(sp)
   810f4:	00812b80 	call	812b8 <write>
   810f8:	1007883a 	mov	r3,r2
   810fc:	00bfffc4 	movi	r2,-1
   81100:	18800626 	beq	r3,r2,8111c <_write_r+0x54>
   81104:	1805883a 	mov	r2,r3
   81108:	dfc00217 	ldw	ra,8(sp)
   8110c:	dc400117 	ldw	r17,4(sp)
   81110:	dc000017 	ldw	r16,0(sp)
   81114:	dec00304 	addi	sp,sp,12
   81118:	f800283a 	ret
   8111c:	80800017 	ldw	r2,0(r16)
   81120:	103ff826 	beq	r2,zero,81104 <_write_r+0x3c>
   81124:	88800015 	stw	r2,0(r17)
   81128:	1805883a 	mov	r2,r3
   8112c:	dfc00217 	ldw	ra,8(sp)
   81130:	dc400117 	ldw	r17,4(sp)
   81134:	dc000017 	ldw	r16,0(sp)
   81138:	dec00304 	addi	sp,sp,12
   8113c:	f800283a 	ret

00081140 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   81140:	defffe04 	addi	sp,sp,-8
   81144:	dfc00115 	stw	ra,4(sp)
   81148:	df000015 	stw	fp,0(sp)
   8114c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   81150:	01000234 	movhi	r4,8
   81154:	210bb404 	addi	r4,r4,11984
   81158:	01400234 	movhi	r5,8
   8115c:	294afc04 	addi	r5,r5,11248
   81160:	01800234 	movhi	r6,8
   81164:	318bb404 	addi	r6,r6,11984
   81168:	00811c00 	call	811c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8116c:	01000234 	movhi	r4,8
   81170:	21000804 	addi	r4,r4,32
   81174:	01400234 	movhi	r5,8
   81178:	29400804 	addi	r5,r5,32
   8117c:	01800234 	movhi	r6,8
   81180:	31806d04 	addi	r6,r6,436
   81184:	00811c00 	call	811c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   81188:	01000234 	movhi	r4,8
   8118c:	210ab804 	addi	r4,r4,10976
   81190:	01400234 	movhi	r5,8
   81194:	294ab804 	addi	r5,r5,10976
   81198:	01800234 	movhi	r6,8
   8119c:	318afc04 	addi	r6,r6,11248
   811a0:	00811c00 	call	811c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   811a4:	0081ae80 	call	81ae8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   811a8:	0081c440 	call	81c44 <alt_icache_flush_all>
}
   811ac:	e037883a 	mov	sp,fp
   811b0:	dfc00117 	ldw	ra,4(sp)
   811b4:	df000017 	ldw	fp,0(sp)
   811b8:	dec00204 	addi	sp,sp,8
   811bc:	f800283a 	ret

000811c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   811c0:	defffc04 	addi	sp,sp,-16
   811c4:	df000315 	stw	fp,12(sp)
   811c8:	df000304 	addi	fp,sp,12
   811cc:	e13ffd15 	stw	r4,-12(fp)
   811d0:	e17ffe15 	stw	r5,-8(fp)
   811d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   811d8:	e0fffe17 	ldw	r3,-8(fp)
   811dc:	e0bffd17 	ldw	r2,-12(fp)
   811e0:	18800e26 	beq	r3,r2,8121c <alt_load_section+0x5c>
  {
    while( to != end )
   811e4:	00000a06 	br	81210 <alt_load_section+0x50>
    {
      *to++ = *from++;
   811e8:	e0bffd17 	ldw	r2,-12(fp)
   811ec:	10c00017 	ldw	r3,0(r2)
   811f0:	e0bffe17 	ldw	r2,-8(fp)
   811f4:	10c00015 	stw	r3,0(r2)
   811f8:	e0bffe17 	ldw	r2,-8(fp)
   811fc:	10800104 	addi	r2,r2,4
   81200:	e0bffe15 	stw	r2,-8(fp)
   81204:	e0bffd17 	ldw	r2,-12(fp)
   81208:	10800104 	addi	r2,r2,4
   8120c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   81210:	e0fffe17 	ldw	r3,-8(fp)
   81214:	e0bfff17 	ldw	r2,-4(fp)
   81218:	18bff31e 	bne	r3,r2,811e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8121c:	e037883a 	mov	sp,fp
   81220:	df000017 	ldw	fp,0(sp)
   81224:	dec00104 	addi	sp,sp,4
   81228:	f800283a 	ret

0008122c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8122c:	defffd04 	addi	sp,sp,-12
   81230:	dfc00215 	stw	ra,8(sp)
   81234:	df000115 	stw	fp,4(sp)
   81238:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8123c:	0009883a 	mov	r4,zero
   81240:	00814380 	call	81438 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   81244:	008146c0 	call	8146c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   81248:	01000234 	movhi	r4,8
   8124c:	210af104 	addi	r4,r4,11204
   81250:	01400234 	movhi	r5,8
   81254:	294af104 	addi	r5,r5,11204
   81258:	01800234 	movhi	r6,8
   8125c:	318af104 	addi	r6,r6,11204
   81260:	00820040 	call	82004 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   81264:	d120c617 	ldw	r4,-31976(gp)
   81268:	d160c717 	ldw	r5,-31972(gp)
   8126c:	d1a0c817 	ldw	r6,-31968(gp)
   81270:	00804800 	call	80480 <main>
   81274:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   81278:	01000044 	movi	r4,1
   8127c:	008198c0 	call	8198c <close>
  exit (result);
   81280:	e13fff17 	ldw	r4,-4(fp)
   81284:	00828600 	call	82860 <exit>

00081288 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   81288:	defffd04 	addi	sp,sp,-12
   8128c:	dfc00215 	stw	ra,8(sp)
   81290:	df000115 	stw	fp,4(sp)
   81294:	df000104 	addi	fp,sp,4
   81298:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8129c:	e13fff17 	ldw	r4,-4(fp)
   812a0:	00818400 	call	81840 <alt_busy_sleep>
}
   812a4:	e037883a 	mov	sp,fp
   812a8:	dfc00117 	ldw	ra,4(sp)
   812ac:	df000017 	ldw	fp,0(sp)
   812b0:	dec00204 	addi	sp,sp,8
   812b4:	f800283a 	ret

000812b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   812b8:	defff704 	addi	sp,sp,-36
   812bc:	dfc00815 	stw	ra,32(sp)
   812c0:	df000715 	stw	fp,28(sp)
   812c4:	df000704 	addi	fp,sp,28
   812c8:	e13ffb15 	stw	r4,-20(fp)
   812cc:	e17ffc15 	stw	r5,-16(fp)
   812d0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   812d4:	e0bffb17 	ldw	r2,-20(fp)
   812d8:	1004803a 	cmplt	r2,r2,zero
   812dc:	1000081e 	bne	r2,zero,81300 <write+0x48>
   812e0:	e0bffb17 	ldw	r2,-20(fp)
   812e4:	10800324 	muli	r2,r2,12
   812e8:	1007883a 	mov	r3,r2
   812ec:	00800234 	movhi	r2,8
   812f0:	108b4904 	addi	r2,r2,11556
   812f4:	1887883a 	add	r3,r3,r2
   812f8:	e0ffff15 	stw	r3,-4(fp)
   812fc:	00000106 	br	81304 <write+0x4c>
   81300:	e03fff15 	stw	zero,-4(fp)
   81304:	e0bfff17 	ldw	r2,-4(fp)
   81308:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8130c:	e0bffa17 	ldw	r2,-24(fp)
   81310:	1005003a 	cmpeq	r2,r2,zero
   81314:	1000241e 	bne	r2,zero,813a8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   81318:	e0bffa17 	ldw	r2,-24(fp)
   8131c:	10800217 	ldw	r2,8(r2)
   81320:	108000cc 	andi	r2,r2,3
   81324:	1005003a 	cmpeq	r2,r2,zero
   81328:	10001a1e 	bne	r2,zero,81394 <write+0xdc>
   8132c:	e0bffa17 	ldw	r2,-24(fp)
   81330:	10800017 	ldw	r2,0(r2)
   81334:	10800617 	ldw	r2,24(r2)
   81338:	1005003a 	cmpeq	r2,r2,zero
   8133c:	1000151e 	bne	r2,zero,81394 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   81340:	e0bffa17 	ldw	r2,-24(fp)
   81344:	10800017 	ldw	r2,0(r2)
   81348:	10800617 	ldw	r2,24(r2)
   8134c:	e17ffc17 	ldw	r5,-16(fp)
   81350:	e1bffd17 	ldw	r6,-12(fp)
   81354:	e13ffa17 	ldw	r4,-24(fp)
   81358:	103ee83a 	callr	r2
   8135c:	e0bff915 	stw	r2,-28(fp)
   81360:	e0bff917 	ldw	r2,-28(fp)
   81364:	1004403a 	cmpge	r2,r2,zero
   81368:	1000071e 	bne	r2,zero,81388 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   8136c:	00813d80 	call	813d8 <alt_get_errno>
   81370:	e0fff917 	ldw	r3,-28(fp)
   81374:	00c7c83a 	sub	r3,zero,r3
   81378:	10c00015 	stw	r3,0(r2)
        return -1;
   8137c:	00bfffc4 	movi	r2,-1
   81380:	e0bffe15 	stw	r2,-8(fp)
   81384:	00000e06 	br	813c0 <write+0x108>
      }
      return rval;
   81388:	e0bff917 	ldw	r2,-28(fp)
   8138c:	e0bffe15 	stw	r2,-8(fp)
   81390:	00000b06 	br	813c0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   81394:	00813d80 	call	813d8 <alt_get_errno>
   81398:	1007883a 	mov	r3,r2
   8139c:	00800344 	movi	r2,13
   813a0:	18800015 	stw	r2,0(r3)
   813a4:	00000406 	br	813b8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   813a8:	00813d80 	call	813d8 <alt_get_errno>
   813ac:	1007883a 	mov	r3,r2
   813b0:	00801444 	movi	r2,81
   813b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   813b8:	00bfffc4 	movi	r2,-1
   813bc:	e0bffe15 	stw	r2,-8(fp)
   813c0:	e0bffe17 	ldw	r2,-8(fp)
}
   813c4:	e037883a 	mov	sp,fp
   813c8:	dfc00117 	ldw	ra,4(sp)
   813cc:	df000017 	ldw	fp,0(sp)
   813d0:	dec00204 	addi	sp,sp,8
   813d4:	f800283a 	ret

000813d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   813d8:	defffd04 	addi	sp,sp,-12
   813dc:	dfc00215 	stw	ra,8(sp)
   813e0:	df000115 	stw	fp,4(sp)
   813e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   813e8:	00800234 	movhi	r2,8
   813ec:	108bb004 	addi	r2,r2,11968
   813f0:	10800017 	ldw	r2,0(r2)
   813f4:	1005003a 	cmpeq	r2,r2,zero
   813f8:	1000061e 	bne	r2,zero,81414 <alt_get_errno+0x3c>
   813fc:	00800234 	movhi	r2,8
   81400:	108bb004 	addi	r2,r2,11968
   81404:	10800017 	ldw	r2,0(r2)
   81408:	103ee83a 	callr	r2
   8140c:	e0bfff15 	stw	r2,-4(fp)
   81410:	00000306 	br	81420 <alt_get_errno+0x48>
   81414:	00800234 	movhi	r2,8
   81418:	108c6e04 	addi	r2,r2,12728
   8141c:	e0bfff15 	stw	r2,-4(fp)
   81420:	e0bfff17 	ldw	r2,-4(fp)
}
   81424:	e037883a 	mov	sp,fp
   81428:	dfc00117 	ldw	ra,4(sp)
   8142c:	df000017 	ldw	fp,0(sp)
   81430:	dec00204 	addi	sp,sp,8
   81434:	f800283a 	ret

00081438 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   81438:	defffd04 	addi	sp,sp,-12
   8143c:	dfc00215 	stw	ra,8(sp)
   81440:	df000115 	stw	fp,4(sp)
   81444:	df000104 	addi	fp,sp,4
   81448:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   8144c:	00825440 	call	82544 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   81450:	00800044 	movi	r2,1
   81454:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   81458:	e037883a 	mov	sp,fp
   8145c:	dfc00117 	ldw	ra,4(sp)
   81460:	df000017 	ldw	fp,0(sp)
   81464:	dec00204 	addi	sp,sp,8
   81468:	f800283a 	ret

0008146c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8146c:	defffe04 	addi	sp,sp,-8
   81470:	dfc00115 	stw	ra,4(sp)
   81474:	df000015 	stw	fp,0(sp)
   81478:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   8147c:	01001804 	movi	r4,96
   81480:	000b883a 	mov	r5,zero
   81484:	01800044 	movi	r6,1
   81488:	01c0fa04 	movi	r7,1000
   8148c:	00817b00 	call	817b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   81490:	01000234 	movhi	r4,8
   81494:	210b3404 	addi	r4,r4,11472
   81498:	00814b00 	call	814b0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   8149c:	e037883a 	mov	sp,fp
   814a0:	dfc00117 	ldw	ra,4(sp)
   814a4:	df000017 	ldw	fp,0(sp)
   814a8:	dec00204 	addi	sp,sp,8
   814ac:	f800283a 	ret

000814b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   814b0:	defffd04 	addi	sp,sp,-12
   814b4:	dfc00215 	stw	ra,8(sp)
   814b8:	df000115 	stw	fp,4(sp)
   814bc:	df000104 	addi	fp,sp,4
   814c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   814c4:	e13fff17 	ldw	r4,-4(fp)
   814c8:	01400234 	movhi	r5,8
   814cc:	294bad04 	addi	r5,r5,11956
   814d0:	0081b300 	call	81b30 <alt_dev_llist_insert>
}
   814d4:	e037883a 	mov	sp,fp
   814d8:	dfc00117 	ldw	ra,4(sp)
   814dc:	df000017 	ldw	fp,0(sp)
   814e0:	dec00204 	addi	sp,sp,8
   814e4:	f800283a 	ret

000814e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   814e8:	defffa04 	addi	sp,sp,-24
   814ec:	dfc00515 	stw	ra,20(sp)
   814f0:	df000415 	stw	fp,16(sp)
   814f4:	df000404 	addi	fp,sp,16
   814f8:	e13ffd15 	stw	r4,-12(fp)
   814fc:	e17ffe15 	stw	r5,-8(fp)
   81500:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   81504:	e0bffd17 	ldw	r2,-12(fp)
   81508:	10800017 	ldw	r2,0(r2)
   8150c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   81510:	e0bffc17 	ldw	r2,-16(fp)
   81514:	11000a04 	addi	r4,r2,40
   81518:	e0bffd17 	ldw	r2,-12(fp)
   8151c:	11c00217 	ldw	r7,8(r2)
   81520:	e17ffe17 	ldw	r5,-8(fp)
   81524:	e1bfff17 	ldw	r6,-4(fp)
   81528:	00815980 	call	81598 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8152c:	e037883a 	mov	sp,fp
   81530:	dfc00117 	ldw	ra,4(sp)
   81534:	df000017 	ldw	fp,0(sp)
   81538:	dec00204 	addi	sp,sp,8
   8153c:	f800283a 	ret

00081540 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   81540:	defffa04 	addi	sp,sp,-24
   81544:	dfc00515 	stw	ra,20(sp)
   81548:	df000415 	stw	fp,16(sp)
   8154c:	df000404 	addi	fp,sp,16
   81550:	e13ffd15 	stw	r4,-12(fp)
   81554:	e17ffe15 	stw	r5,-8(fp)
   81558:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8155c:	e0bffd17 	ldw	r2,-12(fp)
   81560:	10800017 	ldw	r2,0(r2)
   81564:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   81568:	e0bffc17 	ldw	r2,-16(fp)
   8156c:	11000a04 	addi	r4,r2,40
   81570:	e0bffd17 	ldw	r2,-12(fp)
   81574:	11c00217 	ldw	r7,8(r2)
   81578:	e17ffe17 	ldw	r5,-8(fp)
   8157c:	e1bfff17 	ldw	r6,-4(fp)
   81580:	008169c0 	call	8169c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   81584:	e037883a 	mov	sp,fp
   81588:	dfc00117 	ldw	ra,4(sp)
   8158c:	df000017 	ldw	fp,0(sp)
   81590:	dec00204 	addi	sp,sp,8
   81594:	f800283a 	ret

00081598 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   81598:	defff604 	addi	sp,sp,-40
   8159c:	df000915 	stw	fp,36(sp)
   815a0:	df000904 	addi	fp,sp,36
   815a4:	e13ffb15 	stw	r4,-20(fp)
   815a8:	e17ffc15 	stw	r5,-16(fp)
   815ac:	e1bffd15 	stw	r6,-12(fp)
   815b0:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   815b4:	e0bffb17 	ldw	r2,-20(fp)
   815b8:	10800017 	ldw	r2,0(r2)
   815bc:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   815c0:	e0bffc17 	ldw	r2,-16(fp)
   815c4:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   815c8:	e0bffd17 	ldw	r2,-12(fp)
   815cc:	1007883a 	mov	r3,r2
   815d0:	e0bffc17 	ldw	r2,-16(fp)
   815d4:	10c5883a 	add	r2,r2,r3
   815d8:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   815dc:	00001606 	br	81638 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   815e0:	e0bffa17 	ldw	r2,-24(fp)
   815e4:	10800037 	ldwio	r2,0(r2)
   815e8:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   815ec:	e0bff717 	ldw	r2,-36(fp)
   815f0:	10a0000c 	andi	r2,r2,32768
   815f4:	1005003a 	cmpeq	r2,r2,zero
   815f8:	1000081e 	bne	r2,zero,8161c <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   815fc:	e0bff717 	ldw	r2,-36(fp)
   81600:	1007883a 	mov	r3,r2
   81604:	e0bff917 	ldw	r2,-28(fp)
   81608:	10c00005 	stb	r3,0(r2)
   8160c:	e0bff917 	ldw	r2,-28(fp)
   81610:	10800044 	addi	r2,r2,1
   81614:	e0bff915 	stw	r2,-28(fp)
   81618:	00000706 	br	81638 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   8161c:	e0fff917 	ldw	r3,-28(fp)
   81620:	e0bffc17 	ldw	r2,-16(fp)
   81624:	1880071e 	bne	r3,r2,81644 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   81628:	e0bffe17 	ldw	r2,-8(fp)
   8162c:	1090000c 	andi	r2,r2,16384
   81630:	1004c03a 	cmpne	r2,r2,zero
   81634:	1000031e 	bne	r2,zero,81644 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   81638:	e0fff917 	ldw	r3,-28(fp)
   8163c:	e0bff817 	ldw	r2,-32(fp)
   81640:	18bfe736 	bltu	r3,r2,815e0 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   81644:	e0fff917 	ldw	r3,-28(fp)
   81648:	e0bffc17 	ldw	r2,-16(fp)
   8164c:	18800526 	beq	r3,r2,81664 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   81650:	e0fff917 	ldw	r3,-28(fp)
   81654:	e0bffc17 	ldw	r2,-16(fp)
   81658:	1887c83a 	sub	r3,r3,r2
   8165c:	e0ffff15 	stw	r3,-4(fp)
   81660:	00000906 	br	81688 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   81664:	e0bffe17 	ldw	r2,-8(fp)
   81668:	1090000c 	andi	r2,r2,16384
   8166c:	1005003a 	cmpeq	r2,r2,zero
   81670:	1000031e 	bne	r2,zero,81680 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   81674:	00bffd44 	movi	r2,-11
   81678:	e0bfff15 	stw	r2,-4(fp)
   8167c:	00000206 	br	81688 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   81680:	00bffec4 	movi	r2,-5
   81684:	e0bfff15 	stw	r2,-4(fp)
   81688:	e0bfff17 	ldw	r2,-4(fp)
}
   8168c:	e037883a 	mov	sp,fp
   81690:	df000017 	ldw	fp,0(sp)
   81694:	dec00104 	addi	sp,sp,4
   81698:	f800283a 	ret

0008169c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8169c:	defff904 	addi	sp,sp,-28
   816a0:	df000615 	stw	fp,24(sp)
   816a4:	df000604 	addi	fp,sp,24
   816a8:	e13ffc15 	stw	r4,-16(fp)
   816ac:	e17ffd15 	stw	r5,-12(fp)
   816b0:	e1bffe15 	stw	r6,-8(fp)
   816b4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   816b8:	e0bffc17 	ldw	r2,-16(fp)
   816bc:	10800017 	ldw	r2,0(r2)
   816c0:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   816c4:	e0bffe17 	ldw	r2,-8(fp)
   816c8:	1007883a 	mov	r3,r2
   816cc:	e0bffd17 	ldw	r2,-12(fp)
   816d0:	10c5883a 	add	r2,r2,r3
   816d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   816d8:	00001106 	br	81720 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   816dc:	e0bffb17 	ldw	r2,-20(fp)
   816e0:	10800104 	addi	r2,r2,4
   816e4:	10800037 	ldwio	r2,0(r2)
   816e8:	10bfffec 	andhi	r2,r2,65535
   816ec:	1005003a 	cmpeq	r2,r2,zero
   816f0:	10000b1e 	bne	r2,zero,81720 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   816f4:	e13ffb17 	ldw	r4,-20(fp)
   816f8:	e0bffd17 	ldw	r2,-12(fp)
   816fc:	10800003 	ldbu	r2,0(r2)
   81700:	10c03fcc 	andi	r3,r2,255
   81704:	18c0201c 	xori	r3,r3,128
   81708:	18ffe004 	addi	r3,r3,-128
   8170c:	e0bffd17 	ldw	r2,-12(fp)
   81710:	10800044 	addi	r2,r2,1
   81714:	e0bffd15 	stw	r2,-12(fp)
   81718:	2005883a 	mov	r2,r4
   8171c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   81720:	e0fffd17 	ldw	r3,-12(fp)
   81724:	e0bffa17 	ldw	r2,-24(fp)
   81728:	18bfec36 	bltu	r3,r2,816dc <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   8172c:	e0bffe17 	ldw	r2,-8(fp)
}
   81730:	e037883a 	mov	sp,fp
   81734:	df000017 	ldw	fp,0(sp)
   81738:	dec00104 	addi	sp,sp,4
   8173c:	f800283a 	ret

00081740 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   81740:	defffa04 	addi	sp,sp,-24
   81744:	dfc00515 	stw	ra,20(sp)
   81748:	df000415 	stw	fp,16(sp)
   8174c:	df000404 	addi	fp,sp,16
   81750:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   81754:	e0bfff17 	ldw	r2,-4(fp)
   81758:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8175c:	e0bfff17 	ldw	r2,-4(fp)
   81760:	10800104 	addi	r2,r2,4
   81764:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81768:	0005303a 	rdctl	r2,status
   8176c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81770:	e0fffd17 	ldw	r3,-12(fp)
   81774:	00bfff84 	movi	r2,-2
   81778:	1884703a 	and	r2,r3,r2
   8177c:	1001703a 	wrctl	status,r2
  
  return context;
   81780:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   81784:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   81788:	00824380 	call	82438 <alt_tick>
   8178c:	e0bffe17 	ldw	r2,-8(fp)
   81790:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81794:	e0bffc17 	ldw	r2,-16(fp)
   81798:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8179c:	e037883a 	mov	sp,fp
   817a0:	dfc00117 	ldw	ra,4(sp)
   817a4:	df000017 	ldw	fp,0(sp)
   817a8:	dec00204 	addi	sp,sp,8
   817ac:	f800283a 	ret

000817b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   817b0:	defff804 	addi	sp,sp,-32
   817b4:	dfc00715 	stw	ra,28(sp)
   817b8:	df000615 	stw	fp,24(sp)
   817bc:	df000604 	addi	fp,sp,24
   817c0:	e13ffc15 	stw	r4,-16(fp)
   817c4:	e17ffd15 	stw	r5,-12(fp)
   817c8:	e1bffe15 	stw	r6,-8(fp)
   817cc:	e1ffff15 	stw	r7,-4(fp)
   817d0:	e0bfff17 	ldw	r2,-4(fp)
   817d4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   817d8:	00800234 	movhi	r2,8
   817dc:	108c7304 	addi	r2,r2,12748
   817e0:	10800017 	ldw	r2,0(r2)
   817e4:	1004c03a 	cmpne	r2,r2,zero
   817e8:	1000041e 	bne	r2,zero,817fc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   817ec:	00c00234 	movhi	r3,8
   817f0:	18cc7304 	addi	r3,r3,12748
   817f4:	e0bffb17 	ldw	r2,-20(fp)
   817f8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   817fc:	e0bffc17 	ldw	r2,-16(fp)
   81800:	10800104 	addi	r2,r2,4
   81804:	1007883a 	mov	r3,r2
   81808:	008001c4 	movi	r2,7
   8180c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   81810:	d8000015 	stw	zero,0(sp)
   81814:	e13ffd17 	ldw	r4,-12(fp)
   81818:	e17ffe17 	ldw	r5,-8(fp)
   8181c:	01800234 	movhi	r6,8
   81820:	3185d004 	addi	r6,r6,5952
   81824:	e1fffc17 	ldw	r7,-16(fp)
   81828:	0081c740 	call	81c74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8182c:	e037883a 	mov	sp,fp
   81830:	dfc00117 	ldw	ra,4(sp)
   81834:	df000017 	ldw	fp,0(sp)
   81838:	dec00204 	addi	sp,sp,8
   8183c:	f800283a 	ret

00081840 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   81840:	defffa04 	addi	sp,sp,-24
   81844:	dfc00515 	stw	ra,20(sp)
   81848:	df000415 	stw	fp,16(sp)
   8184c:	df000404 	addi	fp,sp,16
   81850:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   81854:	008000c4 	movi	r2,3
   81858:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   8185c:	e0fffc17 	ldw	r3,-16(fp)
   81860:	008003f4 	movhi	r2,15
   81864:	10909004 	addi	r2,r2,16960
   81868:	188b383a 	mul	r5,r3,r2
   8186c:	0100bef4 	movhi	r4,763
   81870:	213c2004 	addi	r4,r4,-3968
   81874:	00806c40 	call	806c4 <__udivsi3>
   81878:	100b883a 	mov	r5,r2
   8187c:	01200034 	movhi	r4,32768
   81880:	213fffc4 	addi	r4,r4,-1
   81884:	00806c40 	call	806c4 <__udivsi3>
   81888:	100b883a 	mov	r5,r2
   8188c:	e13fff17 	ldw	r4,-4(fp)
   81890:	00806c40 	call	806c4 <__udivsi3>
   81894:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   81898:	e0bffd17 	ldw	r2,-12(fp)
   8189c:	1005003a 	cmpeq	r2,r2,zero
   818a0:	1000281e 	bne	r2,zero,81944 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   818a4:	e03ffe15 	stw	zero,-8(fp)
   818a8:	00001606 	br	81904 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   818ac:	00a00034 	movhi	r2,32768
   818b0:	10bfffc4 	addi	r2,r2,-1
   818b4:	10bfffc4 	addi	r2,r2,-1
   818b8:	103ffe1e 	bne	r2,zero,818b4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   818bc:	e0fffc17 	ldw	r3,-16(fp)
   818c0:	008003f4 	movhi	r2,15
   818c4:	10909004 	addi	r2,r2,16960
   818c8:	188b383a 	mul	r5,r3,r2
   818cc:	0100bef4 	movhi	r4,763
   818d0:	213c2004 	addi	r4,r4,-3968
   818d4:	00806c40 	call	806c4 <__udivsi3>
   818d8:	100b883a 	mov	r5,r2
   818dc:	01200034 	movhi	r4,32768
   818e0:	213fffc4 	addi	r4,r4,-1
   818e4:	00806c40 	call	806c4 <__udivsi3>
   818e8:	1007883a 	mov	r3,r2
   818ec:	e0bfff17 	ldw	r2,-4(fp)
   818f0:	10c5c83a 	sub	r2,r2,r3
   818f4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   818f8:	e0bffe17 	ldw	r2,-8(fp)
   818fc:	10800044 	addi	r2,r2,1
   81900:	e0bffe15 	stw	r2,-8(fp)
   81904:	e0fffe17 	ldw	r3,-8(fp)
   81908:	e0bffd17 	ldw	r2,-12(fp)
   8190c:	18bfe716 	blt	r3,r2,818ac <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   81910:	e0fffc17 	ldw	r3,-16(fp)
   81914:	008003f4 	movhi	r2,15
   81918:	10909004 	addi	r2,r2,16960
   8191c:	188b383a 	mul	r5,r3,r2
   81920:	0100bef4 	movhi	r4,763
   81924:	213c2004 	addi	r4,r4,-3968
   81928:	00806c40 	call	806c4 <__udivsi3>
   8192c:	1007883a 	mov	r3,r2
   81930:	e0bfff17 	ldw	r2,-4(fp)
   81934:	1885383a 	mul	r2,r3,r2
   81938:	10bfffc4 	addi	r2,r2,-1
   8193c:	103ffe1e 	bne	r2,zero,81938 <alt_busy_sleep+0xf8>
   81940:	00000c06 	br	81974 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   81944:	e0fffc17 	ldw	r3,-16(fp)
   81948:	008003f4 	movhi	r2,15
   8194c:	10909004 	addi	r2,r2,16960
   81950:	188b383a 	mul	r5,r3,r2
   81954:	0100bef4 	movhi	r4,763
   81958:	213c2004 	addi	r4,r4,-3968
   8195c:	00806c40 	call	806c4 <__udivsi3>
   81960:	1007883a 	mov	r3,r2
   81964:	e0bfff17 	ldw	r2,-4(fp)
   81968:	1885383a 	mul	r2,r3,r2
   8196c:	10bfffc4 	addi	r2,r2,-1
   81970:	00bffe16 	blt	zero,r2,8196c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   81974:	0005883a 	mov	r2,zero
}
   81978:	e037883a 	mov	sp,fp
   8197c:	dfc00117 	ldw	ra,4(sp)
   81980:	df000017 	ldw	fp,0(sp)
   81984:	dec00204 	addi	sp,sp,8
   81988:	f800283a 	ret

0008198c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8198c:	defff804 	addi	sp,sp,-32
   81990:	dfc00715 	stw	ra,28(sp)
   81994:	df000615 	stw	fp,24(sp)
   81998:	df000604 	addi	fp,sp,24
   8199c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   819a0:	e0bffc17 	ldw	r2,-16(fp)
   819a4:	1004803a 	cmplt	r2,r2,zero
   819a8:	1000081e 	bne	r2,zero,819cc <close+0x40>
   819ac:	e0bffc17 	ldw	r2,-16(fp)
   819b0:	10800324 	muli	r2,r2,12
   819b4:	1007883a 	mov	r3,r2
   819b8:	00800234 	movhi	r2,8
   819bc:	108b4904 	addi	r2,r2,11556
   819c0:	1887883a 	add	r3,r3,r2
   819c4:	e0ffff15 	stw	r3,-4(fp)
   819c8:	00000106 	br	819d0 <close+0x44>
   819cc:	e03fff15 	stw	zero,-4(fp)
   819d0:	e0bfff17 	ldw	r2,-4(fp)
   819d4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   819d8:	e0bffb17 	ldw	r2,-20(fp)
   819dc:	1005003a 	cmpeq	r2,r2,zero
   819e0:	10001d1e 	bne	r2,zero,81a58 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   819e4:	e0bffb17 	ldw	r2,-20(fp)
   819e8:	10800017 	ldw	r2,0(r2)
   819ec:	10800417 	ldw	r2,16(r2)
   819f0:	1005003a 	cmpeq	r2,r2,zero
   819f4:	1000071e 	bne	r2,zero,81a14 <close+0x88>
   819f8:	e0bffb17 	ldw	r2,-20(fp)
   819fc:	10800017 	ldw	r2,0(r2)
   81a00:	10800417 	ldw	r2,16(r2)
   81a04:	e13ffb17 	ldw	r4,-20(fp)
   81a08:	103ee83a 	callr	r2
   81a0c:	e0bffe15 	stw	r2,-8(fp)
   81a10:	00000106 	br	81a18 <close+0x8c>
   81a14:	e03ffe15 	stw	zero,-8(fp)
   81a18:	e0bffe17 	ldw	r2,-8(fp)
   81a1c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81a20:	e13ffc17 	ldw	r4,-16(fp)
   81a24:	00823400 	call	82340 <alt_release_fd>
    if (rval < 0)
   81a28:	e0bffa17 	ldw	r2,-24(fp)
   81a2c:	1004403a 	cmpge	r2,r2,zero
   81a30:	1000071e 	bne	r2,zero,81a50 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   81a34:	0081a880 	call	81a88 <alt_get_errno>
   81a38:	e0fffa17 	ldw	r3,-24(fp)
   81a3c:	00c7c83a 	sub	r3,zero,r3
   81a40:	10c00015 	stw	r3,0(r2)
      return -1;
   81a44:	00bfffc4 	movi	r2,-1
   81a48:	e0bffd15 	stw	r2,-12(fp)
   81a4c:	00000806 	br	81a70 <close+0xe4>
    }
    return 0;
   81a50:	e03ffd15 	stw	zero,-12(fp)
   81a54:	00000606 	br	81a70 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81a58:	0081a880 	call	81a88 <alt_get_errno>
   81a5c:	1007883a 	mov	r3,r2
   81a60:	00801444 	movi	r2,81
   81a64:	18800015 	stw	r2,0(r3)
    return -1;
   81a68:	00bfffc4 	movi	r2,-1
   81a6c:	e0bffd15 	stw	r2,-12(fp)
   81a70:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   81a74:	e037883a 	mov	sp,fp
   81a78:	dfc00117 	ldw	ra,4(sp)
   81a7c:	df000017 	ldw	fp,0(sp)
   81a80:	dec00204 	addi	sp,sp,8
   81a84:	f800283a 	ret

00081a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81a88:	defffd04 	addi	sp,sp,-12
   81a8c:	dfc00215 	stw	ra,8(sp)
   81a90:	df000115 	stw	fp,4(sp)
   81a94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   81a98:	00800234 	movhi	r2,8
   81a9c:	108bb004 	addi	r2,r2,11968
   81aa0:	10800017 	ldw	r2,0(r2)
   81aa4:	1005003a 	cmpeq	r2,r2,zero
   81aa8:	1000061e 	bne	r2,zero,81ac4 <alt_get_errno+0x3c>
   81aac:	00800234 	movhi	r2,8
   81ab0:	108bb004 	addi	r2,r2,11968
   81ab4:	10800017 	ldw	r2,0(r2)
   81ab8:	103ee83a 	callr	r2
   81abc:	e0bfff15 	stw	r2,-4(fp)
   81ac0:	00000306 	br	81ad0 <alt_get_errno+0x48>
   81ac4:	00800234 	movhi	r2,8
   81ac8:	108c6e04 	addi	r2,r2,12728
   81acc:	e0bfff15 	stw	r2,-4(fp)
   81ad0:	e0bfff17 	ldw	r2,-4(fp)
}
   81ad4:	e037883a 	mov	sp,fp
   81ad8:	dfc00117 	ldw	ra,4(sp)
   81adc:	df000017 	ldw	fp,0(sp)
   81ae0:	dec00204 	addi	sp,sp,8
   81ae4:	f800283a 	ret

00081ae8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   81ae8:	deffff04 	addi	sp,sp,-4
   81aec:	df000015 	stw	fp,0(sp)
   81af0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   81af4:	e037883a 	mov	sp,fp
   81af8:	df000017 	ldw	fp,0(sp)
   81afc:	dec00104 	addi	sp,sp,4
   81b00:	f800283a 	ret

00081b04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   81b04:	defffc04 	addi	sp,sp,-16
   81b08:	df000315 	stw	fp,12(sp)
   81b0c:	df000304 	addi	fp,sp,12
   81b10:	e13ffd15 	stw	r4,-12(fp)
   81b14:	e17ffe15 	stw	r5,-8(fp)
   81b18:	e1bfff15 	stw	r6,-4(fp)
  return len;
   81b1c:	e0bfff17 	ldw	r2,-4(fp)
}
   81b20:	e037883a 	mov	sp,fp
   81b24:	df000017 	ldw	fp,0(sp)
   81b28:	dec00104 	addi	sp,sp,4
   81b2c:	f800283a 	ret

00081b30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81b30:	defff904 	addi	sp,sp,-28
   81b34:	dfc00615 	stw	ra,24(sp)
   81b38:	df000515 	stw	fp,20(sp)
   81b3c:	df000504 	addi	fp,sp,20
   81b40:	e13ffd15 	stw	r4,-12(fp)
   81b44:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81b48:	e0bffd17 	ldw	r2,-12(fp)
   81b4c:	1005003a 	cmpeq	r2,r2,zero
   81b50:	1000041e 	bne	r2,zero,81b64 <alt_dev_llist_insert+0x34>
   81b54:	e0bffd17 	ldw	r2,-12(fp)
   81b58:	10800217 	ldw	r2,8(r2)
   81b5c:	1004c03a 	cmpne	r2,r2,zero
   81b60:	1000071e 	bne	r2,zero,81b80 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   81b64:	0081be40 	call	81be4 <alt_get_errno>
   81b68:	1007883a 	mov	r3,r2
   81b6c:	00800584 	movi	r2,22
   81b70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   81b74:	00bffa84 	movi	r2,-22
   81b78:	e0bfff15 	stw	r2,-4(fp)
   81b7c:	00001306 	br	81bcc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   81b80:	e0fffd17 	ldw	r3,-12(fp)
   81b84:	e0bffe17 	ldw	r2,-8(fp)
   81b88:	e0bffb15 	stw	r2,-20(fp)
   81b8c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81b90:	e0fffc17 	ldw	r3,-16(fp)
   81b94:	e0bffb17 	ldw	r2,-20(fp)
   81b98:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   81b9c:	e0bffb17 	ldw	r2,-20(fp)
   81ba0:	10c00017 	ldw	r3,0(r2)
   81ba4:	e0bffc17 	ldw	r2,-16(fp)
   81ba8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   81bac:	e0bffb17 	ldw	r2,-20(fp)
   81bb0:	10c00017 	ldw	r3,0(r2)
   81bb4:	e0bffc17 	ldw	r2,-16(fp)
   81bb8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   81bbc:	e0fffb17 	ldw	r3,-20(fp)
   81bc0:	e0bffc17 	ldw	r2,-16(fp)
   81bc4:	18800015 	stw	r2,0(r3)

  return 0;  
   81bc8:	e03fff15 	stw	zero,-4(fp)
   81bcc:	e0bfff17 	ldw	r2,-4(fp)
}
   81bd0:	e037883a 	mov	sp,fp
   81bd4:	dfc00117 	ldw	ra,4(sp)
   81bd8:	df000017 	ldw	fp,0(sp)
   81bdc:	dec00204 	addi	sp,sp,8
   81be0:	f800283a 	ret

00081be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81be4:	defffd04 	addi	sp,sp,-12
   81be8:	dfc00215 	stw	ra,8(sp)
   81bec:	df000115 	stw	fp,4(sp)
   81bf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   81bf4:	00800234 	movhi	r2,8
   81bf8:	108bb004 	addi	r2,r2,11968
   81bfc:	10800017 	ldw	r2,0(r2)
   81c00:	1005003a 	cmpeq	r2,r2,zero
   81c04:	1000061e 	bne	r2,zero,81c20 <alt_get_errno+0x3c>
   81c08:	00800234 	movhi	r2,8
   81c0c:	108bb004 	addi	r2,r2,11968
   81c10:	10800017 	ldw	r2,0(r2)
   81c14:	103ee83a 	callr	r2
   81c18:	e0bfff15 	stw	r2,-4(fp)
   81c1c:	00000306 	br	81c2c <alt_get_errno+0x48>
   81c20:	00800234 	movhi	r2,8
   81c24:	108c6e04 	addi	r2,r2,12728
   81c28:	e0bfff15 	stw	r2,-4(fp)
   81c2c:	e0bfff17 	ldw	r2,-4(fp)
}
   81c30:	e037883a 	mov	sp,fp
   81c34:	dfc00117 	ldw	ra,4(sp)
   81c38:	df000017 	ldw	fp,0(sp)
   81c3c:	dec00204 	addi	sp,sp,8
   81c40:	f800283a 	ret

00081c44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   81c44:	defffe04 	addi	sp,sp,-8
   81c48:	dfc00115 	stw	ra,4(sp)
   81c4c:	df000015 	stw	fp,0(sp)
   81c50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   81c54:	0009883a 	mov	r4,zero
   81c58:	01420004 	movi	r5,2048
   81c5c:	00827d00 	call	827d0 <alt_icache_flush>
#endif
}
   81c60:	e037883a 	mov	sp,fp
   81c64:	dfc00117 	ldw	ra,4(sp)
   81c68:	df000017 	ldw	fp,0(sp)
   81c6c:	dec00204 	addi	sp,sp,8
   81c70:	f800283a 	ret

00081c74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81c74:	defff904 	addi	sp,sp,-28
   81c78:	dfc00615 	stw	ra,24(sp)
   81c7c:	df000515 	stw	fp,20(sp)
   81c80:	df000504 	addi	fp,sp,20
   81c84:	e13ffc15 	stw	r4,-16(fp)
   81c88:	e17ffd15 	stw	r5,-12(fp)
   81c8c:	e1bffe15 	stw	r6,-8(fp)
   81c90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81c94:	e0800217 	ldw	r2,8(fp)
   81c98:	d8800015 	stw	r2,0(sp)
   81c9c:	e13ffc17 	ldw	r4,-16(fp)
   81ca0:	e17ffd17 	ldw	r5,-12(fp)
   81ca4:	e1bffe17 	ldw	r6,-8(fp)
   81ca8:	e1ffff17 	ldw	r7,-4(fp)
   81cac:	0081e480 	call	81e48 <alt_iic_isr_register>
}  
   81cb0:	e037883a 	mov	sp,fp
   81cb4:	dfc00117 	ldw	ra,4(sp)
   81cb8:	df000017 	ldw	fp,0(sp)
   81cbc:	dec00204 	addi	sp,sp,8
   81cc0:	f800283a 	ret

00081cc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   81cc4:	defff904 	addi	sp,sp,-28
   81cc8:	df000615 	stw	fp,24(sp)
   81ccc:	df000604 	addi	fp,sp,24
   81cd0:	e13ffe15 	stw	r4,-8(fp)
   81cd4:	e17fff15 	stw	r5,-4(fp)
   81cd8:	e0bfff17 	ldw	r2,-4(fp)
   81cdc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81ce0:	0005303a 	rdctl	r2,status
   81ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81ce8:	e0fffb17 	ldw	r3,-20(fp)
   81cec:	00bfff84 	movi	r2,-2
   81cf0:	1884703a 	and	r2,r3,r2
   81cf4:	1001703a 	wrctl	status,r2
  
  return context;
   81cf8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   81cfc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   81d00:	e0fffc17 	ldw	r3,-16(fp)
   81d04:	00800044 	movi	r2,1
   81d08:	10c4983a 	sll	r2,r2,r3
   81d0c:	1007883a 	mov	r3,r2
   81d10:	00800234 	movhi	r2,8
   81d14:	108c7204 	addi	r2,r2,12744
   81d18:	10800017 	ldw	r2,0(r2)
   81d1c:	1886b03a 	or	r3,r3,r2
   81d20:	00800234 	movhi	r2,8
   81d24:	108c7204 	addi	r2,r2,12744
   81d28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81d2c:	00800234 	movhi	r2,8
   81d30:	108c7204 	addi	r2,r2,12744
   81d34:	10800017 	ldw	r2,0(r2)
   81d38:	100170fa 	wrctl	ienable,r2
   81d3c:	e0bffd17 	ldw	r2,-12(fp)
   81d40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81d44:	e0bffa17 	ldw	r2,-24(fp)
   81d48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   81d4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   81d50:	e037883a 	mov	sp,fp
   81d54:	df000017 	ldw	fp,0(sp)
   81d58:	dec00104 	addi	sp,sp,4
   81d5c:	f800283a 	ret

00081d60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   81d60:	defff904 	addi	sp,sp,-28
   81d64:	df000615 	stw	fp,24(sp)
   81d68:	df000604 	addi	fp,sp,24
   81d6c:	e13ffe15 	stw	r4,-8(fp)
   81d70:	e17fff15 	stw	r5,-4(fp)
   81d74:	e0bfff17 	ldw	r2,-4(fp)
   81d78:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81d7c:	0005303a 	rdctl	r2,status
   81d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81d84:	e0fffb17 	ldw	r3,-20(fp)
   81d88:	00bfff84 	movi	r2,-2
   81d8c:	1884703a 	and	r2,r3,r2
   81d90:	1001703a 	wrctl	status,r2
  
  return context;
   81d94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   81d98:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   81d9c:	e0fffc17 	ldw	r3,-16(fp)
   81da0:	00800044 	movi	r2,1
   81da4:	10c4983a 	sll	r2,r2,r3
   81da8:	0084303a 	nor	r2,zero,r2
   81dac:	1007883a 	mov	r3,r2
   81db0:	00800234 	movhi	r2,8
   81db4:	108c7204 	addi	r2,r2,12744
   81db8:	10800017 	ldw	r2,0(r2)
   81dbc:	1886703a 	and	r3,r3,r2
   81dc0:	00800234 	movhi	r2,8
   81dc4:	108c7204 	addi	r2,r2,12744
   81dc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81dcc:	00800234 	movhi	r2,8
   81dd0:	108c7204 	addi	r2,r2,12744
   81dd4:	10800017 	ldw	r2,0(r2)
   81dd8:	100170fa 	wrctl	ienable,r2
   81ddc:	e0bffd17 	ldw	r2,-12(fp)
   81de0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81de4:	e0bffa17 	ldw	r2,-24(fp)
   81de8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   81dec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   81df0:	e037883a 	mov	sp,fp
   81df4:	df000017 	ldw	fp,0(sp)
   81df8:	dec00104 	addi	sp,sp,4
   81dfc:	f800283a 	ret

00081e00 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   81e00:	defffc04 	addi	sp,sp,-16
   81e04:	df000315 	stw	fp,12(sp)
   81e08:	df000304 	addi	fp,sp,12
   81e0c:	e13ffe15 	stw	r4,-8(fp)
   81e10:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   81e14:	000530fa 	rdctl	r2,ienable
   81e18:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   81e1c:	e0ffff17 	ldw	r3,-4(fp)
   81e20:	00800044 	movi	r2,1
   81e24:	10c4983a 	sll	r2,r2,r3
   81e28:	1007883a 	mov	r3,r2
   81e2c:	e0bffd17 	ldw	r2,-12(fp)
   81e30:	1884703a 	and	r2,r3,r2
   81e34:	1004c03a 	cmpne	r2,r2,zero
}
   81e38:	e037883a 	mov	sp,fp
   81e3c:	df000017 	ldw	fp,0(sp)
   81e40:	dec00104 	addi	sp,sp,4
   81e44:	f800283a 	ret

00081e48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81e48:	defff404 	addi	sp,sp,-48
   81e4c:	dfc00b15 	stw	ra,44(sp)
   81e50:	df000a15 	stw	fp,40(sp)
   81e54:	df000a04 	addi	fp,sp,40
   81e58:	e13ffb15 	stw	r4,-20(fp)
   81e5c:	e17ffc15 	stw	r5,-16(fp)
   81e60:	e1bffd15 	stw	r6,-12(fp)
   81e64:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   81e68:	00bffa84 	movi	r2,-22
   81e6c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   81e70:	e0bffc17 	ldw	r2,-16(fp)
   81e74:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   81e78:	e0bff917 	ldw	r2,-28(fp)
   81e7c:	10800808 	cmpgei	r2,r2,32
   81e80:	1000291e 	bne	r2,zero,81f28 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81e84:	0005303a 	rdctl	r2,status
   81e88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81e8c:	e0fff717 	ldw	r3,-36(fp)
   81e90:	00bfff84 	movi	r2,-2
   81e94:	1884703a 	and	r2,r3,r2
   81e98:	1001703a 	wrctl	status,r2
  
  return context;
   81e9c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   81ea0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   81ea4:	e0bff917 	ldw	r2,-28(fp)
   81ea8:	00c00234 	movhi	r3,8
   81eac:	18cc7504 	addi	r3,r3,12756
   81eb0:	100490fa 	slli	r2,r2,3
   81eb4:	10c7883a 	add	r3,r2,r3
   81eb8:	e0bffd17 	ldw	r2,-12(fp)
   81ebc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   81ec0:	e0bff917 	ldw	r2,-28(fp)
   81ec4:	00c00234 	movhi	r3,8
   81ec8:	18cc7504 	addi	r3,r3,12756
   81ecc:	100490fa 	slli	r2,r2,3
   81ed0:	10c5883a 	add	r2,r2,r3
   81ed4:	10c00104 	addi	r3,r2,4
   81ed8:	e0bffe17 	ldw	r2,-8(fp)
   81edc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   81ee0:	e0bffd17 	ldw	r2,-12(fp)
   81ee4:	1005003a 	cmpeq	r2,r2,zero
   81ee8:	1000051e 	bne	r2,zero,81f00 <alt_iic_isr_register+0xb8>
   81eec:	e17ff917 	ldw	r5,-28(fp)
   81ef0:	e13ffb17 	ldw	r4,-20(fp)
   81ef4:	0081cc40 	call	81cc4 <alt_ic_irq_enable>
   81ef8:	e0bfff15 	stw	r2,-4(fp)
   81efc:	00000406 	br	81f10 <alt_iic_isr_register+0xc8>
   81f00:	e17ff917 	ldw	r5,-28(fp)
   81f04:	e13ffb17 	ldw	r4,-20(fp)
   81f08:	0081d600 	call	81d60 <alt_ic_irq_disable>
   81f0c:	e0bfff15 	stw	r2,-4(fp)
   81f10:	e0bfff17 	ldw	r2,-4(fp)
   81f14:	e0bffa15 	stw	r2,-24(fp)
   81f18:	e0bff817 	ldw	r2,-32(fp)
   81f1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81f20:	e0bff617 	ldw	r2,-40(fp)
   81f24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   81f28:	e0bffa17 	ldw	r2,-24(fp)
}
   81f2c:	e037883a 	mov	sp,fp
   81f30:	dfc00117 	ldw	ra,4(sp)
   81f34:	df000017 	ldw	fp,0(sp)
   81f38:	dec00204 	addi	sp,sp,8
   81f3c:	f800283a 	ret

00081f40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   81f40:	defff904 	addi	sp,sp,-28
   81f44:	dfc00615 	stw	ra,24(sp)
   81f48:	df000515 	stw	fp,20(sp)
   81f4c:	df000504 	addi	fp,sp,20
   81f50:	e13ffc15 	stw	r4,-16(fp)
   81f54:	e17ffd15 	stw	r5,-12(fp)
   81f58:	e1bffe15 	stw	r6,-8(fp)
   81f5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   81f60:	e13ffd17 	ldw	r4,-12(fp)
   81f64:	e17ffe17 	ldw	r5,-8(fp)
   81f68:	e1bfff17 	ldw	r6,-4(fp)
   81f6c:	00821580 	call	82158 <open>
   81f70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   81f74:	e0bffb17 	ldw	r2,-20(fp)
   81f78:	1004803a 	cmplt	r2,r2,zero
   81f7c:	10001c1e 	bne	r2,zero,81ff0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   81f80:	e0bffb17 	ldw	r2,-20(fp)
   81f84:	00c00234 	movhi	r3,8
   81f88:	18cb4904 	addi	r3,r3,11556
   81f8c:	10800324 	muli	r2,r2,12
   81f90:	10c5883a 	add	r2,r2,r3
   81f94:	10c00017 	ldw	r3,0(r2)
   81f98:	e0bffc17 	ldw	r2,-16(fp)
   81f9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   81fa0:	e0bffb17 	ldw	r2,-20(fp)
   81fa4:	00c00234 	movhi	r3,8
   81fa8:	18cb4904 	addi	r3,r3,11556
   81fac:	10800324 	muli	r2,r2,12
   81fb0:	10c5883a 	add	r2,r2,r3
   81fb4:	10800104 	addi	r2,r2,4
   81fb8:	10c00017 	ldw	r3,0(r2)
   81fbc:	e0bffc17 	ldw	r2,-16(fp)
   81fc0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   81fc4:	e0bffb17 	ldw	r2,-20(fp)
   81fc8:	00c00234 	movhi	r3,8
   81fcc:	18cb4904 	addi	r3,r3,11556
   81fd0:	10800324 	muli	r2,r2,12
   81fd4:	10c5883a 	add	r2,r2,r3
   81fd8:	10800204 	addi	r2,r2,8
   81fdc:	10c00017 	ldw	r3,0(r2)
   81fe0:	e0bffc17 	ldw	r2,-16(fp)
   81fe4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   81fe8:	e13ffb17 	ldw	r4,-20(fp)
   81fec:	00823400 	call	82340 <alt_release_fd>
  }
} 
   81ff0:	e037883a 	mov	sp,fp
   81ff4:	dfc00117 	ldw	ra,4(sp)
   81ff8:	df000017 	ldw	fp,0(sp)
   81ffc:	dec00204 	addi	sp,sp,8
   82000:	f800283a 	ret

00082004 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   82004:	defffb04 	addi	sp,sp,-20
   82008:	dfc00415 	stw	ra,16(sp)
   8200c:	df000315 	stw	fp,12(sp)
   82010:	df000304 	addi	fp,sp,12
   82014:	e13ffd15 	stw	r4,-12(fp)
   82018:	e17ffe15 	stw	r5,-8(fp)
   8201c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   82020:	01000234 	movhi	r4,8
   82024:	210b4c04 	addi	r4,r4,11568
   82028:	e17ffd17 	ldw	r5,-12(fp)
   8202c:	01800044 	movi	r6,1
   82030:	01c07fc4 	movi	r7,511
   82034:	0081f400 	call	81f40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   82038:	01000234 	movhi	r4,8
   8203c:	210b4904 	addi	r4,r4,11556
   82040:	e17ffe17 	ldw	r5,-8(fp)
   82044:	000d883a 	mov	r6,zero
   82048:	01c07fc4 	movi	r7,511
   8204c:	0081f400 	call	81f40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   82050:	01000234 	movhi	r4,8
   82054:	210b4f04 	addi	r4,r4,11580
   82058:	e17fff17 	ldw	r5,-4(fp)
   8205c:	01800044 	movi	r6,1
   82060:	01c07fc4 	movi	r7,511
   82064:	0081f400 	call	81f40 <alt_open_fd>
}  
   82068:	e037883a 	mov	sp,fp
   8206c:	dfc00117 	ldw	ra,4(sp)
   82070:	df000017 	ldw	fp,0(sp)
   82074:	dec00204 	addi	sp,sp,8
   82078:	f800283a 	ret

0008207c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8207c:	defffc04 	addi	sp,sp,-16
   82080:	df000315 	stw	fp,12(sp)
   82084:	df000304 	addi	fp,sp,12
   82088:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8208c:	e0bffe17 	ldw	r2,-8(fp)
   82090:	10800217 	ldw	r2,8(r2)
   82094:	10d00034 	orhi	r3,r2,16384
   82098:	e0bffe17 	ldw	r2,-8(fp)
   8209c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   820a0:	e03ffd15 	stw	zero,-12(fp)
   820a4:	00002006 	br	82128 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   820a8:	e0bffd17 	ldw	r2,-12(fp)
   820ac:	00c00234 	movhi	r3,8
   820b0:	18cb4904 	addi	r3,r3,11556
   820b4:	10800324 	muli	r2,r2,12
   820b8:	10c5883a 	add	r2,r2,r3
   820bc:	10c00017 	ldw	r3,0(r2)
   820c0:	e0bffe17 	ldw	r2,-8(fp)
   820c4:	10800017 	ldw	r2,0(r2)
   820c8:	1880141e 	bne	r3,r2,8211c <alt_file_locked+0xa0>
   820cc:	e0bffd17 	ldw	r2,-12(fp)
   820d0:	00c00234 	movhi	r3,8
   820d4:	18cb4904 	addi	r3,r3,11556
   820d8:	10800324 	muli	r2,r2,12
   820dc:	10c5883a 	add	r2,r2,r3
   820e0:	10800204 	addi	r2,r2,8
   820e4:	10800017 	ldw	r2,0(r2)
   820e8:	1004403a 	cmpge	r2,r2,zero
   820ec:	10000b1e 	bne	r2,zero,8211c <alt_file_locked+0xa0>
   820f0:	e0bffd17 	ldw	r2,-12(fp)
   820f4:	10800324 	muli	r2,r2,12
   820f8:	1007883a 	mov	r3,r2
   820fc:	00800234 	movhi	r2,8
   82100:	108b4904 	addi	r2,r2,11556
   82104:	1887883a 	add	r3,r3,r2
   82108:	e0bffe17 	ldw	r2,-8(fp)
   8210c:	18800326 	beq	r3,r2,8211c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82110:	00bffcc4 	movi	r2,-13
   82114:	e0bfff15 	stw	r2,-4(fp)
   82118:	00000a06 	br	82144 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8211c:	e0bffd17 	ldw	r2,-12(fp)
   82120:	10800044 	addi	r2,r2,1
   82124:	e0bffd15 	stw	r2,-12(fp)
   82128:	00800234 	movhi	r2,8
   8212c:	108baf04 	addi	r2,r2,11964
   82130:	10800017 	ldw	r2,0(r2)
   82134:	1007883a 	mov	r3,r2
   82138:	e0bffd17 	ldw	r2,-12(fp)
   8213c:	18bfda2e 	bgeu	r3,r2,820a8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82140:	e03fff15 	stw	zero,-4(fp)
   82144:	e0bfff17 	ldw	r2,-4(fp)
}
   82148:	e037883a 	mov	sp,fp
   8214c:	df000017 	ldw	fp,0(sp)
   82150:	dec00104 	addi	sp,sp,4
   82154:	f800283a 	ret

00082158 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   82158:	defff404 	addi	sp,sp,-48
   8215c:	dfc00b15 	stw	ra,44(sp)
   82160:	df000a15 	stw	fp,40(sp)
   82164:	df000a04 	addi	fp,sp,40
   82168:	e13ffb15 	stw	r4,-20(fp)
   8216c:	e17ffc15 	stw	r5,-16(fp)
   82170:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82174:	00bfffc4 	movi	r2,-1
   82178:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8217c:	00bffb44 	movi	r2,-19
   82180:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   82184:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   82188:	e13ffb17 	ldw	r4,-20(fp)
   8218c:	01400234 	movhi	r5,8
   82190:	294bad04 	addi	r5,r5,11956
   82194:	00825640 	call	82564 <alt_find_dev>
   82198:	e0bffa15 	stw	r2,-24(fp)
   8219c:	e0bffa17 	ldw	r2,-24(fp)
   821a0:	1004c03a 	cmpne	r2,r2,zero
   821a4:	1000051e 	bne	r2,zero,821bc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   821a8:	e13ffb17 	ldw	r4,-20(fp)
   821ac:	00825f80 	call	825f8 <alt_find_file>
   821b0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   821b4:	00800044 	movi	r2,1
   821b8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   821bc:	e0bffa17 	ldw	r2,-24(fp)
   821c0:	1005003a 	cmpeq	r2,r2,zero
   821c4:	1000301e 	bne	r2,zero,82288 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   821c8:	e13ffa17 	ldw	r4,-24(fp)
   821cc:	00827180 	call	82718 <alt_get_fd>
   821d0:	e0bff815 	stw	r2,-32(fp)
   821d4:	e0bff817 	ldw	r2,-32(fp)
   821d8:	1004403a 	cmpge	r2,r2,zero
   821dc:	1000031e 	bne	r2,zero,821ec <open+0x94>
    {
      status = index;
   821e0:	e0bff817 	ldw	r2,-32(fp)
   821e4:	e0bff715 	stw	r2,-36(fp)
   821e8:	00002906 	br	82290 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   821ec:	e0bff817 	ldw	r2,-32(fp)
   821f0:	10800324 	muli	r2,r2,12
   821f4:	1007883a 	mov	r3,r2
   821f8:	00800234 	movhi	r2,8
   821fc:	108b4904 	addi	r2,r2,11556
   82200:	1885883a 	add	r2,r3,r2
   82204:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82208:	e0fffc17 	ldw	r3,-16(fp)
   8220c:	00900034 	movhi	r2,16384
   82210:	10bfffc4 	addi	r2,r2,-1
   82214:	1886703a 	and	r3,r3,r2
   82218:	e0bff917 	ldw	r2,-28(fp)
   8221c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82220:	e0bff617 	ldw	r2,-40(fp)
   82224:	1004c03a 	cmpne	r2,r2,zero
   82228:	1000061e 	bne	r2,zero,82244 <open+0xec>
   8222c:	e13ff917 	ldw	r4,-28(fp)
   82230:	008207c0 	call	8207c <alt_file_locked>
   82234:	e0bff715 	stw	r2,-36(fp)
   82238:	e0bff717 	ldw	r2,-36(fp)
   8223c:	1004803a 	cmplt	r2,r2,zero
   82240:	1000131e 	bne	r2,zero,82290 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   82244:	e0bffa17 	ldw	r2,-24(fp)
   82248:	10800317 	ldw	r2,12(r2)
   8224c:	1005003a 	cmpeq	r2,r2,zero
   82250:	1000091e 	bne	r2,zero,82278 <open+0x120>
   82254:	e0bffa17 	ldw	r2,-24(fp)
   82258:	10800317 	ldw	r2,12(r2)
   8225c:	e13ff917 	ldw	r4,-28(fp)
   82260:	e17ffb17 	ldw	r5,-20(fp)
   82264:	e1bffc17 	ldw	r6,-16(fp)
   82268:	e1fffd17 	ldw	r7,-12(fp)
   8226c:	103ee83a 	callr	r2
   82270:	e0bfff15 	stw	r2,-4(fp)
   82274:	00000106 	br	8227c <open+0x124>
   82278:	e03fff15 	stw	zero,-4(fp)
   8227c:	e0bfff17 	ldw	r2,-4(fp)
   82280:	e0bff715 	stw	r2,-36(fp)
   82284:	00000206 	br	82290 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   82288:	00bffb44 	movi	r2,-19
   8228c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   82290:	e0bff717 	ldw	r2,-36(fp)
   82294:	1004403a 	cmpge	r2,r2,zero
   82298:	1000091e 	bne	r2,zero,822c0 <open+0x168>
  {
    alt_release_fd (index);  
   8229c:	e13ff817 	ldw	r4,-32(fp)
   822a0:	00823400 	call	82340 <alt_release_fd>
    ALT_ERRNO = -status;
   822a4:	00822e00 	call	822e0 <alt_get_errno>
   822a8:	e0fff717 	ldw	r3,-36(fp)
   822ac:	00c7c83a 	sub	r3,zero,r3
   822b0:	10c00015 	stw	r3,0(r2)
    return -1;
   822b4:	00bfffc4 	movi	r2,-1
   822b8:	e0bffe15 	stw	r2,-8(fp)
   822bc:	00000206 	br	822c8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   822c0:	e0bff817 	ldw	r2,-32(fp)
   822c4:	e0bffe15 	stw	r2,-8(fp)
   822c8:	e0bffe17 	ldw	r2,-8(fp)
}
   822cc:	e037883a 	mov	sp,fp
   822d0:	dfc00117 	ldw	ra,4(sp)
   822d4:	df000017 	ldw	fp,0(sp)
   822d8:	dec00204 	addi	sp,sp,8
   822dc:	f800283a 	ret

000822e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   822e0:	defffd04 	addi	sp,sp,-12
   822e4:	dfc00215 	stw	ra,8(sp)
   822e8:	df000115 	stw	fp,4(sp)
   822ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   822f0:	00800234 	movhi	r2,8
   822f4:	108bb004 	addi	r2,r2,11968
   822f8:	10800017 	ldw	r2,0(r2)
   822fc:	1005003a 	cmpeq	r2,r2,zero
   82300:	1000061e 	bne	r2,zero,8231c <alt_get_errno+0x3c>
   82304:	00800234 	movhi	r2,8
   82308:	108bb004 	addi	r2,r2,11968
   8230c:	10800017 	ldw	r2,0(r2)
   82310:	103ee83a 	callr	r2
   82314:	e0bfff15 	stw	r2,-4(fp)
   82318:	00000306 	br	82328 <alt_get_errno+0x48>
   8231c:	00800234 	movhi	r2,8
   82320:	108c6e04 	addi	r2,r2,12728
   82324:	e0bfff15 	stw	r2,-4(fp)
   82328:	e0bfff17 	ldw	r2,-4(fp)
}
   8232c:	e037883a 	mov	sp,fp
   82330:	dfc00117 	ldw	ra,4(sp)
   82334:	df000017 	ldw	fp,0(sp)
   82338:	dec00204 	addi	sp,sp,8
   8233c:	f800283a 	ret

00082340 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   82340:	defffe04 	addi	sp,sp,-8
   82344:	df000115 	stw	fp,4(sp)
   82348:	df000104 	addi	fp,sp,4
   8234c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   82350:	e0bfff17 	ldw	r2,-4(fp)
   82354:	108000d0 	cmplti	r2,r2,3
   82358:	10000d1e 	bne	r2,zero,82390 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8235c:	e0bfff17 	ldw	r2,-4(fp)
   82360:	00c00234 	movhi	r3,8
   82364:	18cb4904 	addi	r3,r3,11556
   82368:	10800324 	muli	r2,r2,12
   8236c:	10c5883a 	add	r2,r2,r3
   82370:	10800204 	addi	r2,r2,8
   82374:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82378:	e0bfff17 	ldw	r2,-4(fp)
   8237c:	00c00234 	movhi	r3,8
   82380:	18cb4904 	addi	r3,r3,11556
   82384:	10800324 	muli	r2,r2,12
   82388:	10c5883a 	add	r2,r2,r3
   8238c:	10000015 	stw	zero,0(r2)
  }
}
   82390:	e037883a 	mov	sp,fp
   82394:	df000017 	ldw	fp,0(sp)
   82398:	dec00104 	addi	sp,sp,4
   8239c:	f800283a 	ret

000823a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   823a0:	defffa04 	addi	sp,sp,-24
   823a4:	df000515 	stw	fp,20(sp)
   823a8:	df000504 	addi	fp,sp,20
   823ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   823b0:	0005303a 	rdctl	r2,status
   823b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   823b8:	e0fffd17 	ldw	r3,-12(fp)
   823bc:	00bfff84 	movi	r2,-2
   823c0:	1884703a 	and	r2,r3,r2
   823c4:	1001703a 	wrctl	status,r2
  
  return context;
   823c8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   823cc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   823d0:	e0bfff17 	ldw	r2,-4(fp)
   823d4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   823d8:	e0bffc17 	ldw	r2,-16(fp)
   823dc:	10c00017 	ldw	r3,0(r2)
   823e0:	e0bffc17 	ldw	r2,-16(fp)
   823e4:	10800117 	ldw	r2,4(r2)
   823e8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   823ec:	e0bffc17 	ldw	r2,-16(fp)
   823f0:	10c00117 	ldw	r3,4(r2)
   823f4:	e0bffc17 	ldw	r2,-16(fp)
   823f8:	10800017 	ldw	r2,0(r2)
   823fc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   82400:	e0fffc17 	ldw	r3,-16(fp)
   82404:	e0bffc17 	ldw	r2,-16(fp)
   82408:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8240c:	e0fffc17 	ldw	r3,-16(fp)
   82410:	e0bffc17 	ldw	r2,-16(fp)
   82414:	18800015 	stw	r2,0(r3)
   82418:	e0bffe17 	ldw	r2,-8(fp)
   8241c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82420:	e0bffb17 	ldw	r2,-20(fp)
   82424:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   82428:	e037883a 	mov	sp,fp
   8242c:	df000017 	ldw	fp,0(sp)
   82430:	dec00104 	addi	sp,sp,4
   82434:	f800283a 	ret

00082438 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   82438:	defffb04 	addi	sp,sp,-20
   8243c:	dfc00415 	stw	ra,16(sp)
   82440:	df000315 	stw	fp,12(sp)
   82444:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   82448:	d0a00917 	ldw	r2,-32732(gp)
   8244c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   82450:	d0a0cb17 	ldw	r2,-31956(gp)
   82454:	10800044 	addi	r2,r2,1
   82458:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8245c:	00003106 	br	82524 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   82460:	e0bffe17 	ldw	r2,-8(fp)
   82464:	10800017 	ldw	r2,0(r2)
   82468:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8246c:	e0bffe17 	ldw	r2,-8(fp)
   82470:	10800403 	ldbu	r2,16(r2)
   82474:	10803fcc 	andi	r2,r2,255
   82478:	1005003a 	cmpeq	r2,r2,zero
   8247c:	1000051e 	bne	r2,zero,82494 <alt_tick+0x5c>
   82480:	d0a0cb17 	ldw	r2,-31956(gp)
   82484:	1004c03a 	cmpne	r2,r2,zero
   82488:	1000021e 	bne	r2,zero,82494 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8248c:	e0bffe17 	ldw	r2,-8(fp)
   82490:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   82494:	e0bffe17 	ldw	r2,-8(fp)
   82498:	10c00217 	ldw	r3,8(r2)
   8249c:	d0a0cb17 	ldw	r2,-31956(gp)
   824a0:	10c01e36 	bltu	r2,r3,8251c <alt_tick+0xe4>
   824a4:	e0bffe17 	ldw	r2,-8(fp)
   824a8:	10800403 	ldbu	r2,16(r2)
   824ac:	10803fcc 	andi	r2,r2,255
   824b0:	1004c03a 	cmpne	r2,r2,zero
   824b4:	1000191e 	bne	r2,zero,8251c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   824b8:	e0bffe17 	ldw	r2,-8(fp)
   824bc:	10c00317 	ldw	r3,12(r2)
   824c0:	e0bffe17 	ldw	r2,-8(fp)
   824c4:	11000517 	ldw	r4,20(r2)
   824c8:	183ee83a 	callr	r3
   824cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   824d0:	e0bffd17 	ldw	r2,-12(fp)
   824d4:	1004c03a 	cmpne	r2,r2,zero
   824d8:	1000031e 	bne	r2,zero,824e8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   824dc:	e13ffe17 	ldw	r4,-8(fp)
   824e0:	00823a00 	call	823a0 <alt_alarm_stop>
   824e4:	00000d06 	br	8251c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   824e8:	e0bffe17 	ldw	r2,-8(fp)
   824ec:	10c00217 	ldw	r3,8(r2)
   824f0:	e0bffd17 	ldw	r2,-12(fp)
   824f4:	1887883a 	add	r3,r3,r2
   824f8:	e0bffe17 	ldw	r2,-8(fp)
   824fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   82500:	e0bffe17 	ldw	r2,-8(fp)
   82504:	10c00217 	ldw	r3,8(r2)
   82508:	d0a0cb17 	ldw	r2,-31956(gp)
   8250c:	1880032e 	bgeu	r3,r2,8251c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   82510:	e0fffe17 	ldw	r3,-8(fp)
   82514:	00800044 	movi	r2,1
   82518:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8251c:	e0bfff17 	ldw	r2,-4(fp)
   82520:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82524:	d0e00904 	addi	r3,gp,-32732
   82528:	e0bffe17 	ldw	r2,-8(fp)
   8252c:	10ffcc1e 	bne	r2,r3,82460 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   82530:	e037883a 	mov	sp,fp
   82534:	dfc00117 	ldw	ra,4(sp)
   82538:	df000017 	ldw	fp,0(sp)
   8253c:	dec00204 	addi	sp,sp,8
   82540:	f800283a 	ret

00082544 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   82544:	deffff04 	addi	sp,sp,-4
   82548:	df000015 	stw	fp,0(sp)
   8254c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   82550:	000170fa 	wrctl	ienable,zero
}
   82554:	e037883a 	mov	sp,fp
   82558:	df000017 	ldw	fp,0(sp)
   8255c:	dec00104 	addi	sp,sp,4
   82560:	f800283a 	ret

00082564 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   82564:	defff904 	addi	sp,sp,-28
   82568:	dfc00615 	stw	ra,24(sp)
   8256c:	df000515 	stw	fp,20(sp)
   82570:	df000504 	addi	fp,sp,20
   82574:	e13ffd15 	stw	r4,-12(fp)
   82578:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8257c:	e0bffe17 	ldw	r2,-8(fp)
   82580:	10800017 	ldw	r2,0(r2)
   82584:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82588:	e13ffd17 	ldw	r4,-12(fp)
   8258c:	00808340 	call	80834 <strlen>
   82590:	10800044 	addi	r2,r2,1
   82594:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82598:	00000d06 	br	825d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8259c:	e0bffc17 	ldw	r2,-16(fp)
   825a0:	11000217 	ldw	r4,8(r2)
   825a4:	e1bffb17 	ldw	r6,-20(fp)
   825a8:	e17ffd17 	ldw	r5,-12(fp)
   825ac:	00828800 	call	82880 <memcmp>
   825b0:	1004c03a 	cmpne	r2,r2,zero
   825b4:	1000031e 	bne	r2,zero,825c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   825b8:	e0bffc17 	ldw	r2,-16(fp)
   825bc:	e0bfff15 	stw	r2,-4(fp)
   825c0:	00000706 	br	825e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   825c4:	e0bffc17 	ldw	r2,-16(fp)
   825c8:	10800017 	ldw	r2,0(r2)
   825cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   825d0:	e0fffe17 	ldw	r3,-8(fp)
   825d4:	e0bffc17 	ldw	r2,-16(fp)
   825d8:	10fff01e 	bne	r2,r3,8259c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   825dc:	e03fff15 	stw	zero,-4(fp)
   825e0:	e0bfff17 	ldw	r2,-4(fp)
}
   825e4:	e037883a 	mov	sp,fp
   825e8:	dfc00117 	ldw	ra,4(sp)
   825ec:	df000017 	ldw	fp,0(sp)
   825f0:	dec00204 	addi	sp,sp,8
   825f4:	f800283a 	ret

000825f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   825f8:	defffa04 	addi	sp,sp,-24
   825fc:	dfc00515 	stw	ra,20(sp)
   82600:	df000415 	stw	fp,16(sp)
   82604:	df000404 	addi	fp,sp,16
   82608:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8260c:	00800234 	movhi	r2,8
   82610:	108bab04 	addi	r2,r2,11948
   82614:	10800017 	ldw	r2,0(r2)
   82618:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8261c:	00003306 	br	826ec <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   82620:	e0bffd17 	ldw	r2,-12(fp)
   82624:	11000217 	ldw	r4,8(r2)
   82628:	00808340 	call	80834 <strlen>
   8262c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   82630:	e0bffd17 	ldw	r2,-12(fp)
   82634:	10c00217 	ldw	r3,8(r2)
   82638:	e0bffc17 	ldw	r2,-16(fp)
   8263c:	1885883a 	add	r2,r3,r2
   82640:	10bfffc4 	addi	r2,r2,-1
   82644:	10800003 	ldbu	r2,0(r2)
   82648:	10803fcc 	andi	r2,r2,255
   8264c:	1080201c 	xori	r2,r2,128
   82650:	10bfe004 	addi	r2,r2,-128
   82654:	10800bd8 	cmpnei	r2,r2,47
   82658:	1000031e 	bne	r2,zero,82668 <alt_find_file+0x70>
    {
      len -= 1;
   8265c:	e0bffc17 	ldw	r2,-16(fp)
   82660:	10bfffc4 	addi	r2,r2,-1
   82664:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82668:	e0bffc17 	ldw	r2,-16(fp)
   8266c:	1007883a 	mov	r3,r2
   82670:	e0bffe17 	ldw	r2,-8(fp)
   82674:	1885883a 	add	r2,r3,r2
   82678:	10800003 	ldbu	r2,0(r2)
   8267c:	10803fcc 	andi	r2,r2,255
   82680:	1080201c 	xori	r2,r2,128
   82684:	10bfe004 	addi	r2,r2,-128
   82688:	10800be0 	cmpeqi	r2,r2,47
   8268c:	10000a1e 	bne	r2,zero,826b8 <alt_find_file+0xc0>
   82690:	e0bffc17 	ldw	r2,-16(fp)
   82694:	1007883a 	mov	r3,r2
   82698:	e0bffe17 	ldw	r2,-8(fp)
   8269c:	1885883a 	add	r2,r3,r2
   826a0:	10800003 	ldbu	r2,0(r2)
   826a4:	10803fcc 	andi	r2,r2,255
   826a8:	1080201c 	xori	r2,r2,128
   826ac:	10bfe004 	addi	r2,r2,-128
   826b0:	1004c03a 	cmpne	r2,r2,zero
   826b4:	10000a1e 	bne	r2,zero,826e0 <alt_find_file+0xe8>
   826b8:	e0bffd17 	ldw	r2,-12(fp)
   826bc:	11000217 	ldw	r4,8(r2)
   826c0:	e1bffc17 	ldw	r6,-16(fp)
   826c4:	e17ffe17 	ldw	r5,-8(fp)
   826c8:	00828800 	call	82880 <memcmp>
   826cc:	1004c03a 	cmpne	r2,r2,zero
   826d0:	1000031e 	bne	r2,zero,826e0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   826d4:	e0bffd17 	ldw	r2,-12(fp)
   826d8:	e0bfff15 	stw	r2,-4(fp)
   826dc:	00000806 	br	82700 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   826e0:	e0bffd17 	ldw	r2,-12(fp)
   826e4:	10800017 	ldw	r2,0(r2)
   826e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   826ec:	00c00234 	movhi	r3,8
   826f0:	18cbab04 	addi	r3,r3,11948
   826f4:	e0bffd17 	ldw	r2,-12(fp)
   826f8:	10ffc91e 	bne	r2,r3,82620 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   826fc:	e03fff15 	stw	zero,-4(fp)
   82700:	e0bfff17 	ldw	r2,-4(fp)
}
   82704:	e037883a 	mov	sp,fp
   82708:	dfc00117 	ldw	ra,4(sp)
   8270c:	df000017 	ldw	fp,0(sp)
   82710:	dec00204 	addi	sp,sp,8
   82714:	f800283a 	ret

00082718 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   82718:	defffc04 	addi	sp,sp,-16
   8271c:	df000315 	stw	fp,12(sp)
   82720:	df000304 	addi	fp,sp,12
   82724:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   82728:	00bffa04 	movi	r2,-24
   8272c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   82730:	e03ffe15 	stw	zero,-8(fp)
   82734:	00001e06 	br	827b0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   82738:	e0bffe17 	ldw	r2,-8(fp)
   8273c:	00c00234 	movhi	r3,8
   82740:	18cb4904 	addi	r3,r3,11556
   82744:	10800324 	muli	r2,r2,12
   82748:	10c5883a 	add	r2,r2,r3
   8274c:	10800017 	ldw	r2,0(r2)
   82750:	1004c03a 	cmpne	r2,r2,zero
   82754:	1000131e 	bne	r2,zero,827a4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   82758:	e0bffe17 	ldw	r2,-8(fp)
   8275c:	00c00234 	movhi	r3,8
   82760:	18cb4904 	addi	r3,r3,11556
   82764:	10800324 	muli	r2,r2,12
   82768:	10c7883a 	add	r3,r2,r3
   8276c:	e0bfff17 	ldw	r2,-4(fp)
   82770:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   82774:	00800234 	movhi	r2,8
   82778:	108baf04 	addi	r2,r2,11964
   8277c:	10c00017 	ldw	r3,0(r2)
   82780:	e0bffe17 	ldw	r2,-8(fp)
   82784:	1880040e 	bge	r3,r2,82798 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   82788:	00c00234 	movhi	r3,8
   8278c:	18cbaf04 	addi	r3,r3,11964
   82790:	e0bffe17 	ldw	r2,-8(fp)
   82794:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   82798:	e0bffe17 	ldw	r2,-8(fp)
   8279c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   827a0:	00000606 	br	827bc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   827a4:	e0bffe17 	ldw	r2,-8(fp)
   827a8:	10800044 	addi	r2,r2,1
   827ac:	e0bffe15 	stw	r2,-8(fp)
   827b0:	e0bffe17 	ldw	r2,-8(fp)
   827b4:	10800810 	cmplti	r2,r2,32
   827b8:	103fdf1e 	bne	r2,zero,82738 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   827bc:	e0bffd17 	ldw	r2,-12(fp)
}
   827c0:	e037883a 	mov	sp,fp
   827c4:	df000017 	ldw	fp,0(sp)
   827c8:	dec00104 	addi	sp,sp,4
   827cc:	f800283a 	ret

000827d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   827d0:	defffb04 	addi	sp,sp,-20
   827d4:	df000415 	stw	fp,16(sp)
   827d8:	df000404 	addi	fp,sp,16
   827dc:	e13ffe15 	stw	r4,-8(fp)
   827e0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   827e4:	e0bfff17 	ldw	r2,-4(fp)
   827e8:	10820070 	cmpltui	r2,r2,2049
   827ec:	1000021e 	bne	r2,zero,827f8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   827f0:	00820004 	movi	r2,2048
   827f4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   827f8:	e0fffe17 	ldw	r3,-8(fp)
   827fc:	e0bfff17 	ldw	r2,-4(fp)
   82800:	1885883a 	add	r2,r3,r2
   82804:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   82808:	e0bffe17 	ldw	r2,-8(fp)
   8280c:	e0bffd15 	stw	r2,-12(fp)
   82810:	00000506 	br	82828 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   82814:	e0bffd17 	ldw	r2,-12(fp)
   82818:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8281c:	e0bffd17 	ldw	r2,-12(fp)
   82820:	10800804 	addi	r2,r2,32
   82824:	e0bffd15 	stw	r2,-12(fp)
   82828:	e0fffd17 	ldw	r3,-12(fp)
   8282c:	e0bffc17 	ldw	r2,-16(fp)
   82830:	18bff836 	bltu	r3,r2,82814 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   82834:	e0bffe17 	ldw	r2,-8(fp)
   82838:	108007cc 	andi	r2,r2,31
   8283c:	1005003a 	cmpeq	r2,r2,zero
   82840:	1000021e 	bne	r2,zero,8284c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   82844:	e0bffd17 	ldw	r2,-12(fp)
   82848:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   8284c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   82850:	e037883a 	mov	sp,fp
   82854:	df000017 	ldw	fp,0(sp)
   82858:	dec00104 	addi	sp,sp,4
   8285c:	f800283a 	ret

00082860 <exit>:
   82860:	defffe04 	addi	sp,sp,-8
   82864:	dc400015 	stw	r17,0(sp)
   82868:	000b883a 	mov	r5,zero
   8286c:	2023883a 	mov	r17,r4
   82870:	dfc00115 	stw	ra,4(sp)
   82874:	00828c00 	call	828c0 <__call_exitprocs>
   82878:	8809883a 	mov	r4,r17
   8287c:	0082abc0 	call	82abc <_exit>

00082880 <memcmp>:
   82880:	31ffffc4 	addi	r7,r6,-1
   82884:	3000061e 	bne	r6,zero,828a0 <memcmp+0x20>
   82888:	00000a06 	br	828b4 <memcmp+0x34>
   8288c:	39ffffc4 	addi	r7,r7,-1
   82890:	00bfffc4 	movi	r2,-1
   82894:	21000044 	addi	r4,r4,1
   82898:	29400044 	addi	r5,r5,1
   8289c:	38800526 	beq	r7,r2,828b4 <memcmp+0x34>
   828a0:	20c00003 	ldbu	r3,0(r4)
   828a4:	28800003 	ldbu	r2,0(r5)
   828a8:	18bff826 	beq	r3,r2,8288c <memcmp+0xc>
   828ac:	1885c83a 	sub	r2,r3,r2
   828b0:	f800283a 	ret
   828b4:	0005883a 	mov	r2,zero
   828b8:	f800283a 	ret

000828bc <register_fini>:
   828bc:	f800283a 	ret

000828c0 <__call_exitprocs>:
   828c0:	defff304 	addi	sp,sp,-52
   828c4:	00800234 	movhi	r2,8
   828c8:	108baa04 	addi	r2,r2,11944
   828cc:	df000b15 	stw	fp,44(sp)
   828d0:	17000017 	ldw	fp,0(r2)
   828d4:	00800034 	movhi	r2,0
   828d8:	10800004 	addi	r2,r2,0
   828dc:	1005003a 	cmpeq	r2,r2,zero
   828e0:	d8800215 	stw	r2,8(sp)
   828e4:	e0800c04 	addi	r2,fp,48
   828e8:	dd800915 	stw	r22,36(sp)
   828ec:	dd400815 	stw	r21,32(sp)
   828f0:	dfc00c15 	stw	ra,48(sp)
   828f4:	ddc00a15 	stw	r23,40(sp)
   828f8:	dd000715 	stw	r20,28(sp)
   828fc:	dcc00615 	stw	r19,24(sp)
   82900:	dc800515 	stw	r18,20(sp)
   82904:	dc400415 	stw	r17,16(sp)
   82908:	dc000315 	stw	r16,12(sp)
   8290c:	282d883a 	mov	r22,r5
   82910:	d9000115 	stw	r4,4(sp)
   82914:	d8800015 	stw	r2,0(sp)
   82918:	282b003a 	cmpeq	r21,r5,zero
   8291c:	e4400c17 	ldw	r17,48(fp)
   82920:	88001226 	beq	r17,zero,8296c <__call_exitprocs+0xac>
   82924:	ddc00017 	ldw	r23,0(sp)
   82928:	88800117 	ldw	r2,4(r17)
   8292c:	8c802217 	ldw	r18,136(r17)
   82930:	143fffc4 	addi	r16,r2,-1
   82934:	80000b16 	blt	r16,zero,82964 <__call_exitprocs+0xa4>
   82938:	9027003a 	cmpeq	r19,r18,zero
   8293c:	a800171e 	bne	r21,zero,8299c <__call_exitprocs+0xdc>
   82940:	9800051e 	bne	r19,zero,82958 <__call_exitprocs+0x98>
   82944:	8409883a 	add	r4,r16,r16
   82948:	2105883a 	add	r2,r4,r4
   8294c:	1485883a 	add	r2,r2,r18
   82950:	10c02017 	ldw	r3,128(r2)
   82954:	b0c01226 	beq	r22,r3,829a0 <__call_exitprocs+0xe0>
   82958:	843fffc4 	addi	r16,r16,-1
   8295c:	00bfffc4 	movi	r2,-1
   82960:	80bff61e 	bne	r16,r2,8293c <__call_exitprocs+0x7c>
   82964:	d8800217 	ldw	r2,8(sp)
   82968:	10003226 	beq	r2,zero,82a34 <__call_exitprocs+0x174>
   8296c:	dfc00c17 	ldw	ra,48(sp)
   82970:	df000b17 	ldw	fp,44(sp)
   82974:	ddc00a17 	ldw	r23,40(sp)
   82978:	dd800917 	ldw	r22,36(sp)
   8297c:	dd400817 	ldw	r21,32(sp)
   82980:	dd000717 	ldw	r20,28(sp)
   82984:	dcc00617 	ldw	r19,24(sp)
   82988:	dc800517 	ldw	r18,20(sp)
   8298c:	dc400417 	ldw	r17,16(sp)
   82990:	dc000317 	ldw	r16,12(sp)
   82994:	dec00d04 	addi	sp,sp,52
   82998:	f800283a 	ret
   8299c:	8409883a 	add	r4,r16,r16
   829a0:	88c00117 	ldw	r3,4(r17)
   829a4:	2105883a 	add	r2,r4,r4
   829a8:	1445883a 	add	r2,r2,r17
   829ac:	18ffffc4 	addi	r3,r3,-1
   829b0:	11800217 	ldw	r6,8(r2)
   829b4:	1c001826 	beq	r3,r16,82a18 <__call_exitprocs+0x158>
   829b8:	10000215 	stw	zero,8(r2)
   829bc:	303fe626 	beq	r6,zero,82958 <__call_exitprocs+0x98>
   829c0:	8d000117 	ldw	r20,4(r17)
   829c4:	9800121e 	bne	r19,zero,82a10 <__call_exitprocs+0x150>
   829c8:	00c00044 	movi	r3,1
   829cc:	1c06983a 	sll	r3,r3,r16
   829d0:	90804017 	ldw	r2,256(r18)
   829d4:	1884703a 	and	r2,r3,r2
   829d8:	10000d26 	beq	r2,zero,82a10 <__call_exitprocs+0x150>
   829dc:	90804117 	ldw	r2,260(r18)
   829e0:	1884703a 	and	r2,r3,r2
   829e4:	10000e1e 	bne	r2,zero,82a20 <__call_exitprocs+0x160>
   829e8:	2105883a 	add	r2,r4,r4
   829ec:	1485883a 	add	r2,r2,r18
   829f0:	11400017 	ldw	r5,0(r2)
   829f4:	d9000117 	ldw	r4,4(sp)
   829f8:	303ee83a 	callr	r6
   829fc:	88800117 	ldw	r2,4(r17)
   82a00:	a0bfc61e 	bne	r20,r2,8291c <__call_exitprocs+0x5c>
   82a04:	b8800017 	ldw	r2,0(r23)
   82a08:	147fd326 	beq	r2,r17,82958 <__call_exitprocs+0x98>
   82a0c:	003fc306 	br	8291c <__call_exitprocs+0x5c>
   82a10:	303ee83a 	callr	r6
   82a14:	003ff906 	br	829fc <__call_exitprocs+0x13c>
   82a18:	8c000115 	stw	r16,4(r17)
   82a1c:	003fe706 	br	829bc <__call_exitprocs+0xfc>
   82a20:	2105883a 	add	r2,r4,r4
   82a24:	1485883a 	add	r2,r2,r18
   82a28:	11000017 	ldw	r4,0(r2)
   82a2c:	303ee83a 	callr	r6
   82a30:	003ff206 	br	829fc <__call_exitprocs+0x13c>
   82a34:	88800117 	ldw	r2,4(r17)
   82a38:	10000b1e 	bne	r2,zero,82a68 <__call_exitprocs+0x1a8>
   82a3c:	89000017 	ldw	r4,0(r17)
   82a40:	20000a26 	beq	r4,zero,82a6c <__call_exitprocs+0x1ac>
   82a44:	b9000015 	stw	r4,0(r23)
   82a48:	90000226 	beq	r18,zero,82a54 <__call_exitprocs+0x194>
   82a4c:	9009883a 	mov	r4,r18
   82a50:	00000000 	call	0 <__reset-0x80000>
   82a54:	8809883a 	mov	r4,r17
   82a58:	00000000 	call	0 <__reset-0x80000>
   82a5c:	bc400017 	ldw	r17,0(r23)
   82a60:	883fb11e 	bne	r17,zero,82928 <__call_exitprocs+0x68>
   82a64:	003fc106 	br	8296c <__call_exitprocs+0xac>
   82a68:	89000017 	ldw	r4,0(r17)
   82a6c:	882f883a 	mov	r23,r17
   82a70:	2023883a 	mov	r17,r4
   82a74:	883fac1e 	bne	r17,zero,82928 <__call_exitprocs+0x68>
   82a78:	003fbc06 	br	8296c <__call_exitprocs+0xac>

00082a7c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   82a7c:	defffd04 	addi	sp,sp,-12
   82a80:	df000215 	stw	fp,8(sp)
   82a84:	df000204 	addi	fp,sp,8
   82a88:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   82a8c:	e0bfff17 	ldw	r2,-4(fp)
   82a90:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   82a94:	e0bffe17 	ldw	r2,-8(fp)
   82a98:	1005003a 	cmpeq	r2,r2,zero
   82a9c:	1000021e 	bne	r2,zero,82aa8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   82aa0:	002af070 	cmpltui	zero,zero,43969
   82aa4:	00000106 	br	82aac <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   82aa8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   82aac:	e037883a 	mov	sp,fp
   82ab0:	df000017 	ldw	fp,0(sp)
   82ab4:	dec00104 	addi	sp,sp,4
   82ab8:	f800283a 	ret

00082abc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   82abc:	defffd04 	addi	sp,sp,-12
   82ac0:	dfc00215 	stw	ra,8(sp)
   82ac4:	df000115 	stw	fp,4(sp)
   82ac8:	df000104 	addi	fp,sp,4
   82acc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   82ad0:	e13fff17 	ldw	r4,-4(fp)
   82ad4:	0082a7c0 	call	82a7c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   82ad8:	003fff06 	br	82ad8 <_exit+0x1c>
   82adc:	000828bc 	xorhi	zero,zero,8354
