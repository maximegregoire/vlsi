Library ieee;
use     ieee.std_logic_1164.all;

-- declare empty entity
entity tb is
end tb;

architecture a0 of tb is

  -- the basic signals
  signal clk : std_logic := '0';        -- the clock
  constant CLK_PERIOD : time := 10 ns;
  signal resetn : std_logic := '0';

  -- TODO: declare the component to be tested
  component DE2_TOP
    port (
      CLOCK_27    : in    std_logic;
      CLOCK_50    : in    std_logic;
      EXT_CLOCK   : in    std_logic;
      KEY         : in    std_logic_vector(3 downto 0);
      SW          : in    std_logic_vector(17 downto 0);
      HEX0        : out   std_logic_vector(6 downto 0);
      HEX1        : out   std_logic_vector(6 downto 0);
      HEX2        : out   std_logic_vector(6 downto 0);
      HEX3        : out   std_logic_vector(6 downto 0);
      HEX4        : out   std_logic_vector(6 downto 0);
      HEX5        : out   std_logic_vector(6 downto 0);
      HEX6        : out   std_logic_vector(6 downto 0);
      HEX7        : out   std_logic_vector(6 downto 0);
      LEDG        : out   std_logic_vector(8 downto 0);
      LEDR        : out   std_logic_vector(17 downto 0);
      UART_TXD    : out   std_logic;
      UART_RXD    : in    std_logic;
      IRDA_TXD    : out   std_logic;
      IRDA_RXD    : in    std_logic;
      DRAM_DQ     : inout std_logic_vector(15 downto 0);
      DRAM_ADDR   : out   std_logic_vector(11 downto 0);
      DRAM_LDQM   : out   std_logic;
      DRAM_UDQM   : out   std_logic;
      DRAM_WE_N   : out   std_logic;
      DRAM_CAS_N  : out   std_logic;
      DRAM_RAS_N  : out   std_logic;
      DRAM_CS_N   : out   std_logic;
      DRAM_BA_0   : out   std_logic;
      DRAM_BA_1   : out   std_logic;
      DRAM_CLK    : out   std_logic;
      DRAM_CKE    : out   std_logic;
      FL_DQ       : inout std_logic_vector(7 downto 0);
      FL_ADDR     : out   std_logic_vector(21 downto 0);
      FL_WE_N     : out   std_logic;
      FL_RST_N    : out   std_logic;
      FL_OE_N     : out   std_logic;
      FL_CE_N     : out   std_logic;
      SRAM_DQ     : inout std_logic_vector(15 downto 0);
      SRAM_ADDR   : out   std_logic_vector(17 downto 0);
      SRAM_UB_N   : out   std_logic;
      SRAM_LB_N   : out   std_logic;
      SRAM_WE_N   : out   std_logic;
      SRAM_CE_N   : out   std_logic;
      SRAM_OE_N   : out   std_logic;
      OTG_DATA    : inout std_logic_vector(15 downto 0);
      OTG_ADDR    : out   std_logic_vector(1 downto 0);
      OTG_CS_N    : out   std_logic;
      OTG_RD_N    : out   std_logic;
      OTG_WR_N    : out   std_logic;
      OTG_RST_N   : out   std_logic;
      OTG_FSPEED  : out   std_logic;
      OTG_LSPEED  : out   std_logic;
      OTG_INT0    : in    std_logic;
      OTG_INT1    : in    std_logic;
      OTG_DREQ0   : in    std_logic;
      OTG_DREQ1   : in    std_logic;
      OTG_DACK0_N : out   std_logic;
      OTG_DACK1_N : out   std_logic;
      LCD_ON      : out   std_logic;
      LCD_BLON    : out   std_logic;
      LCD_RW      : out   std_logic;
      LCD_EN      : out   std_logic;
      LCD_RS      : out   std_logic;
      LCD_DATA    : inout std_logic_vector(7 downto 0);
      SD_DAT      : inout std_logic;
      SD_DAT3     : inout std_logic;
      SD_CMD      : inout std_logic;
      SD_CLK      : out   std_logic;
      TDI         : in    std_logic;
      TCK         : in    std_logic;
      TCS         : in    std_logic;
      TDO         : out   std_logic;
      I2C_SDAT    : inout std_logic;
      I2C_SCLK    : out   std_logic;
      PS2_DAT     : in    std_logic;
      PS2_CLK     : in    std_logic;
      VGA_CLK     : out   std_logic;
      VGA_HS      : out   std_logic;
      VGA_VS      : out   std_logic;
      VGA_BLANK   : out   std_logic;
      VGA_SYNC    : out   std_logic;
      VGA_R       : out   std_logic_vector(9 downto 0);
      VGA_G       : out   std_logic_vector(9 downto 0);
      VGA_B       : out   std_logic_vector(9 downto 0);
      ENET_DATA   : inout std_logic_vector(15 downto 0);
      ENET_CMD    : out   std_logic;
      ENET_CS_N   : out   std_logic;
      ENET_WR_N   : out   std_logic;
      ENET_RD_N   : out   std_logic;
      ENET_RST_N  : out   std_logic;
      ENET_INT    : in    std_logic;
      ENET_CLK    : out   std_logic;
      AUD_ADCLRCK : inout std_logic;
      AUD_ADCDAT  : in    std_logic;
      AUD_DACLRCK : inout std_logic;
      AUD_DACDAT  : out   std_logic;
      AUD_BCLK    : inout std_logic;
      AUD_XCK     : out   std_logic;
      TD_DATA     : in    std_logic_vector(7 downto 0);
      TD_HS       : in    std_logic;
      TD_VS       : in    std_logic;
      TD_RESET    : out   std_logic;
      GPIO_0      : inout std_logic_vector(35 downto 0);
      GPIO_1      : inout std_logic_vector(35 downto 0));
  end component;
  
begin  -- a0

  -- create the clock
  clk <= not clk after CLK_PERIOD/2;

  -- asynchronous reset
  resetn <= '0', '1' after 50 ns;

  -- TODO: instantiate the component to be tested
  DE2_TOP_1: DE2_TOP
    port map (
      CLOCK_27    => clk,
      CLOCK_50    => '0',
      EXT_CLOCK   => '0',
      KEY         => (others => '0'),
      SW          => (others => '0'),
      HEX0        => OPEN,
      HEX1        => OPEN,
      HEX2        => OPEN,
      HEX3        => OPEN,
      HEX4        => OPEN,
      HEX5        => OPEN,
      HEX6        => OPEN,
      HEX7        => OPEN,
      LEDG        => OPEN,
      LEDR        => OPEN,
      UART_TXD    => OPEN,
      UART_RXD    => '0',
      IRDA_TXD    => OPEN,
      IRDA_RXD    => '0',
      DRAM_DQ     => OPEN,
      DRAM_ADDR   => OPEN,
      DRAM_LDQM   => OPEN,
      DRAM_UDQM   => OPEN,
      DRAM_WE_N   => OPEN,
      DRAM_CAS_N  => OPEN,
      DRAM_RAS_N  => OPEN,
      DRAM_CS_N   => OPEN,
      DRAM_BA_0   => OPEN,
      DRAM_BA_1   => OPEN,
      DRAM_CLK    => OPEN,
      DRAM_CKE    => OPEN,
      FL_DQ       => OPEN,
      FL_ADDR     => OPEN,
      FL_WE_N     => OPEN,
      FL_RST_N    => OPEN,
      FL_OE_N     => OPEN,
      FL_CE_N     => OPEN,
      SRAM_DQ     => OPEN,
      SRAM_ADDR   => OPEN,
      SRAM_UB_N   => OPEN,
      SRAM_LB_N   => OPEN,
      SRAM_WE_N   => OPEN,
      SRAM_CE_N   => OPEN,
      SRAM_OE_N   => OPEN,
      OTG_DATA    => OPEN,
      OTG_ADDR    => OPEN,
      OTG_CS_N    => OPEN,
      OTG_RD_N    => OPEN,
      OTG_WR_N    => OPEN,
      OTG_RST_N   => OPEN,
      OTG_FSPEED  => OPEN,
      OTG_LSPEED  => OPEN,
      OTG_INT0    => '0',
      OTG_INT1    => '0',
      OTG_DREQ0   => '0',
      OTG_DREQ1   => '0',
      OTG_DACK0_N => OPEN,
      OTG_DACK1_N => OPEN,
      LCD_ON      => OPEN,
      LCD_BLON    => OPEN,
      LCD_RW      => OPEN,
      LCD_EN      => OPEN,
      LCD_RS      => OPEN,
      LCD_DATA    => OPEN,
      SD_DAT      => OPEN,
      SD_DAT3     => OPEN,
      SD_CMD      => OPEN,
      SD_CLK      => OPEN,
      TDI         => '0',
      TCK         => '0',
      TCS         => '0',
      TDO         => OPEN,
      I2C_SDAT    => OPEN,
      I2C_SCLK    => OPEN,
      PS2_DAT     => '0',
      PS2_CLK     => '0',
      VGA_CLK     => OPEN,
      VGA_HS      => OPEN,
      VGA_VS      => OPEN,
      VGA_BLANK   => OPEN,
      VGA_SYNC    => OPEN,
      VGA_R       => OPEN,
      VGA_G       => OPEN,
      VGA_B       => OPEN,
      ENET_DATA   => OPEN,
      ENET_CMD    => OPEN,
      ENET_CS_N   => OPEN,
      ENET_WR_N   => OPEN,
      ENET_RD_N   => OPEN,
      ENET_RST_N  => OPEN,
      ENET_INT    => '0',
      ENET_CLK    => OPEN,
      AUD_ADCLRCK => OPEN,
      AUD_ADCDAT  => '0',
      AUD_DACLRCK => OPEN,
      AUD_DACDAT  => OPEN,
      AUD_BCLK    => OPEN,
      AUD_XCK     => OPEN,
      TD_DATA     => (others => '0'),
      TD_HS       => '0',
      TD_VS       => '0',
      TD_RESET    => OPEN,
      GPIO_0      => OPEN,
      GPIO_1      => OPEN);
end a0;
