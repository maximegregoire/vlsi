	component first_nios2_system is
		port (
			clk_clk                    : in    std_logic                     := 'X';             -- clk
			reset_reset_n              : in    std_logic                     := 'X';             -- reset_n
			new_sdram_controller_addr  : out   std_logic_vector(11 downto 0);                    -- addr
			new_sdram_controller_ba    : out   std_logic_vector(1 downto 0);                     -- ba
			new_sdram_controller_cas_n : out   std_logic;                                        -- cas_n
			new_sdram_controller_cke   : out   std_logic;                                        -- cke
			new_sdram_controller_cs_n  : out   std_logic;                                        -- cs_n
			new_sdram_controller_dq    : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			new_sdram_controller_dqm   : out   std_logic_vector(1 downto 0);                     -- dqm
			new_sdram_controller_ras_n : out   std_logic;                                        -- ras_n
			new_sdram_controller_we_n  : out   std_logic;                                        -- we_n
			grab_if_gclk               : in    std_logic                     := 'X';             -- gclk
			grab_if_vdata              : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- vdata
			grab_if_GSSHT              : in    std_logic                     := 'X';             -- GSSHT
			grab_if_GMODE              : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- GMODE
			grab_if_GCONT              : in    std_logic                     := 'X';             -- GCONT
			grab_if_GFMT               : in    std_logic                     := 'X';             -- GFMT
			grab_if_GFSTART            : in    std_logic_vector(22 downto 0) := (others => 'X'); -- GFSTART
			grab_if_GLPITCH            : in    std_logic_vector(22 downto 0) := (others => 'X'); -- GLPITCH
			grab_if_GYSS               : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- GYSS
			grab_if_GXSS               : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- GXSS
			grab_if_GACTIVE            : out   std_logic;                                        -- GACTIVE
			grab_if_GSPDG              : out   std_logic;                                        -- GSPDG
			grab_if_DEBUG_GRABIF1      : out   std_logic_vector(31 downto 0);                    -- DEBUG_GRABIF1
			grab_if_DEBUG_GRABIF2      : out   std_logic_vector(31 downto 0);                    -- DEBUG_GRABIF2
			regfile_GSPDG              : out   std_logic;                                        -- GSPDG
			regfile_GACTIVE            : out   std_logic;                                        -- GACTIVE
			regfile_GFMT               : out   std_logic;                                        -- GFMT
			regfile_GMODE              : out   std_logic_vector(1 downto 0);                     -- GMODE
			regfile_GXSS               : out   std_logic_vector(1 downto 0);                     -- GXSS
			regfile_GYSS               : out   std_logic_vector(1 downto 0);                     -- GYSS
			regfile_GFSTART            : out   std_logic_vector(22 downto 0);                    -- GFSTART
			regfile_GLPITCH            : out   std_logic_vector(22 downto 0);                    -- GLPITCH
			regfile_SOFIEN             : out   std_logic;                                        -- SOFIEN
			regfile_DMAEN              : out   std_logic;                                        -- DMAEN
			regfile_DMALR              : out   std_logic;                                        -- DMALR
			regfile_DMAFSTART          : out   std_logic_vector(22 downto 0);                    -- DMAFSTART
			regfile_DMALPITCH          : out   std_logic_vector(22 downto 0);                    -- DMALPITCH
			regfile_DMAXSIZE           : out   std_logic_vector(15 downto 0);                    -- DMAXSIZE
			regfile_VGAHZOOM           : out   std_logic_vector(1 downto 0);                     -- VGAHZOOM
			regfile_VGAVZOOM           : out   std_logic_vector(1 downto 0);                     -- VGAVZOOM
			regfile_PFMT               : out   std_logic_vector(1 downto 0);                     -- PFMT
			regfile_HTOTAL             : out   std_logic_vector(15 downto 0);                    -- HTOTAL
			regfile_HSSYNC             : out   std_logic_vector(15 downto 0);                    -- HSSYNC
			regfile_HESYNC             : out   std_logic_vector(15 downto 0);                    -- HESYNC
			regfile_HSVALID            : out   std_logic_vector(15 downto 0);                    -- HSVALID
			regfile_HEVALID            : out   std_logic_vector(15 downto 0);                    -- HEVALID
			regfile_VTOTAL             : out   std_logic_vector(15 downto 0);                    -- VTOTAL
			regfile_VSSYNC             : out   std_logic_vector(15 downto 0);                    -- VSSYNC
			regfile_VESYNC             : out   std_logic_vector(15 downto 0);                    -- VESYNC
			regfile_VSVALID            : out   std_logic_vector(15 downto 0);                    -- VSVALID
			regfile_VEVALID            : out   std_logic_vector(15 downto 0);                    -- VEVALID
			regfile_GACTIVE_IN         : in    std_logic                     := 'X';             -- GACTIVE_IN
			regfile_GSPDG_IN           : in    std_logic                     := 'X';             -- GSPDG_IN
			regfile_GSSHT              : out   std_logic;                                        -- GSSHT
			regfile_SOFISTS            : out   std_logic;                                        -- SOFISTS
			regfile_EOFIEN             : out   std_logic;                                        -- EOFIEN
			dma_DMAEN                  : in    std_logic                     := 'X';             -- DMAEN
			dma_DMALR                  : in    std_logic                     := 'X';             -- DMALR
			dma_DMAFSTART              : in    std_logic_vector(22 downto 0) := (others => 'X'); -- DMAFSTART
			dma_DMALPITCH              : in    std_logic_vector(22 downto 0) := (others => 'X'); -- DMALPITCH
			dma_DMAXSIZE               : in    std_logic_vector(15 downto 0) := (others => 'X'); -- DMAXSIZE
			dma_data                   : out   std_logic_vector(31 downto 0);                    -- data
			dma_write_address          : out   std_logic_vector(10 downto 0);                    -- write_address
			dma_write_enable           : out   std_logic;                                        -- write_enable
			dma_read_enable            : in    std_logic                     := 'X';             -- read_enable
			dma_SOL_in                 : in    std_logic                     := 'X';             -- SOL_in
			dma_SOF_in                 : in    std_logic                     := 'X'              -- SOF_in
		);
	end component first_nios2_system;

